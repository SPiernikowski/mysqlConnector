// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_datatypes.proto

#include "mysqlx_datatypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fdatatypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Any_mysqlx_5fdatatypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fdatatypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scalar_mysqlx_5fdatatypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fdatatypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scalar_Octets_mysqlx_5fdatatypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fdatatypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scalar_String_mysqlx_5fdatatypes_2eproto;
namespace Mysqlx {
namespace Datatypes {
class Scalar_StringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scalar_String> _instance;
} _Scalar_String_default_instance_;
class Scalar_OctetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scalar_Octets> _instance;
} _Scalar_Octets_default_instance_;
class ScalarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scalar> _instance;
} _Scalar_default_instance_;
class Object_ObjectFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object_ObjectField> _instance;
} _Object_ObjectField_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class ArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Array> _instance;
} _Array_default_instance_;
class AnyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Any> _instance;
} _Any_default_instance_;
}  // namespace Datatypes
}  // namespace Mysqlx
static void InitDefaultsscc_info_Any_mysqlx_5fdatatypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Datatypes::_Object_ObjectField_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Object_ObjectField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Datatypes::_Object_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Datatypes::_Array_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Array();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Datatypes::_Any_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Any();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Datatypes::Object_ObjectField::InitAsDefaultInstance();
  ::Mysqlx::Datatypes::Object::InitAsDefaultInstance();
  ::Mysqlx::Datatypes::Array::InitAsDefaultInstance();
  ::Mysqlx::Datatypes::Any::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Any_mysqlx_5fdatatypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Any_mysqlx_5fdatatypes_2eproto}, {
      &scc_info_Scalar_mysqlx_5fdatatypes_2eproto.base,}};

static void InitDefaultsscc_info_Scalar_mysqlx_5fdatatypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Datatypes::_Scalar_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Scalar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Datatypes::Scalar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scalar_mysqlx_5fdatatypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Scalar_mysqlx_5fdatatypes_2eproto}, {
      &scc_info_Scalar_Octets_mysqlx_5fdatatypes_2eproto.base,
      &scc_info_Scalar_String_mysqlx_5fdatatypes_2eproto.base,}};

static void InitDefaultsscc_info_Scalar_Octets_mysqlx_5fdatatypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Datatypes::_Scalar_Octets_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Scalar_Octets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Datatypes::Scalar_Octets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scalar_Octets_mysqlx_5fdatatypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scalar_Octets_mysqlx_5fdatatypes_2eproto}, {}};

static void InitDefaultsscc_info_Scalar_String_mysqlx_5fdatatypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Datatypes::_Scalar_String_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Scalar_String();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Datatypes::Scalar_String::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scalar_String_mysqlx_5fdatatypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scalar_String_mysqlx_5fdatatypes_2eproto}, {}};

namespace Mysqlx {
namespace Datatypes {
bool Scalar_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Scalar_Type_strings[8] = {};

static const char Scalar_Type_names[] =
  "V_BOOL"
  "V_DOUBLE"
  "V_FLOAT"
  "V_NULL"
  "V_OCTETS"
  "V_SINT"
  "V_STRING"
  "V_UINT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Scalar_Type_entries[] = {
  { {Scalar_Type_names + 0, 6}, 7 },
  { {Scalar_Type_names + 6, 8}, 5 },
  { {Scalar_Type_names + 14, 7}, 6 },
  { {Scalar_Type_names + 21, 6}, 3 },
  { {Scalar_Type_names + 27, 8}, 4 },
  { {Scalar_Type_names + 35, 6}, 1 },
  { {Scalar_Type_names + 41, 8}, 8 },
  { {Scalar_Type_names + 49, 6}, 2 },
};

static const int Scalar_Type_entries_by_number[] = {
  5, // 1 -> V_SINT
  7, // 2 -> V_UINT
  3, // 3 -> V_NULL
  4, // 4 -> V_OCTETS
  1, // 5 -> V_DOUBLE
  2, // 6 -> V_FLOAT
  0, // 7 -> V_BOOL
  6, // 8 -> V_STRING
};

const std::string& Scalar_Type_Name(
    Scalar_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Scalar_Type_entries,
          Scalar_Type_entries_by_number,
          8, Scalar_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Scalar_Type_entries,
      Scalar_Type_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Scalar_Type_strings[idx].get();
}
bool Scalar_Type_Parse(
    const std::string& name, Scalar_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Scalar_Type_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<Scalar_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scalar_Type Scalar::V_SINT;
constexpr Scalar_Type Scalar::V_UINT;
constexpr Scalar_Type Scalar::V_NULL;
constexpr Scalar_Type Scalar::V_OCTETS;
constexpr Scalar_Type Scalar::V_DOUBLE;
constexpr Scalar_Type Scalar::V_FLOAT;
constexpr Scalar_Type Scalar::V_BOOL;
constexpr Scalar_Type Scalar::V_STRING;
constexpr Scalar_Type Scalar::Type_MIN;
constexpr Scalar_Type Scalar::Type_MAX;
constexpr int Scalar::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Any_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Any_Type_strings[3] = {};

static const char Any_Type_names[] =
  "ARRAY"
  "OBJECT"
  "SCALAR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Any_Type_entries[] = {
  { {Any_Type_names + 0, 5}, 3 },
  { {Any_Type_names + 5, 6}, 2 },
  { {Any_Type_names + 11, 6}, 1 },
};

static const int Any_Type_entries_by_number[] = {
  2, // 1 -> SCALAR
  1, // 2 -> OBJECT
  0, // 3 -> ARRAY
};

const std::string& Any_Type_Name(
    Any_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Any_Type_entries,
          Any_Type_entries_by_number,
          3, Any_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Any_Type_entries,
      Any_Type_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Any_Type_strings[idx].get();
}
bool Any_Type_Parse(
    const std::string& name, Any_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Any_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Any_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Any_Type Any::SCALAR;
constexpr Any_Type Any::OBJECT;
constexpr Any_Type Any::ARRAY;
constexpr Any_Type Any::Type_MIN;
constexpr Any_Type Any::Type_MAX;
constexpr int Any::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Scalar_String::InitAsDefaultInstance() {
}
class Scalar_String::_Internal {
 public:
  using HasBits = decltype(std::declval<Scalar_String>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Scalar_String::Scalar_String()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar.String)
}
Scalar_String::Scalar_String(const Scalar_String& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  collation_ = from.collation_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar.String)
}

void Scalar_String::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scalar_String_mysqlx_5fdatatypes_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collation_ = PROTOBUF_ULONGLONG(0);
}

Scalar_String::~Scalar_String() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar.String)
  SharedDtor();
}

void Scalar_String::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Scalar_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar_String& Scalar_String::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scalar_String_mysqlx_5fdatatypes_2eproto.base);
  return *internal_default_instance();
}


void Scalar_String::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  collation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scalar_String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 collation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_collation(&has_bits);
          collation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scalar_String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Scalar.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // optional uint64 collation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_collation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Scalar.String)
  return target;
}

size_t Scalar_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar.String)
  size_t total_size = 0;

  // required bytes value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 collation = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_collation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar_String::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Scalar_String*>(
      &from));
}

void Scalar_String::MergeFrom(const Scalar_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      collation_ = from.collation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scalar_String::CopyFrom(const Scalar_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_String::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Scalar_String::InternalSwap(Scalar_String* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(collation_, other->collation_);
}

std::string Scalar_String::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar.String";
}


// ===================================================================

void Scalar_Octets::InitAsDefaultInstance() {
}
class Scalar_Octets::_Internal {
 public:
  using HasBits = decltype(std::declval<Scalar_Octets>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Scalar_Octets::Scalar_Octets()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar.Octets)
}
Scalar_Octets::Scalar_Octets(const Scalar_Octets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar.Octets)
}

void Scalar_Octets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scalar_Octets_mysqlx_5fdatatypes_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0u;
}

Scalar_Octets::~Scalar_Octets() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar.Octets)
  SharedDtor();
}

void Scalar_Octets::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Scalar_Octets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar_Octets& Scalar_Octets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scalar_Octets_mysqlx_5fdatatypes_2eproto.base);
  return *internal_default_instance();
}


void Scalar_Octets::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar.Octets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  content_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scalar_Octets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_content_type(&has_bits);
          content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scalar_Octets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Scalar.Octets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // optional uint32 content_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Scalar.Octets)
  return target;
}

size_t Scalar_Octets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar.Octets)
  size_t total_size = 0;

  // required bytes value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 content_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar_Octets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Scalar_Octets*>(
      &from));
}

void Scalar_Octets::MergeFrom(const Scalar_Octets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar.Octets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      content_type_ = from.content_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scalar_Octets::CopyFrom(const Scalar_Octets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar.Octets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_Octets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Scalar_Octets::InternalSwap(Scalar_Octets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_type_, other->content_type_);
}

std::string Scalar_Octets::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar.Octets";
}


// ===================================================================

void Scalar::InitAsDefaultInstance() {
  ::Mysqlx::Datatypes::_Scalar_default_instance_._instance.get_mutable()->v_octets_ = const_cast< ::Mysqlx::Datatypes::Scalar_Octets*>(
      ::Mysqlx::Datatypes::Scalar_Octets::internal_default_instance());
  ::Mysqlx::Datatypes::_Scalar_default_instance_._instance.get_mutable()->v_string_ = const_cast< ::Mysqlx::Datatypes::Scalar_String*>(
      ::Mysqlx::Datatypes::Scalar_String::internal_default_instance());
}
class Scalar::_Internal {
 public:
  using HasBits = decltype(std::declval<Scalar>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_v_signed_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_unsigned_int(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Mysqlx::Datatypes::Scalar_Octets& v_octets(const Scalar* msg);
  static void set_has_v_octets(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v_double(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_float(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Mysqlx::Datatypes::Scalar_String& v_string(const Scalar* msg);
  static void set_has_v_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Mysqlx::Datatypes::Scalar_Octets&
Scalar::_Internal::v_octets(const Scalar* msg) {
  return *msg->v_octets_;
}
const ::Mysqlx::Datatypes::Scalar_String&
Scalar::_Internal::v_string(const Scalar* msg) {
  return *msg->v_string_;
}
Scalar::Scalar()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_v_octets()) {
    v_octets_ = new ::Mysqlx::Datatypes::Scalar_Octets(*from.v_octets_);
  } else {
    v_octets_ = nullptr;
  }
  if (from._internal_has_v_string()) {
    v_string_ = new ::Mysqlx::Datatypes::Scalar_String(*from.v_string_);
  } else {
    v_string_ = nullptr;
  }
  ::memcpy(&v_signed_int_, &from.v_signed_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&v_signed_int_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar)
}

void Scalar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scalar_mysqlx_5fdatatypes_2eproto.base);
  ::memset(&v_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_bool_) -
      reinterpret_cast<char*>(&v_octets_)) + sizeof(v_bool_));
  type_ = 1;
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar)
  SharedDtor();
}

void Scalar::SharedDtor() {
  if (this != internal_default_instance()) delete v_octets_;
  if (this != internal_default_instance()) delete v_string_;
}

void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar& Scalar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scalar_mysqlx_5fdatatypes_2eproto.base);
  return *internal_default_instance();
}


void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(v_octets_ != nullptr);
      v_octets_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(v_string_ != nullptr);
      v_string_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&v_signed_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_bool_) -
        reinterpret_cast<char*>(&v_signed_int_)) + sizeof(v_bool_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scalar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Mysqlx.Datatypes.Scalar.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Datatypes::Scalar_Type_IsValid(val))) {
            _internal_set_type(static_cast<::Mysqlx::Datatypes::Scalar_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional sint64 v_signed_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_v_signed_int(&has_bits);
          v_signed_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 v_unsigned_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_v_unsigned_int(&has_bits);
          v_unsigned_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_octets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double v_double = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_v_double(&has_bits);
          v_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float v_float = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_v_float(&has_bits);
          v_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool v_bool = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_v_bool(&has_bits);
          v_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scalar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Scalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional sint64 v_signed_int = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_v_signed_int(), target);
  }

  // optional uint64 v_unsigned_int = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_v_unsigned_int(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::v_octets(this), target, stream);
  }

  // optional double v_double = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_v_double(), target);
  }

  // optional float v_float = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_v_float(), target);
  }

  // optional bool v_bool = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_v_bool(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::v_string(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar)
  size_t total_size = 0;

  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_octets_);
    }

    // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_string_);
    }

    // optional sint64 v_signed_int = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_v_signed_int());
    }

    // optional uint64 v_unsigned_int = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_v_unsigned_int());
    }

    // optional double v_double = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float v_float = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool v_bool = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Scalar*>(
      &from));
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_v_octets()->::Mysqlx::Datatypes::Scalar_Octets::MergeFrom(from._internal_v_octets());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_v_string()->::Mysqlx::Datatypes::Scalar_String::MergeFrom(from._internal_v_string());
    }
    if (cached_has_bits & 0x00000004u) {
      v_signed_int_ = from.v_signed_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_unsigned_int_ = from.v_unsigned_int_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_double_ = from.v_double_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_float_ = from.v_float_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_bool_ = from.v_bool_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (_internal_has_v_octets()) {
    if (!v_octets_->IsInitialized()) return false;
  }
  if (_internal_has_v_string()) {
    if (!v_string_->IsInitialized()) return false;
  }
  return true;
}

void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(v_octets_, other->v_octets_);
  swap(v_string_, other->v_string_);
  swap(v_signed_int_, other->v_signed_int_);
  swap(v_unsigned_int_, other->v_unsigned_int_);
  swap(v_double_, other->v_double_);
  swap(v_float_, other->v_float_);
  swap(v_bool_, other->v_bool_);
  swap(type_, other->type_);
}

std::string Scalar::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar";
}


// ===================================================================

void Object_ObjectField::InitAsDefaultInstance() {
  ::Mysqlx::Datatypes::_Object_ObjectField_default_instance_._instance.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Any*>(
      ::Mysqlx::Datatypes::Any::internal_default_instance());
}
class Object_ObjectField::_Internal {
 public:
  using HasBits = decltype(std::declval<Object_ObjectField>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Mysqlx::Datatypes::Any& value(const Object_ObjectField* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Mysqlx::Datatypes::Any&
Object_ObjectField::_Internal::value(const Object_ObjectField* msg) {
  return *msg->value_;
}
Object_ObjectField::Object_ObjectField()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Object.ObjectField)
}
Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from._internal_has_value()) {
    value_ = new ::Mysqlx::Datatypes::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Object.ObjectField)
}

void Object_ObjectField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Any_mysqlx_5fdatatypes_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

Object_ObjectField::~Object_ObjectField() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Object.ObjectField)
  SharedDtor();
}

void Object_ObjectField::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Object_ObjectField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object_ObjectField& Object_ObjectField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Any_mysqlx_5fdatatypes_2eproto.base);
  return *internal_default_instance();
}


void Object_ObjectField::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Object.ObjectField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Object_ObjectField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Mysqlx.Datatypes.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object_ObjectField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Object.ObjectField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Object.ObjectField)
  return target;
}

size_t Object_ObjectField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Datatypes.Object.ObjectField)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t Object_ObjectField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Object.ObjectField)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_ObjectField::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Object_ObjectField*>(
      &from));
}

void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::Mysqlx::Datatypes::Any::MergeFrom(from._internal_value());
    }
  }
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::InternalSwap(Object_ObjectField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

std::string Object_ObjectField::GetTypeName() const {
  return "Mysqlx.Datatypes.Object.ObjectField";
}


// ===================================================================

void Object::InitAsDefaultInstance() {
}
class Object::_Internal {
 public:
  using HasBits = decltype(std::declval<Object>()._has_bits_);
};

Object::Object()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      fld_(from.fld_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Object)
}

void Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Any_mysqlx_5fdatatypes_2eproto.base);
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Object)
  SharedDtor();
}

void Object::SharedDtor() {
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Any_mysqlx_5fdatatypes_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fld_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fld_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fld(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  total_size += 1UL * this->_internal_fld_size();
  for (const auto& msg : this->fld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Object*>(
      &from));
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fld_.MergeFrom(from.fld_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fld_)) return false;
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fld_.InternalSwap(&other->fld_);
}

std::string Object::GetTypeName() const {
  return "Mysqlx.Datatypes.Object";
}


// ===================================================================

void Array::InitAsDefaultInstance() {
}
class Array::_Internal {
 public:
  using HasBits = decltype(std::declval<Array>()._has_bits_);
};

Array::Array()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Array)
}
Array::Array(const Array& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Array)
}

void Array::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Any_mysqlx_5fdatatypes_2eproto.base);
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Array)
  SharedDtor();
}

void Array::SharedDtor() {
}

void Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Array& Array::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Any_mysqlx_5fdatatypes_2eproto.base);
  return *internal_default_instance();
}


void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Array::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Mysqlx.Datatypes.Any value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Array::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Any value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Array)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Any value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Array::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Array*>(
      &from));
}

void Array::MergeFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_)) return false;
  return true;
}

void Array::InternalSwap(Array* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
}

std::string Array::GetTypeName() const {
  return "Mysqlx.Datatypes.Array";
}


// ===================================================================

void Any::InitAsDefaultInstance() {
  ::Mysqlx::Datatypes::_Any_default_instance_._instance.get_mutable()->scalar_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
  ::Mysqlx::Datatypes::_Any_default_instance_._instance.get_mutable()->obj_ = const_cast< ::Mysqlx::Datatypes::Object*>(
      ::Mysqlx::Datatypes::Object::internal_default_instance());
  ::Mysqlx::Datatypes::_Any_default_instance_._instance.get_mutable()->array_ = const_cast< ::Mysqlx::Datatypes::Array*>(
      ::Mysqlx::Datatypes::Array::internal_default_instance());
}
class Any::_Internal {
 public:
  using HasBits = decltype(std::declval<Any>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Mysqlx::Datatypes::Scalar& scalar(const Any* msg);
  static void set_has_scalar(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Mysqlx::Datatypes::Object& obj(const Any* msg);
  static void set_has_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Mysqlx::Datatypes::Array& array(const Any* msg);
  static void set_has_array(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Mysqlx::Datatypes::Scalar&
Any::_Internal::scalar(const Any* msg) {
  return *msg->scalar_;
}
const ::Mysqlx::Datatypes::Object&
Any::_Internal::obj(const Any* msg) {
  return *msg->obj_;
}
const ::Mysqlx::Datatypes::Array&
Any::_Internal::array(const Any* msg) {
  return *msg->array_;
}
Any::Any()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Any)
}
Any::Any(const Any& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_scalar()) {
    scalar_ = new ::Mysqlx::Datatypes::Scalar(*from.scalar_);
  } else {
    scalar_ = nullptr;
  }
  if (from._internal_has_obj()) {
    obj_ = new ::Mysqlx::Datatypes::Object(*from.obj_);
  } else {
    obj_ = nullptr;
  }
  if (from._internal_has_array()) {
    array_ = new ::Mysqlx::Datatypes::Array(*from.array_);
  } else {
    array_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Any)
}

void Any::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Any_mysqlx_5fdatatypes_2eproto.base);
  ::memset(&scalar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&array_) -
      reinterpret_cast<char*>(&scalar_)) + sizeof(array_));
  type_ = 1;
}

Any::~Any() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Any)
  SharedDtor();
}

void Any::SharedDtor() {
  if (this != internal_default_instance()) delete scalar_;
  if (this != internal_default_instance()) delete obj_;
  if (this != internal_default_instance()) delete array_;
}

void Any::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Any& Any::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Any_mysqlx_5fdatatypes_2eproto.base);
  return *internal_default_instance();
}


void Any::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Any)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scalar_ != nullptr);
      scalar_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obj_ != nullptr);
      obj_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(array_ != nullptr);
      array_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Any::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Mysqlx.Datatypes.Any.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Datatypes::Any_Type_IsValid(val))) {
            _internal_set_type(static_cast<::Mysqlx::Datatypes::Any_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Datatypes.Scalar scalar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Datatypes.Object obj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Datatypes.Array array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Any::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Datatypes.Any)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar scalar = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scalar(this), target, stream);
  }

  // optional .Mysqlx.Datatypes.Object obj = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::obj(this), target, stream);
  }

  // optional .Mysqlx.Datatypes.Array array = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Datatypes.Any)
  return target;
}

size_t Any::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Any)
  size_t total_size = 0;

  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Mysqlx.Datatypes.Scalar scalar = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scalar_);
    }

    // optional .Mysqlx.Datatypes.Object obj = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_);
    }

    // optional .Mysqlx.Datatypes.Array array = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *array_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Any::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Any*>(
      &from));
}

void Any::MergeFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Any)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scalar()->::Mysqlx::Datatypes::Scalar::MergeFrom(from._internal_scalar());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_obj()->::Mysqlx::Datatypes::Object::MergeFrom(from._internal_obj());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_array()->::Mysqlx::Datatypes::Array::MergeFrom(from._internal_array());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Any::CopyFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (_internal_has_scalar()) {
    if (!scalar_->IsInitialized()) return false;
  }
  if (_internal_has_obj()) {
    if (!obj_->IsInitialized()) return false;
  }
  if (_internal_has_array()) {
    if (!array_->IsInitialized()) return false;
  }
  return true;
}

void Any::InternalSwap(Any* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scalar_, other->scalar_);
  swap(obj_, other->obj_);
  swap(array_, other->array_);
  swap(type_, other->type_);
}

std::string Any::GetTypeName() const {
  return "Mysqlx.Datatypes.Any";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Datatypes
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mysqlx::Datatypes::Scalar_String* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Scalar_String >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Scalar_String >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Datatypes::Scalar_Octets* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Scalar_Octets >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Scalar_Octets >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Datatypes::Scalar* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Scalar >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Datatypes::Object_ObjectField* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Object_ObjectField >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Object_ObjectField >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Datatypes::Object* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Object >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Datatypes::Array* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Array >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Array >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Datatypes::Any* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Any >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Any >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
