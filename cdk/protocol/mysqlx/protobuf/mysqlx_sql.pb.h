// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_sql.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fsql_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fsql_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "mysqlx_datatypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysqlx_5fsql_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysqlx_5fsql_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Mysqlx {
namespace Sql {
class StmtExecute;
class StmtExecuteDefaultTypeInternal;
extern StmtExecuteDefaultTypeInternal _StmtExecute_default_instance_;
class StmtExecuteOk;
class StmtExecuteOkDefaultTypeInternal;
extern StmtExecuteOkDefaultTypeInternal _StmtExecuteOk_default_instance_;
}  // namespace Sql
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> ::Mysqlx::Sql::StmtExecute* Arena::CreateMaybeMessage<::Mysqlx::Sql::StmtExecute>(Arena*);
template<> ::Mysqlx::Sql::StmtExecuteOk* Arena::CreateMaybeMessage<::Mysqlx::Sql::StmtExecuteOk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mysqlx {
namespace Sql {

// ===================================================================

class StmtExecute :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Sql.StmtExecute) */ {
 public:
  StmtExecute();
  virtual ~StmtExecute();

  StmtExecute(const StmtExecute& from);
  StmtExecute(StmtExecute&& from) noexcept
    : StmtExecute() {
    *this = ::std::move(from);
  }

  inline StmtExecute& operator=(const StmtExecute& from) {
    CopyFrom(from);
    return *this;
  }
  inline StmtExecute& operator=(StmtExecute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StmtExecute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StmtExecute* internal_default_instance() {
    return reinterpret_cast<const StmtExecute*>(
               &_StmtExecute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StmtExecute& a, StmtExecute& b) {
    a.Swap(&b);
  }
  inline void Swap(StmtExecute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StmtExecute* New() const final {
    return CreateMaybeMessage<StmtExecute>(nullptr);
  }

  StmtExecute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StmtExecute>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StmtExecute& from);
  void MergeFrom(const StmtExecute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StmtExecute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Sql.StmtExecute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kStmtFieldNumber = 1,
    kNamespaceFieldNumber = 3,
    kCompactMetadataFieldNumber = 4,
  };
  // repeated .Mysqlx.Datatypes.Any args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::Mysqlx::Datatypes::Any* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
      mutable_args();
  private:
  const ::Mysqlx::Datatypes::Any& _internal_args(int index) const;
  ::Mysqlx::Datatypes::Any* _internal_add_args();
  public:
  const ::Mysqlx::Datatypes::Any& args(int index) const;
  ::Mysqlx::Datatypes::Any* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
      args() const;

  // required bytes stmt = 1;
  bool has_stmt() const;
  private:
  bool _internal_has_stmt() const;
  public:
  void clear_stmt();
  const std::string& stmt() const;
  void set_stmt(const std::string& value);
  void set_stmt(std::string&& value);
  void set_stmt(const char* value);
  void set_stmt(const void* value, size_t size);
  std::string* mutable_stmt();
  std::string* release_stmt();
  void set_allocated_stmt(std::string* stmt);
  private:
  const std::string& _internal_stmt() const;
  void _internal_set_stmt(const std::string& value);
  std::string* _internal_mutable_stmt();
  public:

  // optional string namespace = 3 [default = "sql"];
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional bool compact_metadata = 4 [default = false];
  bool has_compact_metadata() const;
  private:
  bool _internal_has_compact_metadata() const;
  public:
  void clear_compact_metadata();
  bool compact_metadata() const;
  void set_compact_metadata(bool value);
  private:
  bool _internal_compact_metadata() const;
  void _internal_set_compact_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Sql.StmtExecute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stmt_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_namespace__;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  bool compact_metadata_;
  friend struct ::TableStruct_mysqlx_5fsql_2eproto;
};
// -------------------------------------------------------------------

class StmtExecuteOk :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Sql.StmtExecuteOk) */ {
 public:
  StmtExecuteOk();
  virtual ~StmtExecuteOk();

  StmtExecuteOk(const StmtExecuteOk& from);
  StmtExecuteOk(StmtExecuteOk&& from) noexcept
    : StmtExecuteOk() {
    *this = ::std::move(from);
  }

  inline StmtExecuteOk& operator=(const StmtExecuteOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline StmtExecuteOk& operator=(StmtExecuteOk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StmtExecuteOk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StmtExecuteOk* internal_default_instance() {
    return reinterpret_cast<const StmtExecuteOk*>(
               &_StmtExecuteOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StmtExecuteOk& a, StmtExecuteOk& b) {
    a.Swap(&b);
  }
  inline void Swap(StmtExecuteOk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StmtExecuteOk* New() const final {
    return CreateMaybeMessage<StmtExecuteOk>(nullptr);
  }

  StmtExecuteOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StmtExecuteOk>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StmtExecuteOk& from);
  void MergeFrom(const StmtExecuteOk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StmtExecuteOk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Sql.StmtExecuteOk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Sql.StmtExecuteOk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlx_5fsql_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StmtExecute

// optional string namespace = 3 [default = "sql"];
inline bool StmtExecute::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StmtExecute::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void StmtExecute::clear_namespace_() {
  namespace__.ClearToDefaultNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StmtExecute::namespace_() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.namespace)
  return _internal_namespace_();
}
inline void StmtExecute::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.namespace)
}
inline std::string* StmtExecute::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& StmtExecute::_internal_namespace_() const {
  return namespace__.GetNoArena();
}
inline void StmtExecute::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.SetNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), value);
}
inline void StmtExecute::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.SetNoArena(
    &::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Sql.StmtExecute.namespace)
}
inline void StmtExecute::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  namespace__.SetNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Sql.StmtExecute.namespace)
}
inline void StmtExecute::set_namespace_(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.SetNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Sql.StmtExecute.namespace)
}
inline std::string* StmtExecute::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000002u;
  return namespace__.MutableNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
}
inline std::string* StmtExecute::release_namespace_() {
  // @@protoc_insertion_point(field_release:Mysqlx.Sql.StmtExecute.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return namespace__.ReleaseNonDefaultNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
}
inline void StmtExecute::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  namespace__.SetAllocatedNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Sql.StmtExecute.namespace)
}

// required bytes stmt = 1;
inline bool StmtExecute::_internal_has_stmt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StmtExecute::has_stmt() const {
  return _internal_has_stmt();
}
inline void StmtExecute::clear_stmt() {
  stmt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StmtExecute::stmt() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.stmt)
  return _internal_stmt();
}
inline void StmtExecute::set_stmt(const std::string& value) {
  _internal_set_stmt(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.stmt)
}
inline std::string* StmtExecute::mutable_stmt() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.stmt)
  return _internal_mutable_stmt();
}
inline const std::string& StmtExecute::_internal_stmt() const {
  return stmt_.GetNoArena();
}
inline void StmtExecute::_internal_set_stmt(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stmt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StmtExecute::set_stmt(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stmt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Sql.StmtExecute.stmt)
}
inline void StmtExecute::set_stmt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stmt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Sql.StmtExecute.stmt)
}
inline void StmtExecute::set_stmt(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stmt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Sql.StmtExecute.stmt)
}
inline std::string* StmtExecute::_internal_mutable_stmt() {
  _has_bits_[0] |= 0x00000001u;
  return stmt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StmtExecute::release_stmt() {
  // @@protoc_insertion_point(field_release:Mysqlx.Sql.StmtExecute.stmt)
  if (!_internal_has_stmt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stmt_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StmtExecute::set_allocated_stmt(std::string* stmt) {
  if (stmt != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stmt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stmt);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Sql.StmtExecute.stmt)
}

// repeated .Mysqlx.Datatypes.Any args = 2;
inline int StmtExecute::_internal_args_size() const {
  return args_.size();
}
inline int StmtExecute::args_size() const {
  return _internal_args_size();
}
inline ::Mysqlx::Datatypes::Any* StmtExecute::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
StmtExecute::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Sql.StmtExecute.args)
  return &args_;
}
inline const ::Mysqlx::Datatypes::Any& StmtExecute::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::Mysqlx::Datatypes::Any& StmtExecute::args(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.args)
  return _internal_args(index);
}
inline ::Mysqlx::Datatypes::Any* StmtExecute::_internal_add_args() {
  return args_.Add();
}
inline ::Mysqlx::Datatypes::Any* StmtExecute::add_args() {
  // @@protoc_insertion_point(field_add:Mysqlx.Sql.StmtExecute.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
StmtExecute::args() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Sql.StmtExecute.args)
  return args_;
}

// optional bool compact_metadata = 4 [default = false];
inline bool StmtExecute::_internal_has_compact_metadata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StmtExecute::has_compact_metadata() const {
  return _internal_has_compact_metadata();
}
inline void StmtExecute::clear_compact_metadata() {
  compact_metadata_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool StmtExecute::_internal_compact_metadata() const {
  return compact_metadata_;
}
inline bool StmtExecute::compact_metadata() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.compact_metadata)
  return _internal_compact_metadata();
}
inline void StmtExecute::_internal_set_compact_metadata(bool value) {
  _has_bits_[0] |= 0x00000004u;
  compact_metadata_ = value;
}
inline void StmtExecute::set_compact_metadata(bool value) {
  _internal_set_compact_metadata(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.compact_metadata)
}

// -------------------------------------------------------------------

// StmtExecuteOk

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sql
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fsql_2eproto
