// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_prepare.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fprepare_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fprepare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "mysqlx_sql.pb.h"
#include "mysqlx_crud.pb.h"
#include "mysqlx_datatypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysqlx_5fprepare_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysqlx_5fprepare_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Mysqlx {
namespace Prepare {
class Deallocate;
class DeallocateDefaultTypeInternal;
extern DeallocateDefaultTypeInternal _Deallocate_default_instance_;
class Execute;
class ExecuteDefaultTypeInternal;
extern ExecuteDefaultTypeInternal _Execute_default_instance_;
class Prepare;
class PrepareDefaultTypeInternal;
extern PrepareDefaultTypeInternal _Prepare_default_instance_;
class Prepare_OneOfMessage;
class Prepare_OneOfMessageDefaultTypeInternal;
extern Prepare_OneOfMessageDefaultTypeInternal _Prepare_OneOfMessage_default_instance_;
}  // namespace Prepare
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> ::Mysqlx::Prepare::Deallocate* Arena::CreateMaybeMessage<::Mysqlx::Prepare::Deallocate>(Arena*);
template<> ::Mysqlx::Prepare::Execute* Arena::CreateMaybeMessage<::Mysqlx::Prepare::Execute>(Arena*);
template<> ::Mysqlx::Prepare::Prepare* Arena::CreateMaybeMessage<::Mysqlx::Prepare::Prepare>(Arena*);
template<> ::Mysqlx::Prepare::Prepare_OneOfMessage* Arena::CreateMaybeMessage<::Mysqlx::Prepare::Prepare_OneOfMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mysqlx {
namespace Prepare {

enum Prepare_OneOfMessage_Type : int {
  Prepare_OneOfMessage_Type_FIND = 0,
  Prepare_OneOfMessage_Type_INSERT = 1,
  Prepare_OneOfMessage_Type_UPDATE = 2,
  Prepare_OneOfMessage_Type_DELETE = 4,
  Prepare_OneOfMessage_Type_STMT = 5
};
bool Prepare_OneOfMessage_Type_IsValid(int value);
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage_Type_Type_MIN = Prepare_OneOfMessage_Type_FIND;
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage_Type_Type_MAX = Prepare_OneOfMessage_Type_STMT;
constexpr int Prepare_OneOfMessage_Type_Type_ARRAYSIZE = Prepare_OneOfMessage_Type_Type_MAX + 1;

const std::string& Prepare_OneOfMessage_Type_Name(Prepare_OneOfMessage_Type value);
template<typename T>
inline const std::string& Prepare_OneOfMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Prepare_OneOfMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Prepare_OneOfMessage_Type_Name.");
  return Prepare_OneOfMessage_Type_Name(static_cast<Prepare_OneOfMessage_Type>(enum_t_value));
}
bool Prepare_OneOfMessage_Type_Parse(
    const std::string& name, Prepare_OneOfMessage_Type* value);
// ===================================================================

class Prepare_OneOfMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Prepare.Prepare.OneOfMessage) */ {
 public:
  Prepare_OneOfMessage();
  virtual ~Prepare_OneOfMessage();

  Prepare_OneOfMessage(const Prepare_OneOfMessage& from);
  Prepare_OneOfMessage(Prepare_OneOfMessage&& from) noexcept
    : Prepare_OneOfMessage() {
    *this = ::std::move(from);
  }

  inline Prepare_OneOfMessage& operator=(const Prepare_OneOfMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare_OneOfMessage& operator=(Prepare_OneOfMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Prepare_OneOfMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prepare_OneOfMessage* internal_default_instance() {
    return reinterpret_cast<const Prepare_OneOfMessage*>(
               &_Prepare_OneOfMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Prepare_OneOfMessage& a, Prepare_OneOfMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Prepare_OneOfMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prepare_OneOfMessage* New() const final {
    return CreateMaybeMessage<Prepare_OneOfMessage>(nullptr);
  }

  Prepare_OneOfMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prepare_OneOfMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Prepare_OneOfMessage& from);
  void MergeFrom(const Prepare_OneOfMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Prepare_OneOfMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Prepare.Prepare.OneOfMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Prepare_OneOfMessage_Type Type;
  static constexpr Type FIND =
    Prepare_OneOfMessage_Type_FIND;
  static constexpr Type INSERT =
    Prepare_OneOfMessage_Type_INSERT;
  static constexpr Type UPDATE =
    Prepare_OneOfMessage_Type_UPDATE;
  static constexpr Type DELETE =
    Prepare_OneOfMessage_Type_DELETE;
  static constexpr Type STMT =
    Prepare_OneOfMessage_Type_STMT;
  static inline bool Type_IsValid(int value) {
    return Prepare_OneOfMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Prepare_OneOfMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Prepare_OneOfMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Prepare_OneOfMessage_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Prepare_OneOfMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Prepare_OneOfMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFindFieldNumber = 2,
    kInsertFieldNumber = 3,
    kUpdateFieldNumber = 4,
    kDeleteFieldNumber = 5,
    kStmtExecuteFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // optional .Mysqlx.Crud.Find find = 2;
  bool has_find() const;
  private:
  bool _internal_has_find() const;
  public:
  void clear_find();
  const ::Mysqlx::Crud::Find& find() const;
  ::Mysqlx::Crud::Find* release_find();
  ::Mysqlx::Crud::Find* mutable_find();
  void set_allocated_find(::Mysqlx::Crud::Find* find);
  private:
  const ::Mysqlx::Crud::Find& _internal_find() const;
  ::Mysqlx::Crud::Find* _internal_mutable_find();
  public:

  // optional .Mysqlx.Crud.Insert insert = 3;
  bool has_insert() const;
  private:
  bool _internal_has_insert() const;
  public:
  void clear_insert();
  const ::Mysqlx::Crud::Insert& insert() const;
  ::Mysqlx::Crud::Insert* release_insert();
  ::Mysqlx::Crud::Insert* mutable_insert();
  void set_allocated_insert(::Mysqlx::Crud::Insert* insert);
  private:
  const ::Mysqlx::Crud::Insert& _internal_insert() const;
  ::Mysqlx::Crud::Insert* _internal_mutable_insert();
  public:

  // optional .Mysqlx.Crud.Update update = 4;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::Mysqlx::Crud::Update& update() const;
  ::Mysqlx::Crud::Update* release_update();
  ::Mysqlx::Crud::Update* mutable_update();
  void set_allocated_update(::Mysqlx::Crud::Update* update);
  private:
  const ::Mysqlx::Crud::Update& _internal_update() const;
  ::Mysqlx::Crud::Update* _internal_mutable_update();
  public:

  // optional .Mysqlx.Crud.Delete delete = 5;
  bool has_delete_() const;
  private:
  bool _internal_has_delete_() const;
  public:
  void clear_delete_();
  const ::Mysqlx::Crud::Delete& delete_() const;
  ::Mysqlx::Crud::Delete* release_delete_();
  ::Mysqlx::Crud::Delete* mutable_delete_();
  void set_allocated_delete_(::Mysqlx::Crud::Delete* delete_);
  private:
  const ::Mysqlx::Crud::Delete& _internal_delete_() const;
  ::Mysqlx::Crud::Delete* _internal_mutable_delete_();
  public:

  // optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
  bool has_stmt_execute() const;
  private:
  bool _internal_has_stmt_execute() const;
  public:
  void clear_stmt_execute();
  const ::Mysqlx::Sql::StmtExecute& stmt_execute() const;
  ::Mysqlx::Sql::StmtExecute* release_stmt_execute();
  ::Mysqlx::Sql::StmtExecute* mutable_stmt_execute();
  void set_allocated_stmt_execute(::Mysqlx::Sql::StmtExecute* stmt_execute);
  private:
  const ::Mysqlx::Sql::StmtExecute& _internal_stmt_execute() const;
  ::Mysqlx::Sql::StmtExecute* _internal_mutable_stmt_execute();
  public:

  // required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Mysqlx::Prepare::Prepare_OneOfMessage_Type type() const;
  void set_type(::Mysqlx::Prepare::Prepare_OneOfMessage_Type value);
  private:
  ::Mysqlx::Prepare::Prepare_OneOfMessage_Type _internal_type() const;
  void _internal_set_type(::Mysqlx::Prepare::Prepare_OneOfMessage_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Prepare.Prepare.OneOfMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Mysqlx::Crud::Find* find_;
  ::Mysqlx::Crud::Insert* insert_;
  ::Mysqlx::Crud::Update* update_;
  ::Mysqlx::Crud::Delete* delete__;
  ::Mysqlx::Sql::StmtExecute* stmt_execute_;
  int type_;
  friend struct ::TableStruct_mysqlx_5fprepare_2eproto;
};
// -------------------------------------------------------------------

class Prepare :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Prepare.Prepare) */ {
 public:
  Prepare();
  virtual ~Prepare();

  Prepare(const Prepare& from);
  Prepare(Prepare&& from) noexcept
    : Prepare() {
    *this = ::std::move(from);
  }

  inline Prepare& operator=(const Prepare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare& operator=(Prepare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Prepare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prepare* internal_default_instance() {
    return reinterpret_cast<const Prepare*>(
               &_Prepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Prepare& a, Prepare& b) {
    a.Swap(&b);
  }
  inline void Swap(Prepare* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prepare* New() const final {
    return CreateMaybeMessage<Prepare>(nullptr);
  }

  Prepare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prepare>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Prepare& from);
  void MergeFrom(const Prepare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Prepare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Prepare.Prepare";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Prepare_OneOfMessage OneOfMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kStmtFieldNumber = 2,
    kStmtIdFieldNumber = 1,
  };
  // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
  bool has_stmt() const;
  private:
  bool _internal_has_stmt() const;
  public:
  void clear_stmt();
  const ::Mysqlx::Prepare::Prepare_OneOfMessage& stmt() const;
  ::Mysqlx::Prepare::Prepare_OneOfMessage* release_stmt();
  ::Mysqlx::Prepare::Prepare_OneOfMessage* mutable_stmt();
  void set_allocated_stmt(::Mysqlx::Prepare::Prepare_OneOfMessage* stmt);
  private:
  const ::Mysqlx::Prepare::Prepare_OneOfMessage& _internal_stmt() const;
  ::Mysqlx::Prepare::Prepare_OneOfMessage* _internal_mutable_stmt();
  public:

  // required uint32 stmt_id = 1;
  bool has_stmt_id() const;
  private:
  bool _internal_has_stmt_id() const;
  public:
  void clear_stmt_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stmt_id() const;
  void set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stmt_id() const;
  void _internal_set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Prepare.Prepare)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Mysqlx::Prepare::Prepare_OneOfMessage* stmt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stmt_id_;
  friend struct ::TableStruct_mysqlx_5fprepare_2eproto;
};
// -------------------------------------------------------------------

class Execute :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Prepare.Execute) */ {
 public:
  Execute();
  virtual ~Execute();

  Execute(const Execute& from);
  Execute(Execute&& from) noexcept
    : Execute() {
    *this = ::std::move(from);
  }

  inline Execute& operator=(const Execute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Execute& operator=(Execute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Execute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Execute* internal_default_instance() {
    return reinterpret_cast<const Execute*>(
               &_Execute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Execute& a, Execute& b) {
    a.Swap(&b);
  }
  inline void Swap(Execute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Execute* New() const final {
    return CreateMaybeMessage<Execute>(nullptr);
  }

  Execute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Execute>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Execute& from);
  void MergeFrom(const Execute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Execute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Prepare.Execute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kStmtIdFieldNumber = 1,
    kCompactMetadataFieldNumber = 3,
  };
  // repeated .Mysqlx.Datatypes.Any args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::Mysqlx::Datatypes::Any* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
      mutable_args();
  private:
  const ::Mysqlx::Datatypes::Any& _internal_args(int index) const;
  ::Mysqlx::Datatypes::Any* _internal_add_args();
  public:
  const ::Mysqlx::Datatypes::Any& args(int index) const;
  ::Mysqlx::Datatypes::Any* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
      args() const;

  // required uint32 stmt_id = 1;
  bool has_stmt_id() const;
  private:
  bool _internal_has_stmt_id() const;
  public:
  void clear_stmt_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stmt_id() const;
  void set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stmt_id() const;
  void _internal_set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool compact_metadata = 3 [default = false];
  bool has_compact_metadata() const;
  private:
  bool _internal_has_compact_metadata() const;
  public:
  void clear_compact_metadata();
  bool compact_metadata() const;
  void set_compact_metadata(bool value);
  private:
  bool _internal_compact_metadata() const;
  void _internal_set_compact_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Prepare.Execute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any > args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stmt_id_;
  bool compact_metadata_;
  friend struct ::TableStruct_mysqlx_5fprepare_2eproto;
};
// -------------------------------------------------------------------

class Deallocate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Prepare.Deallocate) */ {
 public:
  Deallocate();
  virtual ~Deallocate();

  Deallocate(const Deallocate& from);
  Deallocate(Deallocate&& from) noexcept
    : Deallocate() {
    *this = ::std::move(from);
  }

  inline Deallocate& operator=(const Deallocate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deallocate& operator=(Deallocate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Deallocate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deallocate* internal_default_instance() {
    return reinterpret_cast<const Deallocate*>(
               &_Deallocate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Deallocate& a, Deallocate& b) {
    a.Swap(&b);
  }
  inline void Swap(Deallocate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deallocate* New() const final {
    return CreateMaybeMessage<Deallocate>(nullptr);
  }

  Deallocate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deallocate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Deallocate& from);
  void MergeFrom(const Deallocate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Deallocate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Prepare.Deallocate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStmtIdFieldNumber = 1,
  };
  // required uint32 stmt_id = 1;
  bool has_stmt_id() const;
  private:
  bool _internal_has_stmt_id() const;
  public:
  void clear_stmt_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stmt_id() const;
  void set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stmt_id() const;
  void _internal_set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Prepare.Deallocate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stmt_id_;
  friend struct ::TableStruct_mysqlx_5fprepare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Prepare_OneOfMessage

// required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
inline bool Prepare_OneOfMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Prepare_OneOfMessage::has_type() const {
  return _internal_has_type();
}
inline void Prepare_OneOfMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::Mysqlx::Prepare::Prepare_OneOfMessage_Type Prepare_OneOfMessage::_internal_type() const {
  return static_cast< ::Mysqlx::Prepare::Prepare_OneOfMessage_Type >(type_);
}
inline ::Mysqlx::Prepare::Prepare_OneOfMessage_Type Prepare_OneOfMessage::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Prepare.OneOfMessage.type)
  return _internal_type();
}
inline void Prepare_OneOfMessage::_internal_set_type(::Mysqlx::Prepare::Prepare_OneOfMessage_Type value) {
  assert(::Mysqlx::Prepare::Prepare_OneOfMessage_Type_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void Prepare_OneOfMessage::set_type(::Mysqlx::Prepare::Prepare_OneOfMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Prepare.Prepare.OneOfMessage.type)
}

// optional .Mysqlx.Crud.Find find = 2;
inline bool Prepare_OneOfMessage::_internal_has_find() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || find_ != nullptr);
  return value;
}
inline bool Prepare_OneOfMessage::has_find() const {
  return _internal_has_find();
}
inline const ::Mysqlx::Crud::Find& Prepare_OneOfMessage::_internal_find() const {
  const ::Mysqlx::Crud::Find* p = find_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Crud::Find*>(
      &::Mysqlx::Crud::_Find_default_instance_);
}
inline const ::Mysqlx::Crud::Find& Prepare_OneOfMessage::find() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Prepare.OneOfMessage.find)
  return _internal_find();
}
inline ::Mysqlx::Crud::Find* Prepare_OneOfMessage::release_find() {
  // @@protoc_insertion_point(field_release:Mysqlx.Prepare.Prepare.OneOfMessage.find)
  _has_bits_[0] &= ~0x00000001u;
  ::Mysqlx::Crud::Find* temp = find_;
  find_ = nullptr;
  return temp;
}
inline ::Mysqlx::Crud::Find* Prepare_OneOfMessage::_internal_mutable_find() {
  _has_bits_[0] |= 0x00000001u;
  if (find_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Crud::Find>(GetArenaNoVirtual());
    find_ = p;
  }
  return find_;
}
inline ::Mysqlx::Crud::Find* Prepare_OneOfMessage::mutable_find() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Prepare.Prepare.OneOfMessage.find)
  return _internal_mutable_find();
}
inline void Prepare_OneOfMessage::set_allocated_find(::Mysqlx::Crud::Find* find) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(find_);
  }
  if (find) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      find = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, find, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  find_ = find;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Prepare.Prepare.OneOfMessage.find)
}

// optional .Mysqlx.Crud.Insert insert = 3;
inline bool Prepare_OneOfMessage::_internal_has_insert() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || insert_ != nullptr);
  return value;
}
inline bool Prepare_OneOfMessage::has_insert() const {
  return _internal_has_insert();
}
inline const ::Mysqlx::Crud::Insert& Prepare_OneOfMessage::_internal_insert() const {
  const ::Mysqlx::Crud::Insert* p = insert_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Crud::Insert*>(
      &::Mysqlx::Crud::_Insert_default_instance_);
}
inline const ::Mysqlx::Crud::Insert& Prepare_OneOfMessage::insert() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Prepare.OneOfMessage.insert)
  return _internal_insert();
}
inline ::Mysqlx::Crud::Insert* Prepare_OneOfMessage::release_insert() {
  // @@protoc_insertion_point(field_release:Mysqlx.Prepare.Prepare.OneOfMessage.insert)
  _has_bits_[0] &= ~0x00000002u;
  ::Mysqlx::Crud::Insert* temp = insert_;
  insert_ = nullptr;
  return temp;
}
inline ::Mysqlx::Crud::Insert* Prepare_OneOfMessage::_internal_mutable_insert() {
  _has_bits_[0] |= 0x00000002u;
  if (insert_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Crud::Insert>(GetArenaNoVirtual());
    insert_ = p;
  }
  return insert_;
}
inline ::Mysqlx::Crud::Insert* Prepare_OneOfMessage::mutable_insert() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Prepare.Prepare.OneOfMessage.insert)
  return _internal_mutable_insert();
}
inline void Prepare_OneOfMessage::set_allocated_insert(::Mysqlx::Crud::Insert* insert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_);
  }
  if (insert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      insert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  insert_ = insert;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Prepare.Prepare.OneOfMessage.insert)
}

// optional .Mysqlx.Crud.Update update = 4;
inline bool Prepare_OneOfMessage::_internal_has_update() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || update_ != nullptr);
  return value;
}
inline bool Prepare_OneOfMessage::has_update() const {
  return _internal_has_update();
}
inline const ::Mysqlx::Crud::Update& Prepare_OneOfMessage::_internal_update() const {
  const ::Mysqlx::Crud::Update* p = update_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Crud::Update*>(
      &::Mysqlx::Crud::_Update_default_instance_);
}
inline const ::Mysqlx::Crud::Update& Prepare_OneOfMessage::update() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Prepare.OneOfMessage.update)
  return _internal_update();
}
inline ::Mysqlx::Crud::Update* Prepare_OneOfMessage::release_update() {
  // @@protoc_insertion_point(field_release:Mysqlx.Prepare.Prepare.OneOfMessage.update)
  _has_bits_[0] &= ~0x00000004u;
  ::Mysqlx::Crud::Update* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::Mysqlx::Crud::Update* Prepare_OneOfMessage::_internal_mutable_update() {
  _has_bits_[0] |= 0x00000004u;
  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Crud::Update>(GetArenaNoVirtual());
    update_ = p;
  }
  return update_;
}
inline ::Mysqlx::Crud::Update* Prepare_OneOfMessage::mutable_update() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Prepare.Prepare.OneOfMessage.update)
  return _internal_mutable_update();
}
inline void Prepare_OneOfMessage::set_allocated_update(::Mysqlx::Crud::Update* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_);
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Prepare.Prepare.OneOfMessage.update)
}

// optional .Mysqlx.Crud.Delete delete = 5;
inline bool Prepare_OneOfMessage::_internal_has_delete_() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || delete__ != nullptr);
  return value;
}
inline bool Prepare_OneOfMessage::has_delete_() const {
  return _internal_has_delete_();
}
inline const ::Mysqlx::Crud::Delete& Prepare_OneOfMessage::_internal_delete_() const {
  const ::Mysqlx::Crud::Delete* p = delete__;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Crud::Delete*>(
      &::Mysqlx::Crud::_Delete_default_instance_);
}
inline const ::Mysqlx::Crud::Delete& Prepare_OneOfMessage::delete_() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Prepare.OneOfMessage.delete)
  return _internal_delete_();
}
inline ::Mysqlx::Crud::Delete* Prepare_OneOfMessage::release_delete_() {
  // @@protoc_insertion_point(field_release:Mysqlx.Prepare.Prepare.OneOfMessage.delete)
  _has_bits_[0] &= ~0x00000008u;
  ::Mysqlx::Crud::Delete* temp = delete__;
  delete__ = nullptr;
  return temp;
}
inline ::Mysqlx::Crud::Delete* Prepare_OneOfMessage::_internal_mutable_delete_() {
  _has_bits_[0] |= 0x00000008u;
  if (delete__ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Crud::Delete>(GetArenaNoVirtual());
    delete__ = p;
  }
  return delete__;
}
inline ::Mysqlx::Crud::Delete* Prepare_OneOfMessage::mutable_delete_() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Prepare.Prepare.OneOfMessage.delete)
  return _internal_mutable_delete_();
}
inline void Prepare_OneOfMessage::set_allocated_delete_(::Mysqlx::Crud::Delete* delete_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete__);
  }
  if (delete_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delete_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  delete__ = delete_;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Prepare.Prepare.OneOfMessage.delete)
}

// optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
inline bool Prepare_OneOfMessage::_internal_has_stmt_execute() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || stmt_execute_ != nullptr);
  return value;
}
inline bool Prepare_OneOfMessage::has_stmt_execute() const {
  return _internal_has_stmt_execute();
}
inline const ::Mysqlx::Sql::StmtExecute& Prepare_OneOfMessage::_internal_stmt_execute() const {
  const ::Mysqlx::Sql::StmtExecute* p = stmt_execute_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Sql::StmtExecute*>(
      &::Mysqlx::Sql::_StmtExecute_default_instance_);
}
inline const ::Mysqlx::Sql::StmtExecute& Prepare_OneOfMessage::stmt_execute() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Prepare.OneOfMessage.stmt_execute)
  return _internal_stmt_execute();
}
inline ::Mysqlx::Sql::StmtExecute* Prepare_OneOfMessage::release_stmt_execute() {
  // @@protoc_insertion_point(field_release:Mysqlx.Prepare.Prepare.OneOfMessage.stmt_execute)
  _has_bits_[0] &= ~0x00000010u;
  ::Mysqlx::Sql::StmtExecute* temp = stmt_execute_;
  stmt_execute_ = nullptr;
  return temp;
}
inline ::Mysqlx::Sql::StmtExecute* Prepare_OneOfMessage::_internal_mutable_stmt_execute() {
  _has_bits_[0] |= 0x00000010u;
  if (stmt_execute_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Sql::StmtExecute>(GetArenaNoVirtual());
    stmt_execute_ = p;
  }
  return stmt_execute_;
}
inline ::Mysqlx::Sql::StmtExecute* Prepare_OneOfMessage::mutable_stmt_execute() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Prepare.Prepare.OneOfMessage.stmt_execute)
  return _internal_mutable_stmt_execute();
}
inline void Prepare_OneOfMessage::set_allocated_stmt_execute(::Mysqlx::Sql::StmtExecute* stmt_execute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stmt_execute_);
  }
  if (stmt_execute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stmt_execute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stmt_execute, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  stmt_execute_ = stmt_execute;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Prepare.Prepare.OneOfMessage.stmt_execute)
}

// -------------------------------------------------------------------

// Prepare

// required uint32 stmt_id = 1;
inline bool Prepare::_internal_has_stmt_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Prepare::has_stmt_id() const {
  return _internal_has_stmt_id();
}
inline void Prepare::clear_stmt_id() {
  stmt_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prepare::_internal_stmt_id() const {
  return stmt_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prepare::stmt_id() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Prepare.stmt_id)
  return _internal_stmt_id();
}
inline void Prepare::_internal_set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stmt_id_ = value;
}
inline void Prepare::set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stmt_id(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Prepare.Prepare.stmt_id)
}

// required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
inline bool Prepare::_internal_has_stmt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stmt_ != nullptr);
  return value;
}
inline bool Prepare::has_stmt() const {
  return _internal_has_stmt();
}
inline void Prepare::clear_stmt() {
  if (stmt_ != nullptr) stmt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Mysqlx::Prepare::Prepare_OneOfMessage& Prepare::_internal_stmt() const {
  const ::Mysqlx::Prepare::Prepare_OneOfMessage* p = stmt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Prepare::Prepare_OneOfMessage*>(
      &::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_);
}
inline const ::Mysqlx::Prepare::Prepare_OneOfMessage& Prepare::stmt() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Prepare.stmt)
  return _internal_stmt();
}
inline ::Mysqlx::Prepare::Prepare_OneOfMessage* Prepare::release_stmt() {
  // @@protoc_insertion_point(field_release:Mysqlx.Prepare.Prepare.stmt)
  _has_bits_[0] &= ~0x00000001u;
  ::Mysqlx::Prepare::Prepare_OneOfMessage* temp = stmt_;
  stmt_ = nullptr;
  return temp;
}
inline ::Mysqlx::Prepare::Prepare_OneOfMessage* Prepare::_internal_mutable_stmt() {
  _has_bits_[0] |= 0x00000001u;
  if (stmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Prepare::Prepare_OneOfMessage>(GetArenaNoVirtual());
    stmt_ = p;
  }
  return stmt_;
}
inline ::Mysqlx::Prepare::Prepare_OneOfMessage* Prepare::mutable_stmt() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Prepare.Prepare.stmt)
  return _internal_mutable_stmt();
}
inline void Prepare::set_allocated_stmt(::Mysqlx::Prepare::Prepare_OneOfMessage* stmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stmt_;
  }
  if (stmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stmt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stmt_ = stmt;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Prepare.Prepare.stmt)
}

// -------------------------------------------------------------------

// Execute

// required uint32 stmt_id = 1;
inline bool Execute::_internal_has_stmt_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Execute::has_stmt_id() const {
  return _internal_has_stmt_id();
}
inline void Execute::clear_stmt_id() {
  stmt_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execute::_internal_stmt_id() const {
  return stmt_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execute::stmt_id() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Execute.stmt_id)
  return _internal_stmt_id();
}
inline void Execute::_internal_set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  stmt_id_ = value;
}
inline void Execute::set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stmt_id(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Prepare.Execute.stmt_id)
}

// repeated .Mysqlx.Datatypes.Any args = 2;
inline int Execute::_internal_args_size() const {
  return args_.size();
}
inline int Execute::args_size() const {
  return _internal_args_size();
}
inline ::Mysqlx::Datatypes::Any* Execute::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Prepare.Execute.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
Execute::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Prepare.Execute.args)
  return &args_;
}
inline const ::Mysqlx::Datatypes::Any& Execute::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::Mysqlx::Datatypes::Any& Execute::args(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Execute.args)
  return _internal_args(index);
}
inline ::Mysqlx::Datatypes::Any* Execute::_internal_add_args() {
  return args_.Add();
}
inline ::Mysqlx::Datatypes::Any* Execute::add_args() {
  // @@protoc_insertion_point(field_add:Mysqlx.Prepare.Execute.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
Execute::args() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Prepare.Execute.args)
  return args_;
}

// optional bool compact_metadata = 3 [default = false];
inline bool Execute::_internal_has_compact_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Execute::has_compact_metadata() const {
  return _internal_has_compact_metadata();
}
inline void Execute::clear_compact_metadata() {
  compact_metadata_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Execute::_internal_compact_metadata() const {
  return compact_metadata_;
}
inline bool Execute::compact_metadata() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Execute.compact_metadata)
  return _internal_compact_metadata();
}
inline void Execute::_internal_set_compact_metadata(bool value) {
  _has_bits_[0] |= 0x00000002u;
  compact_metadata_ = value;
}
inline void Execute::set_compact_metadata(bool value) {
  _internal_set_compact_metadata(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Prepare.Execute.compact_metadata)
}

// -------------------------------------------------------------------

// Deallocate

// required uint32 stmt_id = 1;
inline bool Deallocate::_internal_has_stmt_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Deallocate::has_stmt_id() const {
  return _internal_has_stmt_id();
}
inline void Deallocate::clear_stmt_id() {
  stmt_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Deallocate::_internal_stmt_id() const {
  return stmt_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Deallocate::stmt_id() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Prepare.Deallocate.stmt_id)
  return _internal_stmt_id();
}
inline void Deallocate::_internal_set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  stmt_id_ = value;
}
inline void Deallocate::set_stmt_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stmt_id(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Prepare.Deallocate.stmt_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Prepare
}  // namespace Mysqlx

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Mysqlx::Prepare::Prepare_OneOfMessage_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fprepare_2eproto
