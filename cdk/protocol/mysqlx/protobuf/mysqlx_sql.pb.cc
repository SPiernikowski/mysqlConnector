// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_sql.proto

#include "mysqlx_sql.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fdatatypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Any_mysqlx_5fdatatypes_2eproto;
namespace Mysqlx {
namespace Sql {
class StmtExecuteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StmtExecute> _instance;
} _StmtExecute_default_instance_;
class StmtExecuteOkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StmtExecuteOk> _instance;
} _StmtExecuteOk_default_instance_;
}  // namespace Sql
}  // namespace Mysqlx
static void InitDefaultsscc_info_StmtExecute_mysqlx_5fsql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.DefaultConstruct();
  *::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get_mutable() = std::string("sql", 3);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get_mutable());
  {
    void* ptr = &::Mysqlx::Sql::_StmtExecute_default_instance_;
    new (ptr) ::Mysqlx::Sql::StmtExecute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Sql::StmtExecute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StmtExecute_mysqlx_5fsql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StmtExecute_mysqlx_5fsql_2eproto}, {
      &scc_info_Any_mysqlx_5fdatatypes_2eproto.base,}};

static void InitDefaultsscc_info_StmtExecuteOk_mysqlx_5fsql_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Sql::_StmtExecuteOk_default_instance_;
    new (ptr) ::Mysqlx::Sql::StmtExecuteOk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Sql::StmtExecuteOk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StmtExecuteOk_mysqlx_5fsql_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StmtExecuteOk_mysqlx_5fsql_2eproto}, {}};

namespace Mysqlx {
namespace Sql {

// ===================================================================

void StmtExecute::InitAsDefaultInstance() {
}
class StmtExecute::_Internal {
 public:
  using HasBits = decltype(std::declval<StmtExecute>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stmt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compact_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StmtExecute::_i_give_permission_to_break_this_code_default_namespace__;
void StmtExecute::clear_args() {
  args_.Clear();
}
StmtExecute::StmtExecute()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Sql.StmtExecute)
}
StmtExecute::StmtExecute(const StmtExecute& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stmt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stmt()) {
    stmt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stmt_);
  }
  namespace__.UnsafeSetDefault(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
  if (from._internal_has_namespace_()) {
    namespace__.AssignWithDefault(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), from.namespace__);
  }
  compact_metadata_ = from.compact_metadata_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Sql.StmtExecute)
}

void StmtExecute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StmtExecute_mysqlx_5fsql_2eproto.base);
  stmt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
  compact_metadata_ = false;
}

StmtExecute::~StmtExecute() {
  // @@protoc_insertion_point(destructor:Mysqlx.Sql.StmtExecute)
  SharedDtor();
}

void StmtExecute::SharedDtor() {
  stmt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
}

void StmtExecute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StmtExecute& StmtExecute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StmtExecute_mysqlx_5fsql_2eproto.base);
  return *internal_default_instance();
}


void StmtExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Sql.StmtExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stmt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.UnsafeMutablePointer()->assign(*&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
    }
  }
  compact_metadata_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StmtExecute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes stmt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stmt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Mysqlx.Datatypes.Any args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string namespace = 3 [default = "sql"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compact_metadata = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_compact_metadata(&has_bits);
          compact_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StmtExecute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Sql.StmtExecute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes stmt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_stmt(), target);
  }

  // repeated .Mysqlx.Datatypes.Any args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // optional string namespace = 3 [default = "sql"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // optional bool compact_metadata = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_compact_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Sql.StmtExecute)
  return target;
}

size_t StmtExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Sql.StmtExecute)
  size_t total_size = 0;

  // required bytes stmt = 1;
  if (_internal_has_stmt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stmt());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Any args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string namespace = 3 [default = "sql"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional bool compact_metadata = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StmtExecute::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StmtExecute*>(
      &from));
}

void StmtExecute::MergeFrom(const StmtExecute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Sql.StmtExecute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      stmt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stmt_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      namespace__.AssignWithDefault(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), from.namespace__);
    }
    if (cached_has_bits & 0x00000004u) {
      compact_metadata_ = from.compact_metadata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StmtExecute::CopyFrom(const StmtExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Sql.StmtExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmtExecute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_)) return false;
  return true;
}

void StmtExecute::InternalSwap(StmtExecute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  stmt_.Swap(&other->stmt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  namespace__.Swap(&other->namespace__, &::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(),
    GetArenaNoVirtual());
  swap(compact_metadata_, other->compact_metadata_);
}

std::string StmtExecute::GetTypeName() const {
  return "Mysqlx.Sql.StmtExecute";
}


// ===================================================================

void StmtExecuteOk::InitAsDefaultInstance() {
}
class StmtExecuteOk::_Internal {
 public:
  using HasBits = decltype(std::declval<StmtExecuteOk>()._has_bits_);
};

StmtExecuteOk::StmtExecuteOk()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Sql.StmtExecuteOk)
}
StmtExecuteOk::StmtExecuteOk(const StmtExecuteOk& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Sql.StmtExecuteOk)
}

void StmtExecuteOk::SharedCtor() {
}

StmtExecuteOk::~StmtExecuteOk() {
  // @@protoc_insertion_point(destructor:Mysqlx.Sql.StmtExecuteOk)
  SharedDtor();
}

void StmtExecuteOk::SharedDtor() {
}

void StmtExecuteOk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StmtExecuteOk& StmtExecuteOk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StmtExecuteOk_mysqlx_5fsql_2eproto.base);
  return *internal_default_instance();
}


void StmtExecuteOk::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Sql.StmtExecuteOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StmtExecuteOk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StmtExecuteOk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Sql.StmtExecuteOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Sql.StmtExecuteOk)
  return target;
}

size_t StmtExecuteOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Sql.StmtExecuteOk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StmtExecuteOk::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StmtExecuteOk*>(
      &from));
}

void StmtExecuteOk::MergeFrom(const StmtExecuteOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Sql.StmtExecuteOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StmtExecuteOk::CopyFrom(const StmtExecuteOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Sql.StmtExecuteOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmtExecuteOk::IsInitialized() const {
  return true;
}

void StmtExecuteOk::InternalSwap(StmtExecuteOk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string StmtExecuteOk::GetTypeName() const {
  return "Mysqlx.Sql.StmtExecuteOk";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Sql
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mysqlx::Sql::StmtExecute* Arena::CreateMaybeMessage< ::Mysqlx::Sql::StmtExecute >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Sql::StmtExecute >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Sql::StmtExecuteOk* Arena::CreateMaybeMessage< ::Mysqlx::Sql::StmtExecuteOk >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Sql::StmtExecuteOk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
