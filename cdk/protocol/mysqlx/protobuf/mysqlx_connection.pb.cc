// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_connection.proto

#include "mysqlx_connection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fconnection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Capabilities_mysqlx_5fconnection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fconnection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Capability_mysqlx_5fconnection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fdatatypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Any_mysqlx_5fdatatypes_2eproto;
namespace Mysqlx {
namespace Connection {
class CapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capability> _instance;
} _Capability_default_instance_;
class CapabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capabilities> _instance;
} _Capabilities_default_instance_;
class CapabilitiesGetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapabilitiesGet> _instance;
} _CapabilitiesGet_default_instance_;
class CapabilitiesSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CapabilitiesSet> _instance;
} _CapabilitiesSet_default_instance_;
class CloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Close> _instance;
} _Close_default_instance_;
class CompressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Compression> _instance;
} _Compression_default_instance_;
}  // namespace Connection
}  // namespace Mysqlx
static void InitDefaultsscc_info_Capabilities_mysqlx_5fconnection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Connection::_Capabilities_default_instance_;
    new (ptr) ::Mysqlx::Connection::Capabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Connection::Capabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Capabilities_mysqlx_5fconnection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Capabilities_mysqlx_5fconnection_2eproto}, {
      &scc_info_Capability_mysqlx_5fconnection_2eproto.base,}};

static void InitDefaultsscc_info_CapabilitiesGet_mysqlx_5fconnection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Connection::_CapabilitiesGet_default_instance_;
    new (ptr) ::Mysqlx::Connection::CapabilitiesGet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Connection::CapabilitiesGet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CapabilitiesGet_mysqlx_5fconnection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CapabilitiesGet_mysqlx_5fconnection_2eproto}, {}};

static void InitDefaultsscc_info_CapabilitiesSet_mysqlx_5fconnection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Connection::_CapabilitiesSet_default_instance_;
    new (ptr) ::Mysqlx::Connection::CapabilitiesSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Connection::CapabilitiesSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CapabilitiesSet_mysqlx_5fconnection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CapabilitiesSet_mysqlx_5fconnection_2eproto}, {
      &scc_info_Capabilities_mysqlx_5fconnection_2eproto.base,}};

static void InitDefaultsscc_info_Capability_mysqlx_5fconnection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Connection::_Capability_default_instance_;
    new (ptr) ::Mysqlx::Connection::Capability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Connection::Capability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Capability_mysqlx_5fconnection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Capability_mysqlx_5fconnection_2eproto}, {
      &scc_info_Any_mysqlx_5fdatatypes_2eproto.base,}};

static void InitDefaultsscc_info_Close_mysqlx_5fconnection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Connection::_Close_default_instance_;
    new (ptr) ::Mysqlx::Connection::Close();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Connection::Close::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Close_mysqlx_5fconnection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Close_mysqlx_5fconnection_2eproto}, {}};

static void InitDefaultsscc_info_Compression_mysqlx_5fconnection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Connection::_Compression_default_instance_;
    new (ptr) ::Mysqlx::Connection::Compression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Connection::Compression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Compression_mysqlx_5fconnection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Compression_mysqlx_5fconnection_2eproto}, {}};

namespace Mysqlx {
namespace Connection {

// ===================================================================

void Capability::InitAsDefaultInstance() {
  ::Mysqlx::Connection::_Capability_default_instance_._instance.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Any*>(
      ::Mysqlx::Datatypes::Any::internal_default_instance());
}
class Capability::_Internal {
 public:
  using HasBits = decltype(std::declval<Capability>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Mysqlx::Datatypes::Any& value(const Capability* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Mysqlx::Datatypes::Any&
Capability::_Internal::value(const Capability* msg) {
  return *msg->value_;
}
void Capability::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Capability::Capability()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Capability)
}
Capability::Capability(const Capability& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_value()) {
    value_ = new ::Mysqlx::Datatypes::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Capability)
}

void Capability::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Capability_mysqlx_5fconnection_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Capability)
  SharedDtor();
}

void Capability::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Capability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capability& Capability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capability_mysqlx_5fconnection_2eproto.base);
  return *internal_default_instance();
}


void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Capability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Mysqlx.Datatypes.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Capability)
  return target;
}

size_t Capability::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Connection.Capability)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.Capability)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capability::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Capability*>(
      &from));
}

void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::Mysqlx::Datatypes::Any::MergeFrom(from._internal_value());
    }
  }
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void Capability::InternalSwap(Capability* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

std::string Capability::GetTypeName() const {
  return "Mysqlx.Connection.Capability";
}


// ===================================================================

void Capabilities::InitAsDefaultInstance() {
}
class Capabilities::_Internal {
 public:
  using HasBits = decltype(std::declval<Capabilities>()._has_bits_);
};

Capabilities::Capabilities()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Capabilities)
}
Capabilities::Capabilities(const Capabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Capabilities)
}

void Capabilities::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Capabilities_mysqlx_5fconnection_2eproto.base);
}

Capabilities::~Capabilities() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Capabilities)
  SharedDtor();
}

void Capabilities::SharedDtor() {
}

void Capabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capabilities& Capabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capabilities_mysqlx_5fconnection_2eproto.base);
  return *internal_default_instance();
}


void Capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.Capabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Capabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Mysqlx.Connection.Capability capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Capabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_capabilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Capabilities)
  return target;
}

size_t Capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.Capabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  total_size += 1UL * this->_internal_capabilities_size();
  for (const auto& msg : this->capabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capabilities::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Capabilities*>(
      &from));
}

void Capabilities::MergeFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
}

void Capabilities::CopyFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(capabilities_)) return false;
  return true;
}

void Capabilities::InternalSwap(Capabilities* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  capabilities_.InternalSwap(&other->capabilities_);
}

std::string Capabilities::GetTypeName() const {
  return "Mysqlx.Connection.Capabilities";
}


// ===================================================================

void CapabilitiesGet::InitAsDefaultInstance() {
}
class CapabilitiesGet::_Internal {
 public:
  using HasBits = decltype(std::declval<CapabilitiesGet>()._has_bits_);
};

CapabilitiesGet::CapabilitiesGet()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.CapabilitiesGet)
}
CapabilitiesGet::CapabilitiesGet(const CapabilitiesGet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.CapabilitiesGet)
}

void CapabilitiesGet::SharedCtor() {
}

CapabilitiesGet::~CapabilitiesGet() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.CapabilitiesGet)
  SharedDtor();
}

void CapabilitiesGet::SharedDtor() {
}

void CapabilitiesGet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapabilitiesGet& CapabilitiesGet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapabilitiesGet_mysqlx_5fconnection_2eproto.base);
  return *internal_default_instance();
}


void CapabilitiesGet::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.CapabilitiesGet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CapabilitiesGet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapabilitiesGet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.CapabilitiesGet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.CapabilitiesGet)
  return target;
}

size_t CapabilitiesGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.CapabilitiesGet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapabilitiesGet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CapabilitiesGet*>(
      &from));
}

void CapabilitiesGet::MergeFrom(const CapabilitiesGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.CapabilitiesGet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CapabilitiesGet::CopyFrom(const CapabilitiesGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.CapabilitiesGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesGet::IsInitialized() const {
  return true;
}

void CapabilitiesGet::InternalSwap(CapabilitiesGet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string CapabilitiesGet::GetTypeName() const {
  return "Mysqlx.Connection.CapabilitiesGet";
}


// ===================================================================

void CapabilitiesSet::InitAsDefaultInstance() {
  ::Mysqlx::Connection::_CapabilitiesSet_default_instance_._instance.get_mutable()->capabilities_ = const_cast< ::Mysqlx::Connection::Capabilities*>(
      ::Mysqlx::Connection::Capabilities::internal_default_instance());
}
class CapabilitiesSet::_Internal {
 public:
  using HasBits = decltype(std::declval<CapabilitiesSet>()._has_bits_);
  static const ::Mysqlx::Connection::Capabilities& capabilities(const CapabilitiesSet* msg);
  static void set_has_capabilities(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Mysqlx::Connection::Capabilities&
CapabilitiesSet::_Internal::capabilities(const CapabilitiesSet* msg) {
  return *msg->capabilities_;
}
CapabilitiesSet::CapabilitiesSet()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.CapabilitiesSet)
}
CapabilitiesSet::CapabilitiesSet(const CapabilitiesSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_capabilities()) {
    capabilities_ = new ::Mysqlx::Connection::Capabilities(*from.capabilities_);
  } else {
    capabilities_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.CapabilitiesSet)
}

void CapabilitiesSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CapabilitiesSet_mysqlx_5fconnection_2eproto.base);
  capabilities_ = nullptr;
}

CapabilitiesSet::~CapabilitiesSet() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.CapabilitiesSet)
  SharedDtor();
}

void CapabilitiesSet::SharedDtor() {
  if (this != internal_default_instance()) delete capabilities_;
}

void CapabilitiesSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CapabilitiesSet& CapabilitiesSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CapabilitiesSet_mysqlx_5fconnection_2eproto.base);
  return *internal_default_instance();
}


void CapabilitiesSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.CapabilitiesSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(capabilities_ != nullptr);
    capabilities_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CapabilitiesSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Mysqlx.Connection.Capabilities capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CapabilitiesSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.CapabilitiesSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::capabilities(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.CapabilitiesSet)
  return target;
}

size_t CapabilitiesSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.CapabilitiesSet)
  size_t total_size = 0;

  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  if (_internal_has_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capabilities_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CapabilitiesSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CapabilitiesSet*>(
      &from));
}

void CapabilitiesSet::MergeFrom(const CapabilitiesSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.CapabilitiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_capabilities()) {
    _internal_mutable_capabilities()->::Mysqlx::Connection::Capabilities::MergeFrom(from._internal_capabilities());
  }
}

void CapabilitiesSet::CopyFrom(const CapabilitiesSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.CapabilitiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_capabilities()) {
    if (!capabilities_->IsInitialized()) return false;
  }
  return true;
}

void CapabilitiesSet::InternalSwap(CapabilitiesSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(capabilities_, other->capabilities_);
}

std::string CapabilitiesSet::GetTypeName() const {
  return "Mysqlx.Connection.CapabilitiesSet";
}


// ===================================================================

void Close::InitAsDefaultInstance() {
}
class Close::_Internal {
 public:
  using HasBits = decltype(std::declval<Close>()._has_bits_);
};

Close::Close()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Close)
}
Close::Close(const Close& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Close)
}

void Close::SharedCtor() {
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Close)
  SharedDtor();
}

void Close::SharedDtor() {
}

void Close::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Close& Close::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Close_mysqlx_5fconnection_2eproto.base);
  return *internal_default_instance();
}


void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.Close)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Close::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Close::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Close)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.Close)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Close*>(
      &from));
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::InternalSwap(Close* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string Close::GetTypeName() const {
  return "Mysqlx.Connection.Close";
}


// ===================================================================

void Compression::InitAsDefaultInstance() {
}
class Compression::_Internal {
 public:
  using HasBits = decltype(std::declval<Compression>()._has_bits_);
  static void set_has_uncompressed_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Compression::Compression()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Connection.Compression)
}
Compression::Compression(const Compression& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&uncompressed_size_, &from.uncompressed_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_messages_) -
    reinterpret_cast<char*>(&uncompressed_size_)) + sizeof(client_messages_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Connection.Compression)
}

void Compression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Compression_mysqlx_5fconnection_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uncompressed_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_messages_) -
      reinterpret_cast<char*>(&uncompressed_size_)) + sizeof(server_messages_));
  client_messages_ = 1;
}

Compression::~Compression() {
  // @@protoc_insertion_point(destructor:Mysqlx.Connection.Compression)
  SharedDtor();
}

void Compression::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Compression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Compression& Compression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Compression_mysqlx_5fconnection_2eproto.base);
  return *internal_default_instance();
}


void Compression::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Connection.Compression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&uncompressed_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_messages_) -
        reinterpret_cast<char*>(&uncompressed_size_)) + sizeof(server_messages_));
    client_messages_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Compression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 uncompressed_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uncompressed_size(&has_bits);
          uncompressed_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.ServerMessages.Type server_messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::ServerMessages_Type_IsValid(val))) {
            _internal_set_server_messages(static_cast<::Mysqlx::ServerMessages_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.ClientMessages.Type client_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::ClientMessages_Type_IsValid(val))) {
            _internal_set_client_messages(static_cast<::Mysqlx::ClientMessages_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Compression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Connection.Compression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uncompressed_size = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uncompressed_size(), target);
  }

  // optional .Mysqlx.ServerMessages.Type server_messages = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_server_messages(), target);
  }

  // optional .Mysqlx.ClientMessages.Type client_messages = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_client_messages(), target);
  }

  // required bytes payload = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Connection.Compression)
  return target;
}

size_t Compression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Connection.Compression)
  size_t total_size = 0;

  // required bytes payload = 4;
  if (_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint64 uncompressed_size = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uncompressed_size());
    }

    // optional .Mysqlx.ServerMessages.Type server_messages = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_messages());
    }

    // optional .Mysqlx.ClientMessages.Type client_messages = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_messages());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Compression::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Compression*>(
      &from));
}

void Compression::MergeFrom(const Compression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Connection.Compression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      uncompressed_size_ = from.uncompressed_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_messages_ = from.server_messages_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_messages_ = from.client_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Compression::CopyFrom(const Compression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Connection.Compression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compression::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Compression::InternalSwap(Compression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uncompressed_size_, other->uncompressed_size_);
  swap(server_messages_, other->server_messages_);
  swap(client_messages_, other->client_messages_);
}

std::string Compression::GetTypeName() const {
  return "Mysqlx.Connection.Compression";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Connection
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mysqlx::Connection::Capability* Arena::CreateMaybeMessage< ::Mysqlx::Connection::Capability >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Connection::Capability >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Connection::Capabilities* Arena::CreateMaybeMessage< ::Mysqlx::Connection::Capabilities >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Connection::Capabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Connection::CapabilitiesGet* Arena::CreateMaybeMessage< ::Mysqlx::Connection::CapabilitiesGet >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Connection::CapabilitiesGet >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Connection::CapabilitiesSet* Arena::CreateMaybeMessage< ::Mysqlx::Connection::CapabilitiesSet >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Connection::CapabilitiesSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Connection::Close* Arena::CreateMaybeMessage< ::Mysqlx::Connection::Close >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Connection::Close >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Connection::Compression* Arena::CreateMaybeMessage< ::Mysqlx::Connection::Compression >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Connection::Compression >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
