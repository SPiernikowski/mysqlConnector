// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx.proto

#include "mysqlx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Mysqlx {
class ClientMessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessages> _instance;
} _ClientMessages_default_instance_;
class ServerMessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerMessages> _instance;
} _ServerMessages_default_instance_;
class OkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ok> _instance;
} _Ok_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
}  // namespace Mysqlx
static void InitDefaultsscc_info_ClientMessages_mysqlx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::_ClientMessages_default_instance_;
    new (ptr) ::Mysqlx::ClientMessages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::ClientMessages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessages_mysqlx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientMessages_mysqlx_2eproto}, {}};

static void InitDefaultsscc_info_Error_mysqlx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::_Error_default_instance_;
    new (ptr) ::Mysqlx::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Error::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_mysqlx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Error_mysqlx_2eproto}, {}};

static void InitDefaultsscc_info_Ok_mysqlx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::_Ok_default_instance_;
    new (ptr) ::Mysqlx::Ok();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Ok::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ok_mysqlx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ok_mysqlx_2eproto}, {}};

static void InitDefaultsscc_info_ServerMessages_mysqlx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::_ServerMessages_default_instance_;
    new (ptr) ::Mysqlx::ServerMessages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::ServerMessages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerMessages_mysqlx_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerMessages_mysqlx_2eproto}, {}};

namespace Mysqlx {
bool ClientMessages_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 12:
    case 17:
    case 18:
    case 19:
    case 20:
    case 24:
    case 25:
    case 30:
    case 31:
    case 32:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientMessages_Type_strings[24] = {};

static const char ClientMessages_Type_names[] =
  "COMPRESSION"
  "CON_CAPABILITIES_GET"
  "CON_CAPABILITIES_SET"
  "CON_CLOSE"
  "CRUD_CREATE_VIEW"
  "CRUD_DELETE"
  "CRUD_DROP_VIEW"
  "CRUD_FIND"
  "CRUD_INSERT"
  "CRUD_MODIFY_VIEW"
  "CRUD_UPDATE"
  "CURSOR_CLOSE"
  "CURSOR_FETCH"
  "CURSOR_OPEN"
  "EXPECT_CLOSE"
  "EXPECT_OPEN"
  "PREPARE_DEALLOCATE"
  "PREPARE_EXECUTE"
  "PREPARE_PREPARE"
  "SESS_AUTHENTICATE_CONTINUE"
  "SESS_AUTHENTICATE_START"
  "SESS_CLOSE"
  "SESS_RESET"
  "SQL_STMT_EXECUTE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientMessages_Type_entries[] = {
  { {ClientMessages_Type_names + 0, 11}, 46 },
  { {ClientMessages_Type_names + 11, 20}, 1 },
  { {ClientMessages_Type_names + 31, 20}, 2 },
  { {ClientMessages_Type_names + 51, 9}, 3 },
  { {ClientMessages_Type_names + 60, 16}, 30 },
  { {ClientMessages_Type_names + 76, 11}, 20 },
  { {ClientMessages_Type_names + 87, 14}, 32 },
  { {ClientMessages_Type_names + 101, 9}, 17 },
  { {ClientMessages_Type_names + 110, 11}, 18 },
  { {ClientMessages_Type_names + 121, 16}, 31 },
  { {ClientMessages_Type_names + 137, 11}, 19 },
  { {ClientMessages_Type_names + 148, 12}, 44 },
  { {ClientMessages_Type_names + 160, 12}, 45 },
  { {ClientMessages_Type_names + 172, 11}, 43 },
  { {ClientMessages_Type_names + 183, 12}, 25 },
  { {ClientMessages_Type_names + 195, 11}, 24 },
  { {ClientMessages_Type_names + 206, 18}, 42 },
  { {ClientMessages_Type_names + 224, 15}, 41 },
  { {ClientMessages_Type_names + 239, 15}, 40 },
  { {ClientMessages_Type_names + 254, 26}, 5 },
  { {ClientMessages_Type_names + 280, 23}, 4 },
  { {ClientMessages_Type_names + 303, 10}, 7 },
  { {ClientMessages_Type_names + 313, 10}, 6 },
  { {ClientMessages_Type_names + 323, 16}, 12 },
};

static const int ClientMessages_Type_entries_by_number[] = {
  1, // 1 -> CON_CAPABILITIES_GET
  2, // 2 -> CON_CAPABILITIES_SET
  3, // 3 -> CON_CLOSE
  20, // 4 -> SESS_AUTHENTICATE_START
  19, // 5 -> SESS_AUTHENTICATE_CONTINUE
  22, // 6 -> SESS_RESET
  21, // 7 -> SESS_CLOSE
  23, // 12 -> SQL_STMT_EXECUTE
  7, // 17 -> CRUD_FIND
  8, // 18 -> CRUD_INSERT
  10, // 19 -> CRUD_UPDATE
  5, // 20 -> CRUD_DELETE
  15, // 24 -> EXPECT_OPEN
  14, // 25 -> EXPECT_CLOSE
  4, // 30 -> CRUD_CREATE_VIEW
  9, // 31 -> CRUD_MODIFY_VIEW
  6, // 32 -> CRUD_DROP_VIEW
  18, // 40 -> PREPARE_PREPARE
  17, // 41 -> PREPARE_EXECUTE
  16, // 42 -> PREPARE_DEALLOCATE
  13, // 43 -> CURSOR_OPEN
  11, // 44 -> CURSOR_CLOSE
  12, // 45 -> CURSOR_FETCH
  0, // 46 -> COMPRESSION
};

const std::string& ClientMessages_Type_Name(
    ClientMessages_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientMessages_Type_entries,
          ClientMessages_Type_entries_by_number,
          24, ClientMessages_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientMessages_Type_entries,
      ClientMessages_Type_entries_by_number,
      24, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientMessages_Type_strings[idx].get();
}
bool ClientMessages_Type_Parse(
    const std::string& name, ClientMessages_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientMessages_Type_entries, 24, name, &int_value);
  if (success) {
    *value = static_cast<ClientMessages_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientMessages_Type ClientMessages::CON_CAPABILITIES_GET;
constexpr ClientMessages_Type ClientMessages::CON_CAPABILITIES_SET;
constexpr ClientMessages_Type ClientMessages::CON_CLOSE;
constexpr ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_START;
constexpr ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_CONTINUE;
constexpr ClientMessages_Type ClientMessages::SESS_RESET;
constexpr ClientMessages_Type ClientMessages::SESS_CLOSE;
constexpr ClientMessages_Type ClientMessages::SQL_STMT_EXECUTE;
constexpr ClientMessages_Type ClientMessages::CRUD_FIND;
constexpr ClientMessages_Type ClientMessages::CRUD_INSERT;
constexpr ClientMessages_Type ClientMessages::CRUD_UPDATE;
constexpr ClientMessages_Type ClientMessages::CRUD_DELETE;
constexpr ClientMessages_Type ClientMessages::EXPECT_OPEN;
constexpr ClientMessages_Type ClientMessages::EXPECT_CLOSE;
constexpr ClientMessages_Type ClientMessages::CRUD_CREATE_VIEW;
constexpr ClientMessages_Type ClientMessages::CRUD_MODIFY_VIEW;
constexpr ClientMessages_Type ClientMessages::CRUD_DROP_VIEW;
constexpr ClientMessages_Type ClientMessages::PREPARE_PREPARE;
constexpr ClientMessages_Type ClientMessages::PREPARE_EXECUTE;
constexpr ClientMessages_Type ClientMessages::PREPARE_DEALLOCATE;
constexpr ClientMessages_Type ClientMessages::CURSOR_OPEN;
constexpr ClientMessages_Type ClientMessages::CURSOR_CLOSE;
constexpr ClientMessages_Type ClientMessages::CURSOR_FETCH;
constexpr ClientMessages_Type ClientMessages::COMPRESSION;
constexpr ClientMessages_Type ClientMessages::Type_MIN;
constexpr ClientMessages_Type ClientMessages::Type_MAX;
constexpr int ClientMessages::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ServerMessages_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServerMessages_Type_strings[14] = {};

static const char ServerMessages_Type_names[] =
  "COMPRESSION"
  "CONN_CAPABILITIES"
  "ERROR"
  "NOTICE"
  "OK"
  "RESULTSET_COLUMN_META_DATA"
  "RESULTSET_FETCH_DONE"
  "RESULTSET_FETCH_DONE_MORE_OUT_PARAMS"
  "RESULTSET_FETCH_DONE_MORE_RESULTSETS"
  "RESULTSET_FETCH_SUSPENDED"
  "RESULTSET_ROW"
  "SESS_AUTHENTICATE_CONTINUE"
  "SESS_AUTHENTICATE_OK"
  "SQL_STMT_EXECUTE_OK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServerMessages_Type_entries[] = {
  { {ServerMessages_Type_names + 0, 11}, 19 },
  { {ServerMessages_Type_names + 11, 17}, 2 },
  { {ServerMessages_Type_names + 28, 5}, 1 },
  { {ServerMessages_Type_names + 33, 6}, 11 },
  { {ServerMessages_Type_names + 39, 2}, 0 },
  { {ServerMessages_Type_names + 41, 26}, 12 },
  { {ServerMessages_Type_names + 67, 20}, 14 },
  { {ServerMessages_Type_names + 87, 36}, 18 },
  { {ServerMessages_Type_names + 123, 36}, 16 },
  { {ServerMessages_Type_names + 159, 25}, 15 },
  { {ServerMessages_Type_names + 184, 13}, 13 },
  { {ServerMessages_Type_names + 197, 26}, 3 },
  { {ServerMessages_Type_names + 223, 20}, 4 },
  { {ServerMessages_Type_names + 243, 19}, 17 },
};

static const int ServerMessages_Type_entries_by_number[] = {
  4, // 0 -> OK
  2, // 1 -> ERROR
  1, // 2 -> CONN_CAPABILITIES
  11, // 3 -> SESS_AUTHENTICATE_CONTINUE
  12, // 4 -> SESS_AUTHENTICATE_OK
  3, // 11 -> NOTICE
  5, // 12 -> RESULTSET_COLUMN_META_DATA
  10, // 13 -> RESULTSET_ROW
  6, // 14 -> RESULTSET_FETCH_DONE
  9, // 15 -> RESULTSET_FETCH_SUSPENDED
  8, // 16 -> RESULTSET_FETCH_DONE_MORE_RESULTSETS
  13, // 17 -> SQL_STMT_EXECUTE_OK
  7, // 18 -> RESULTSET_FETCH_DONE_MORE_OUT_PARAMS
  0, // 19 -> COMPRESSION
};

const std::string& ServerMessages_Type_Name(
    ServerMessages_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServerMessages_Type_entries,
          ServerMessages_Type_entries_by_number,
          14, ServerMessages_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServerMessages_Type_entries,
      ServerMessages_Type_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServerMessages_Type_strings[idx].get();
}
bool ServerMessages_Type_Parse(
    const std::string& name, ServerMessages_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServerMessages_Type_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<ServerMessages_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerMessages_Type ServerMessages::OK;
constexpr ServerMessages_Type ServerMessages::ERROR;
constexpr ServerMessages_Type ServerMessages::CONN_CAPABILITIES;
constexpr ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_CONTINUE;
constexpr ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_OK;
constexpr ServerMessages_Type ServerMessages::NOTICE;
constexpr ServerMessages_Type ServerMessages::RESULTSET_COLUMN_META_DATA;
constexpr ServerMessages_Type ServerMessages::RESULTSET_ROW;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_SUSPENDED;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_RESULTSETS;
constexpr ServerMessages_Type ServerMessages::SQL_STMT_EXECUTE_OK;
constexpr ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
constexpr ServerMessages_Type ServerMessages::COMPRESSION;
constexpr ServerMessages_Type ServerMessages::Type_MIN;
constexpr ServerMessages_Type ServerMessages::Type_MAX;
constexpr int ServerMessages::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Error_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Error_Severity_strings[2] = {};

static const char Error_Severity_names[] =
  "ERROR"
  "FATAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Error_Severity_entries[] = {
  { {Error_Severity_names + 0, 5}, 0 },
  { {Error_Severity_names + 5, 5}, 1 },
};

static const int Error_Severity_entries_by_number[] = {
  0, // 0 -> ERROR
  1, // 1 -> FATAL
};

const std::string& Error_Severity_Name(
    Error_Severity value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Error_Severity_entries,
          Error_Severity_entries_by_number,
          2, Error_Severity_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Error_Severity_entries,
      Error_Severity_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Error_Severity_strings[idx].get();
}
bool Error_Severity_Parse(
    const std::string& name, Error_Severity* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Error_Severity_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Error_Severity>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_Severity Error::ERROR;
constexpr Error_Severity Error::FATAL;
constexpr Error_Severity Error::Severity_MIN;
constexpr Error_Severity Error::Severity_MAX;
constexpr int Error::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientMessages::InitAsDefaultInstance() {
}
class ClientMessages::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientMessages>()._has_bits_);
};

ClientMessages::ClientMessages()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.ClientMessages)
}
ClientMessages::ClientMessages(const ClientMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.ClientMessages)
}

void ClientMessages::SharedCtor() {
}

ClientMessages::~ClientMessages() {
  // @@protoc_insertion_point(destructor:Mysqlx.ClientMessages)
  SharedDtor();
}

void ClientMessages::SharedDtor() {
}

void ClientMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessages& ClientMessages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessages_mysqlx_2eproto.base);
  return *internal_default_instance();
}


void ClientMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.ClientMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClientMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.ClientMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.ClientMessages)
  return target;
}

size_t ClientMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.ClientMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessages::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientMessages*>(
      &from));
}

void ClientMessages::MergeFrom(const ClientMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.ClientMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClientMessages::CopyFrom(const ClientMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.ClientMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessages::IsInitialized() const {
  return true;
}

void ClientMessages::InternalSwap(ClientMessages* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ClientMessages::GetTypeName() const {
  return "Mysqlx.ClientMessages";
}


// ===================================================================

void ServerMessages::InitAsDefaultInstance() {
}
class ServerMessages::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerMessages>()._has_bits_);
};

ServerMessages::ServerMessages()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.ServerMessages)
}
ServerMessages::ServerMessages(const ServerMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.ServerMessages)
}

void ServerMessages::SharedCtor() {
}

ServerMessages::~ServerMessages() {
  // @@protoc_insertion_point(destructor:Mysqlx.ServerMessages)
  SharedDtor();
}

void ServerMessages::SharedDtor() {
}

void ServerMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerMessages& ServerMessages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerMessages_mysqlx_2eproto.base);
  return *internal_default_instance();
}


void ServerMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.ServerMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ServerMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.ServerMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.ServerMessages)
  return target;
}

size_t ServerMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.ServerMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessages::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerMessages*>(
      &from));
}

void ServerMessages::MergeFrom(const ServerMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.ServerMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerMessages::CopyFrom(const ServerMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.ServerMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessages::IsInitialized() const {
  return true;
}

void ServerMessages::InternalSwap(ServerMessages* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ServerMessages::GetTypeName() const {
  return "Mysqlx.ServerMessages";
}


// ===================================================================

void Ok::InitAsDefaultInstance() {
}
class Ok::_Internal {
 public:
  using HasBits = decltype(std::declval<Ok>()._has_bits_);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Ok::Ok()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Ok)
}
Ok::Ok(const Ok& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Ok)
}

void Ok::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ok_mysqlx_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Ok::~Ok() {
  // @@protoc_insertion_point(destructor:Mysqlx.Ok)
  SharedDtor();
}

void Ok::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ok::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ok& Ok::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ok_mysqlx_2eproto.base);
  return *internal_default_instance();
}


void Ok::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Ok)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ok::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ok::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Ok)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Ok)
  return target;
}

size_t Ok::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Ok)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ok::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Ok*>(
      &from));
}

void Ok::MergeFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Ok)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _has_bits_[0] |= 0x00000001u;
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Ok::CopyFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Ok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ok::IsInitialized() const {
  return true;
}

void Ok::InternalSwap(Ok* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string Ok::GetTypeName() const {
  return "Mysqlx.Ok";
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
class Error::_Internal {
 public:
  using HasBits = decltype(std::declval<Error>()._has_bits_);
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sql_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Error::Error()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  sql_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sql_state()) {
    sql_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_state_);
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_mysqlx_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(code_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:Mysqlx.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_mysqlx_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sql_state_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&severity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&severity_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Error_Severity_IsValid(val))) {
            _internal_set_severity(static_cast<::Mysqlx::Error_Severity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sql_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sql_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_severity(), target);
  }

  // required uint32 code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // required string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // required string sql_state = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sql_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Error)
  return target;
}

size_t Error::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Error)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_sql_state()) {
    // required string sql_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_state());
  }

  if (_internal_has_code()) {
    // required uint32 code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  return total_size;
}
size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Error)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required string sql_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_state());

    // required uint32 code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Error*>(
      &from));
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sql_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sql_state_);
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sql_state_.Swap(&other->sql_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(severity_, other->severity_);
  swap(code_, other->code_);
}

std::string Error::GetTypeName() const {
  return "Mysqlx.Error";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mysqlx::ClientMessages* Arena::CreateMaybeMessage< ::Mysqlx::ClientMessages >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::ClientMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::ServerMessages* Arena::CreateMaybeMessage< ::Mysqlx::ServerMessages >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::ServerMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Ok* Arena::CreateMaybeMessage< ::Mysqlx::Ok >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Ok >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Error* Arena::CreateMaybeMessage< ::Mysqlx::Error >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Error >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
