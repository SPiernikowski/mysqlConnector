// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_notice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fnotice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fnotice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "mysqlx_datatypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysqlx_5fnotice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysqlx_5fnotice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Mysqlx {
namespace Notice {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class GroupReplicationStateChanged;
class GroupReplicationStateChangedDefaultTypeInternal;
extern GroupReplicationStateChangedDefaultTypeInternal _GroupReplicationStateChanged_default_instance_;
class SessionStateChanged;
class SessionStateChangedDefaultTypeInternal;
extern SessionStateChangedDefaultTypeInternal _SessionStateChanged_default_instance_;
class SessionVariableChanged;
class SessionVariableChangedDefaultTypeInternal;
extern SessionVariableChangedDefaultTypeInternal _SessionVariableChanged_default_instance_;
class Warning;
class WarningDefaultTypeInternal;
extern WarningDefaultTypeInternal _Warning_default_instance_;
}  // namespace Notice
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> ::Mysqlx::Notice::Frame* Arena::CreateMaybeMessage<::Mysqlx::Notice::Frame>(Arena*);
template<> ::Mysqlx::Notice::GroupReplicationStateChanged* Arena::CreateMaybeMessage<::Mysqlx::Notice::GroupReplicationStateChanged>(Arena*);
template<> ::Mysqlx::Notice::SessionStateChanged* Arena::CreateMaybeMessage<::Mysqlx::Notice::SessionStateChanged>(Arena*);
template<> ::Mysqlx::Notice::SessionVariableChanged* Arena::CreateMaybeMessage<::Mysqlx::Notice::SessionVariableChanged>(Arena*);
template<> ::Mysqlx::Notice::Warning* Arena::CreateMaybeMessage<::Mysqlx::Notice::Warning>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mysqlx {
namespace Notice {

enum Frame_Scope : int {
  Frame_Scope_GLOBAL = 1,
  Frame_Scope_LOCAL = 2
};
bool Frame_Scope_IsValid(int value);
constexpr Frame_Scope Frame_Scope_Scope_MIN = Frame_Scope_GLOBAL;
constexpr Frame_Scope Frame_Scope_Scope_MAX = Frame_Scope_LOCAL;
constexpr int Frame_Scope_Scope_ARRAYSIZE = Frame_Scope_Scope_MAX + 1;

const std::string& Frame_Scope_Name(Frame_Scope value);
template<typename T>
inline const std::string& Frame_Scope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Frame_Scope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Frame_Scope_Name.");
  return Frame_Scope_Name(static_cast<Frame_Scope>(enum_t_value));
}
bool Frame_Scope_Parse(
    const std::string& name, Frame_Scope* value);
enum Frame_Type : int {
  Frame_Type_WARNING = 1,
  Frame_Type_SESSION_VARIABLE_CHANGED = 2,
  Frame_Type_SESSION_STATE_CHANGED = 3,
  Frame_Type_GROUP_REPLICATION_STATE_CHANGED = 4
};
bool Frame_Type_IsValid(int value);
constexpr Frame_Type Frame_Type_Type_MIN = Frame_Type_WARNING;
constexpr Frame_Type Frame_Type_Type_MAX = Frame_Type_GROUP_REPLICATION_STATE_CHANGED;
constexpr int Frame_Type_Type_ARRAYSIZE = Frame_Type_Type_MAX + 1;

const std::string& Frame_Type_Name(Frame_Type value);
template<typename T>
inline const std::string& Frame_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Frame_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Frame_Type_Name.");
  return Frame_Type_Name(static_cast<Frame_Type>(enum_t_value));
}
bool Frame_Type_Parse(
    const std::string& name, Frame_Type* value);
enum Warning_Level : int {
  Warning_Level_NOTE = 1,
  Warning_Level_WARNING = 2,
  Warning_Level_ERROR = 3
};
bool Warning_Level_IsValid(int value);
constexpr Warning_Level Warning_Level_Level_MIN = Warning_Level_NOTE;
constexpr Warning_Level Warning_Level_Level_MAX = Warning_Level_ERROR;
constexpr int Warning_Level_Level_ARRAYSIZE = Warning_Level_Level_MAX + 1;

const std::string& Warning_Level_Name(Warning_Level value);
template<typename T>
inline const std::string& Warning_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Warning_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Warning_Level_Name.");
  return Warning_Level_Name(static_cast<Warning_Level>(enum_t_value));
}
bool Warning_Level_Parse(
    const std::string& name, Warning_Level* value);
enum SessionStateChanged_Parameter : int {
  SessionStateChanged_Parameter_CURRENT_SCHEMA = 1,
  SessionStateChanged_Parameter_ACCOUNT_EXPIRED = 2,
  SessionStateChanged_Parameter_GENERATED_INSERT_ID = 3,
  SessionStateChanged_Parameter_ROWS_AFFECTED = 4,
  SessionStateChanged_Parameter_ROWS_FOUND = 5,
  SessionStateChanged_Parameter_ROWS_MATCHED = 6,
  SessionStateChanged_Parameter_TRX_COMMITTED = 7,
  SessionStateChanged_Parameter_TRX_ROLLEDBACK = 9,
  SessionStateChanged_Parameter_PRODUCED_MESSAGE = 10,
  SessionStateChanged_Parameter_CLIENT_ID_ASSIGNED = 11,
  SessionStateChanged_Parameter_GENERATED_DOCUMENT_IDS = 12
};
bool SessionStateChanged_Parameter_IsValid(int value);
constexpr SessionStateChanged_Parameter SessionStateChanged_Parameter_Parameter_MIN = SessionStateChanged_Parameter_CURRENT_SCHEMA;
constexpr SessionStateChanged_Parameter SessionStateChanged_Parameter_Parameter_MAX = SessionStateChanged_Parameter_GENERATED_DOCUMENT_IDS;
constexpr int SessionStateChanged_Parameter_Parameter_ARRAYSIZE = SessionStateChanged_Parameter_Parameter_MAX + 1;

const std::string& SessionStateChanged_Parameter_Name(SessionStateChanged_Parameter value);
template<typename T>
inline const std::string& SessionStateChanged_Parameter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionStateChanged_Parameter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionStateChanged_Parameter_Name.");
  return SessionStateChanged_Parameter_Name(static_cast<SessionStateChanged_Parameter>(enum_t_value));
}
bool SessionStateChanged_Parameter_Parse(
    const std::string& name, SessionStateChanged_Parameter* value);
enum GroupReplicationStateChanged_Type : int {
  GroupReplicationStateChanged_Type_MEMBERSHIP_QUORUM_LOSS = 1,
  GroupReplicationStateChanged_Type_MEMBERSHIP_VIEW_CHANGE = 2,
  GroupReplicationStateChanged_Type_MEMBER_ROLE_CHANGE = 3,
  GroupReplicationStateChanged_Type_MEMBER_STATE_CHANGE = 4
};
bool GroupReplicationStateChanged_Type_IsValid(int value);
constexpr GroupReplicationStateChanged_Type GroupReplicationStateChanged_Type_Type_MIN = GroupReplicationStateChanged_Type_MEMBERSHIP_QUORUM_LOSS;
constexpr GroupReplicationStateChanged_Type GroupReplicationStateChanged_Type_Type_MAX = GroupReplicationStateChanged_Type_MEMBER_STATE_CHANGE;
constexpr int GroupReplicationStateChanged_Type_Type_ARRAYSIZE = GroupReplicationStateChanged_Type_Type_MAX + 1;

const std::string& GroupReplicationStateChanged_Type_Name(GroupReplicationStateChanged_Type value);
template<typename T>
inline const std::string& GroupReplicationStateChanged_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupReplicationStateChanged_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupReplicationStateChanged_Type_Name.");
  return GroupReplicationStateChanged_Type_Name(static_cast<GroupReplicationStateChanged_Type>(enum_t_value));
}
bool GroupReplicationStateChanged_Type_Parse(
    const std::string& name, GroupReplicationStateChanged_Type* value);
// ===================================================================

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Notice.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Frame_Scope Scope;
  static constexpr Scope GLOBAL =
    Frame_Scope_GLOBAL;
  static constexpr Scope LOCAL =
    Frame_Scope_LOCAL;
  static inline bool Scope_IsValid(int value) {
    return Frame_Scope_IsValid(value);
  }
  static constexpr Scope Scope_MIN =
    Frame_Scope_Scope_MIN;
  static constexpr Scope Scope_MAX =
    Frame_Scope_Scope_MAX;
  static constexpr int Scope_ARRAYSIZE =
    Frame_Scope_Scope_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Scope_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scope>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scope_Name.");
    return Frame_Scope_Name(enum_t_value);
  }
  static inline bool Scope_Parse(const std::string& name,
      Scope* value) {
    return Frame_Scope_Parse(name, value);
  }

  typedef Frame_Type Type;
  static constexpr Type WARNING =
    Frame_Type_WARNING;
  static constexpr Type SESSION_VARIABLE_CHANGED =
    Frame_Type_SESSION_VARIABLE_CHANGED;
  static constexpr Type SESSION_STATE_CHANGED =
    Frame_Type_SESSION_STATE_CHANGED;
  static constexpr Type GROUP_REPLICATION_STATE_CHANGED =
    Frame_Type_GROUP_REPLICATION_STATE_CHANGED;
  static inline bool Type_IsValid(int value) {
    return Frame_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Frame_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Frame_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Frame_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Frame_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Frame_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kTypeFieldNumber = 1,
    kScopeFieldNumber = 2,
  };
  // optional bytes payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // required uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  ::Mysqlx::Notice::Frame_Scope scope() const;
  void set_scope(::Mysqlx::Notice::Frame_Scope value);
  private:
  ::Mysqlx::Notice::Frame_Scope _internal_scope() const;
  void _internal_set_scope(::Mysqlx::Notice::Frame_Scope value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  int scope_;
  friend struct ::TableStruct_mysqlx_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class Warning :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.Warning) */ {
 public:
  Warning();
  virtual ~Warning();

  Warning(const Warning& from);
  Warning(Warning&& from) noexcept
    : Warning() {
    *this = ::std::move(from);
  }

  inline Warning& operator=(const Warning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Warning& operator=(Warning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Warning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Warning* internal_default_instance() {
    return reinterpret_cast<const Warning*>(
               &_Warning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Warning& a, Warning& b) {
    a.Swap(&b);
  }
  inline void Swap(Warning* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Warning* New() const final {
    return CreateMaybeMessage<Warning>(nullptr);
  }

  Warning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Warning>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Warning& from);
  void MergeFrom(const Warning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Warning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Notice.Warning";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Warning_Level Level;
  static constexpr Level NOTE =
    Warning_Level_NOTE;
  static constexpr Level WARNING =
    Warning_Level_WARNING;
  static constexpr Level ERROR =
    Warning_Level_ERROR;
  static inline bool Level_IsValid(int value) {
    return Warning_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    Warning_Level_Level_MIN;
  static constexpr Level Level_MAX =
    Warning_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    Warning_Level_Level_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return Warning_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(const std::string& name,
      Level* value) {
    return Warning_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // required string msg = 3;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required uint32 code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::Mysqlx::Notice::Warning_Level level() const;
  void set_level(::Mysqlx::Notice::Warning_Level value);
  private:
  ::Mysqlx::Notice::Warning_Level _internal_level() const;
  void _internal_set_level(::Mysqlx::Notice::Warning_Level value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.Warning)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  int level_;
  friend struct ::TableStruct_mysqlx_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class SessionVariableChanged :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.SessionVariableChanged) */ {
 public:
  SessionVariableChanged();
  virtual ~SessionVariableChanged();

  SessionVariableChanged(const SessionVariableChanged& from);
  SessionVariableChanged(SessionVariableChanged&& from) noexcept
    : SessionVariableChanged() {
    *this = ::std::move(from);
  }

  inline SessionVariableChanged& operator=(const SessionVariableChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionVariableChanged& operator=(SessionVariableChanged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SessionVariableChanged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionVariableChanged* internal_default_instance() {
    return reinterpret_cast<const SessionVariableChanged*>(
               &_SessionVariableChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionVariableChanged& a, SessionVariableChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionVariableChanged* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionVariableChanged* New() const final {
    return CreateMaybeMessage<SessionVariableChanged>(nullptr);
  }

  SessionVariableChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionVariableChanged>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SessionVariableChanged& from);
  void MergeFrom(const SessionVariableChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionVariableChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Notice.SessionVariableChanged";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string param = 1;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Mysqlx::Datatypes::Scalar& value() const;
  ::Mysqlx::Datatypes::Scalar* release_value();
  ::Mysqlx::Datatypes::Scalar* mutable_value();
  void set_allocated_value(::Mysqlx::Datatypes::Scalar* value);
  private:
  const ::Mysqlx::Datatypes::Scalar& _internal_value() const;
  ::Mysqlx::Datatypes::Scalar* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.SessionVariableChanged)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  ::Mysqlx::Datatypes::Scalar* value_;
  friend struct ::TableStruct_mysqlx_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class SessionStateChanged :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.SessionStateChanged) */ {
 public:
  SessionStateChanged();
  virtual ~SessionStateChanged();

  SessionStateChanged(const SessionStateChanged& from);
  SessionStateChanged(SessionStateChanged&& from) noexcept
    : SessionStateChanged() {
    *this = ::std::move(from);
  }

  inline SessionStateChanged& operator=(const SessionStateChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionStateChanged& operator=(SessionStateChanged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SessionStateChanged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionStateChanged* internal_default_instance() {
    return reinterpret_cast<const SessionStateChanged*>(
               &_SessionStateChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SessionStateChanged& a, SessionStateChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionStateChanged* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionStateChanged* New() const final {
    return CreateMaybeMessage<SessionStateChanged>(nullptr);
  }

  SessionStateChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionStateChanged>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SessionStateChanged& from);
  void MergeFrom(const SessionStateChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionStateChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Notice.SessionStateChanged";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SessionStateChanged_Parameter Parameter;
  static constexpr Parameter CURRENT_SCHEMA =
    SessionStateChanged_Parameter_CURRENT_SCHEMA;
  static constexpr Parameter ACCOUNT_EXPIRED =
    SessionStateChanged_Parameter_ACCOUNT_EXPIRED;
  static constexpr Parameter GENERATED_INSERT_ID =
    SessionStateChanged_Parameter_GENERATED_INSERT_ID;
  static constexpr Parameter ROWS_AFFECTED =
    SessionStateChanged_Parameter_ROWS_AFFECTED;
  static constexpr Parameter ROWS_FOUND =
    SessionStateChanged_Parameter_ROWS_FOUND;
  static constexpr Parameter ROWS_MATCHED =
    SessionStateChanged_Parameter_ROWS_MATCHED;
  static constexpr Parameter TRX_COMMITTED =
    SessionStateChanged_Parameter_TRX_COMMITTED;
  static constexpr Parameter TRX_ROLLEDBACK =
    SessionStateChanged_Parameter_TRX_ROLLEDBACK;
  static constexpr Parameter PRODUCED_MESSAGE =
    SessionStateChanged_Parameter_PRODUCED_MESSAGE;
  static constexpr Parameter CLIENT_ID_ASSIGNED =
    SessionStateChanged_Parameter_CLIENT_ID_ASSIGNED;
  static constexpr Parameter GENERATED_DOCUMENT_IDS =
    SessionStateChanged_Parameter_GENERATED_DOCUMENT_IDS;
  static inline bool Parameter_IsValid(int value) {
    return SessionStateChanged_Parameter_IsValid(value);
  }
  static constexpr Parameter Parameter_MIN =
    SessionStateChanged_Parameter_Parameter_MIN;
  static constexpr Parameter Parameter_MAX =
    SessionStateChanged_Parameter_Parameter_MAX;
  static constexpr int Parameter_ARRAYSIZE =
    SessionStateChanged_Parameter_Parameter_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Parameter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Parameter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Parameter_Name.");
    return SessionStateChanged_Parameter_Name(enum_t_value);
  }
  static inline bool Parameter_Parse(const std::string& name,
      Parameter* value) {
    return SessionStateChanged_Parameter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kParamFieldNumber = 1,
  };
  // repeated .Mysqlx.Datatypes.Scalar value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::Mysqlx::Datatypes::Scalar* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Scalar >*
      mutable_value();
  private:
  const ::Mysqlx::Datatypes::Scalar& _internal_value(int index) const;
  ::Mysqlx::Datatypes::Scalar* _internal_add_value();
  public:
  const ::Mysqlx::Datatypes::Scalar& value(int index) const;
  ::Mysqlx::Datatypes::Scalar* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Scalar >&
      value() const;

  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  ::Mysqlx::Notice::SessionStateChanged_Parameter param() const;
  void set_param(::Mysqlx::Notice::SessionStateChanged_Parameter value);
  private:
  ::Mysqlx::Notice::SessionStateChanged_Parameter _internal_param() const;
  void _internal_set_param(::Mysqlx::Notice::SessionStateChanged_Parameter value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.SessionStateChanged)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Scalar > value_;
  int param_;
  friend struct ::TableStruct_mysqlx_5fnotice_2eproto;
};
// -------------------------------------------------------------------

class GroupReplicationStateChanged :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Notice.GroupReplicationStateChanged) */ {
 public:
  GroupReplicationStateChanged();
  virtual ~GroupReplicationStateChanged();

  GroupReplicationStateChanged(const GroupReplicationStateChanged& from);
  GroupReplicationStateChanged(GroupReplicationStateChanged&& from) noexcept
    : GroupReplicationStateChanged() {
    *this = ::std::move(from);
  }

  inline GroupReplicationStateChanged& operator=(const GroupReplicationStateChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupReplicationStateChanged& operator=(GroupReplicationStateChanged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GroupReplicationStateChanged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupReplicationStateChanged* internal_default_instance() {
    return reinterpret_cast<const GroupReplicationStateChanged*>(
               &_GroupReplicationStateChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupReplicationStateChanged& a, GroupReplicationStateChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupReplicationStateChanged* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupReplicationStateChanged* New() const final {
    return CreateMaybeMessage<GroupReplicationStateChanged>(nullptr);
  }

  GroupReplicationStateChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupReplicationStateChanged>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GroupReplicationStateChanged& from);
  void MergeFrom(const GroupReplicationStateChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupReplicationStateChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Notice.GroupReplicationStateChanged";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GroupReplicationStateChanged_Type Type;
  static constexpr Type MEMBERSHIP_QUORUM_LOSS =
    GroupReplicationStateChanged_Type_MEMBERSHIP_QUORUM_LOSS;
  static constexpr Type MEMBERSHIP_VIEW_CHANGE =
    GroupReplicationStateChanged_Type_MEMBERSHIP_VIEW_CHANGE;
  static constexpr Type MEMBER_ROLE_CHANGE =
    GroupReplicationStateChanged_Type_MEMBER_ROLE_CHANGE;
  static constexpr Type MEMBER_STATE_CHANGE =
    GroupReplicationStateChanged_Type_MEMBER_STATE_CHANGE;
  static inline bool Type_IsValid(int value) {
    return GroupReplicationStateChanged_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GroupReplicationStateChanged_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GroupReplicationStateChanged_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GroupReplicationStateChanged_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GroupReplicationStateChanged_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return GroupReplicationStateChanged_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kViewIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string view_id = 2;
  bool has_view_id() const;
  private:
  bool _internal_has_view_id() const;
  public:
  void clear_view_id();
  const std::string& view_id() const;
  void set_view_id(const std::string& value);
  void set_view_id(std::string&& value);
  void set_view_id(const char* value);
  void set_view_id(const char* value, size_t size);
  std::string* mutable_view_id();
  std::string* release_view_id();
  void set_allocated_view_id(std::string* view_id);
  private:
  const std::string& _internal_view_id() const;
  void _internal_set_view_id(const std::string& value);
  std::string* _internal_mutable_view_id();
  public:

  // required uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Notice.GroupReplicationStateChanged)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_mysqlx_5fnotice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame

// required uint32 type = 1;
inline bool Frame::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Frame::has_type() const {
  return _internal_has_type();
}
inline void Frame::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.type)
  return _internal_type();
}
inline void Frame::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Frame::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.type)
}

// optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
inline bool Frame::_internal_has_scope() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Frame::has_scope() const {
  return _internal_has_scope();
}
inline void Frame::clear_scope() {
  scope_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Mysqlx::Notice::Frame_Scope Frame::_internal_scope() const {
  return static_cast< ::Mysqlx::Notice::Frame_Scope >(scope_);
}
inline ::Mysqlx::Notice::Frame_Scope Frame::scope() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.scope)
  return _internal_scope();
}
inline void Frame::_internal_set_scope(::Mysqlx::Notice::Frame_Scope value) {
  assert(::Mysqlx::Notice::Frame_Scope_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  scope_ = value;
}
inline void Frame::set_scope(::Mysqlx::Notice::Frame_Scope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.scope)
}

// optional bytes payload = 3;
inline bool Frame::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Frame::has_payload() const {
  return _internal_has_payload();
}
inline void Frame::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Frame::payload() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Frame.payload)
  return _internal_payload();
}
inline void Frame::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Frame.payload)
}
inline std::string* Frame::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.Frame.payload)
  return _internal_mutable_payload();
}
inline const std::string& Frame::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void Frame::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Frame::set_payload(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.Frame.payload)
}
inline void Frame::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.Frame.payload)
}
inline void Frame::set_payload(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.Frame.payload)
}
inline std::string* Frame::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Frame::release_payload() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.Frame.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return payload_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.Frame.payload)
}

// -------------------------------------------------------------------

// Warning

// optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
inline bool Warning::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Warning::has_level() const {
  return _internal_has_level();
}
inline void Warning::clear_level() {
  level_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Mysqlx::Notice::Warning_Level Warning::_internal_level() const {
  return static_cast< ::Mysqlx::Notice::Warning_Level >(level_);
}
inline ::Mysqlx::Notice::Warning_Level Warning::level() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.level)
  return _internal_level();
}
inline void Warning::_internal_set_level(::Mysqlx::Notice::Warning_Level value) {
  assert(::Mysqlx::Notice::Warning_Level_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void Warning::set_level(::Mysqlx::Notice::Warning_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.level)
}

// required uint32 code = 2;
inline bool Warning::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Warning::has_code() const {
  return _internal_has_code();
}
inline void Warning::clear_code() {
  code_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Warning::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Warning::code() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.code)
  return _internal_code();
}
inline void Warning::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void Warning::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.code)
}

// required string msg = 3;
inline bool Warning::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Warning::has_msg() const {
  return _internal_has_msg();
}
inline void Warning::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Warning::msg() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.Warning.msg)
  return _internal_msg();
}
inline void Warning::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.Warning.msg)
}
inline std::string* Warning::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.Warning.msg)
  return _internal_mutable_msg();
}
inline const std::string& Warning::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Warning::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Warning::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.Warning.msg)
}
inline void Warning::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.Warning.msg)
}
inline void Warning::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.Warning.msg)
}
inline std::string* Warning::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Warning::release_msg() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.Warning.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Warning::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.Warning.msg)
}

// -------------------------------------------------------------------

// SessionVariableChanged

// required string param = 1;
inline bool SessionVariableChanged::_internal_has_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionVariableChanged::has_param() const {
  return _internal_has_param();
}
inline void SessionVariableChanged::clear_param() {
  param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionVariableChanged::param() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionVariableChanged.param)
  return _internal_param();
}
inline void SessionVariableChanged::set_param(const std::string& value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.SessionVariableChanged.param)
}
inline std::string* SessionVariableChanged::mutable_param() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionVariableChanged.param)
  return _internal_mutable_param();
}
inline const std::string& SessionVariableChanged::_internal_param() const {
  return param_.GetNoArena();
}
inline void SessionVariableChanged::_internal_set_param(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SessionVariableChanged::set_param(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.SessionVariableChanged.param)
}
inline void SessionVariableChanged::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.SessionVariableChanged.param)
}
inline void SessionVariableChanged::set_param(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.SessionVariableChanged.param)
}
inline std::string* SessionVariableChanged::_internal_mutable_param() {
  _has_bits_[0] |= 0x00000001u;
  return param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionVariableChanged::release_param() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.SessionVariableChanged.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return param_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionVariableChanged::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.SessionVariableChanged.param)
}

// optional .Mysqlx.Datatypes.Scalar value = 2;
inline bool SessionVariableChanged::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool SessionVariableChanged::has_value() const {
  return _internal_has_value();
}
inline const ::Mysqlx::Datatypes::Scalar& SessionVariableChanged::_internal_value() const {
  const ::Mysqlx::Datatypes::Scalar* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Datatypes::Scalar*>(
      &::Mysqlx::Datatypes::_Scalar_default_instance_);
}
inline const ::Mysqlx::Datatypes::Scalar& SessionVariableChanged::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionVariableChanged.value)
  return _internal_value();
}
inline ::Mysqlx::Datatypes::Scalar* SessionVariableChanged::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.SessionVariableChanged.value)
  _has_bits_[0] &= ~0x00000002u;
  ::Mysqlx::Datatypes::Scalar* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::Mysqlx::Datatypes::Scalar* SessionVariableChanged::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Datatypes::Scalar>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::Mysqlx::Datatypes::Scalar* SessionVariableChanged::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionVariableChanged.value)
  return _internal_mutable_value();
}
inline void SessionVariableChanged::set_allocated_value(::Mysqlx::Datatypes::Scalar* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.SessionVariableChanged.value)
}

// -------------------------------------------------------------------

// SessionStateChanged

// required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
inline bool SessionStateChanged::_internal_has_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionStateChanged::has_param() const {
  return _internal_has_param();
}
inline void SessionStateChanged::clear_param() {
  param_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Mysqlx::Notice::SessionStateChanged_Parameter SessionStateChanged::_internal_param() const {
  return static_cast< ::Mysqlx::Notice::SessionStateChanged_Parameter >(param_);
}
inline ::Mysqlx::Notice::SessionStateChanged_Parameter SessionStateChanged::param() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionStateChanged.param)
  return _internal_param();
}
inline void SessionStateChanged::_internal_set_param(::Mysqlx::Notice::SessionStateChanged_Parameter value) {
  assert(::Mysqlx::Notice::SessionStateChanged_Parameter_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  param_ = value;
}
inline void SessionStateChanged::set_param(::Mysqlx::Notice::SessionStateChanged_Parameter value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.SessionStateChanged.param)
}

// repeated .Mysqlx.Datatypes.Scalar value = 2;
inline int SessionStateChanged::_internal_value_size() const {
  return value_.size();
}
inline int SessionStateChanged::value_size() const {
  return _internal_value_size();
}
inline ::Mysqlx::Datatypes::Scalar* SessionStateChanged::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.SessionStateChanged.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Scalar >*
SessionStateChanged::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Notice.SessionStateChanged.value)
  return &value_;
}
inline const ::Mysqlx::Datatypes::Scalar& SessionStateChanged::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::Mysqlx::Datatypes::Scalar& SessionStateChanged::value(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.SessionStateChanged.value)
  return _internal_value(index);
}
inline ::Mysqlx::Datatypes::Scalar* SessionStateChanged::_internal_add_value() {
  return value_.Add();
}
inline ::Mysqlx::Datatypes::Scalar* SessionStateChanged::add_value() {
  // @@protoc_insertion_point(field_add:Mysqlx.Notice.SessionStateChanged.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Datatypes::Scalar >&
SessionStateChanged::value() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Notice.SessionStateChanged.value)
  return value_;
}

// -------------------------------------------------------------------

// GroupReplicationStateChanged

// required uint32 type = 1;
inline bool GroupReplicationStateChanged::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupReplicationStateChanged::has_type() const {
  return _internal_has_type();
}
inline void GroupReplicationStateChanged::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupReplicationStateChanged::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupReplicationStateChanged::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.GroupReplicationStateChanged.type)
  return _internal_type();
}
inline void GroupReplicationStateChanged::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void GroupReplicationStateChanged::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.GroupReplicationStateChanged.type)
}

// optional string view_id = 2;
inline bool GroupReplicationStateChanged::_internal_has_view_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupReplicationStateChanged::has_view_id() const {
  return _internal_has_view_id();
}
inline void GroupReplicationStateChanged::clear_view_id() {
  view_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupReplicationStateChanged::view_id() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Notice.GroupReplicationStateChanged.view_id)
  return _internal_view_id();
}
inline void GroupReplicationStateChanged::set_view_id(const std::string& value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Notice.GroupReplicationStateChanged.view_id)
}
inline std::string* GroupReplicationStateChanged::mutable_view_id() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Notice.GroupReplicationStateChanged.view_id)
  return _internal_mutable_view_id();
}
inline const std::string& GroupReplicationStateChanged::_internal_view_id() const {
  return view_id_.GetNoArena();
}
inline void GroupReplicationStateChanged::_internal_set_view_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  view_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupReplicationStateChanged::set_view_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  view_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Notice.GroupReplicationStateChanged.view_id)
}
inline void GroupReplicationStateChanged::set_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  view_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Notice.GroupReplicationStateChanged.view_id)
}
inline void GroupReplicationStateChanged::set_view_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  view_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Notice.GroupReplicationStateChanged.view_id)
}
inline std::string* GroupReplicationStateChanged::_internal_mutable_view_id() {
  _has_bits_[0] |= 0x00000001u;
  return view_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupReplicationStateChanged::release_view_id() {
  // @@protoc_insertion_point(field_release:Mysqlx.Notice.GroupReplicationStateChanged.view_id)
  if (!_internal_has_view_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return view_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupReplicationStateChanged::set_allocated_view_id(std::string* view_id) {
  if (view_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  view_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_id);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Notice.GroupReplicationStateChanged.view_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Notice
}  // namespace Mysqlx

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Mysqlx::Notice::Frame_Scope> : ::std::true_type {};
template <> struct is_proto_enum< ::Mysqlx::Notice::Frame_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::Mysqlx::Notice::Warning_Level> : ::std::true_type {};
template <> struct is_proto_enum< ::Mysqlx::Notice::SessionStateChanged_Parameter> : ::std::true_type {};
template <> struct is_proto_enum< ::Mysqlx::Notice::GroupReplicationStateChanged_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fnotice_2eproto
