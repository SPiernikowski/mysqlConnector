// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_cursor.proto

#include "mysqlx_cursor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fcursor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Open_OneOfMessage_mysqlx_5fcursor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fprepare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Execute_mysqlx_5fprepare_2eproto;
namespace Mysqlx {
namespace Cursor {
class Open_OneOfMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Open_OneOfMessage> _instance;
} _Open_OneOfMessage_default_instance_;
class OpenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Open> _instance;
} _Open_default_instance_;
class FetchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fetch> _instance;
} _Fetch_default_instance_;
class CloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Close> _instance;
} _Close_default_instance_;
}  // namespace Cursor
}  // namespace Mysqlx
static void InitDefaultsscc_info_Close_mysqlx_5fcursor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Cursor::_Close_default_instance_;
    new (ptr) ::Mysqlx::Cursor::Close();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Cursor::Close::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Close_mysqlx_5fcursor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Close_mysqlx_5fcursor_2eproto}, {}};

static void InitDefaultsscc_info_Fetch_mysqlx_5fcursor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Cursor::_Fetch_default_instance_;
    new (ptr) ::Mysqlx::Cursor::Fetch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Cursor::Fetch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fetch_mysqlx_5fcursor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fetch_mysqlx_5fcursor_2eproto}, {}};

static void InitDefaultsscc_info_Open_mysqlx_5fcursor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Cursor::_Open_default_instance_;
    new (ptr) ::Mysqlx::Cursor::Open();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Cursor::Open::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Open_mysqlx_5fcursor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Open_mysqlx_5fcursor_2eproto}, {
      &scc_info_Open_OneOfMessage_mysqlx_5fcursor_2eproto.base,}};

static void InitDefaultsscc_info_Open_OneOfMessage_mysqlx_5fcursor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Cursor::_Open_OneOfMessage_default_instance_;
    new (ptr) ::Mysqlx::Cursor::Open_OneOfMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Cursor::Open_OneOfMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Open_OneOfMessage_mysqlx_5fcursor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Open_OneOfMessage_mysqlx_5fcursor_2eproto}, {
      &scc_info_Execute_mysqlx_5fprepare_2eproto.base,}};

namespace Mysqlx {
namespace Cursor {
bool Open_OneOfMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Open_OneOfMessage_Type_strings[1] = {};

static const char Open_OneOfMessage_Type_names[] =
  "PREPARE_EXECUTE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Open_OneOfMessage_Type_entries[] = {
  { {Open_OneOfMessage_Type_names + 0, 15}, 0 },
};

static const int Open_OneOfMessage_Type_entries_by_number[] = {
  0, // 0 -> PREPARE_EXECUTE
};

const std::string& Open_OneOfMessage_Type_Name(
    Open_OneOfMessage_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Open_OneOfMessage_Type_entries,
          Open_OneOfMessage_Type_entries_by_number,
          1, Open_OneOfMessage_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Open_OneOfMessage_Type_entries,
      Open_OneOfMessage_Type_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Open_OneOfMessage_Type_strings[idx].get();
}
bool Open_OneOfMessage_Type_Parse(
    const std::string& name, Open_OneOfMessage_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Open_OneOfMessage_Type_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<Open_OneOfMessage_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Open_OneOfMessage_Type Open_OneOfMessage::PREPARE_EXECUTE;
constexpr Open_OneOfMessage_Type Open_OneOfMessage::Type_MIN;
constexpr Open_OneOfMessage_Type Open_OneOfMessage::Type_MAX;
constexpr int Open_OneOfMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Open_OneOfMessage::InitAsDefaultInstance() {
  ::Mysqlx::Cursor::_Open_OneOfMessage_default_instance_._instance.get_mutable()->prepare_execute_ = const_cast< ::Mysqlx::Prepare::Execute*>(
      ::Mysqlx::Prepare::Execute::internal_default_instance());
}
class Open_OneOfMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Open_OneOfMessage>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Mysqlx::Prepare::Execute& prepare_execute(const Open_OneOfMessage* msg);
  static void set_has_prepare_execute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Mysqlx::Prepare::Execute&
Open_OneOfMessage::_Internal::prepare_execute(const Open_OneOfMessage* msg) {
  return *msg->prepare_execute_;
}
void Open_OneOfMessage::clear_prepare_execute() {
  if (prepare_execute_ != nullptr) prepare_execute_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Open_OneOfMessage::Open_OneOfMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Cursor.Open.OneOfMessage)
}
Open_OneOfMessage::Open_OneOfMessage(const Open_OneOfMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_prepare_execute()) {
    prepare_execute_ = new ::Mysqlx::Prepare::Execute(*from.prepare_execute_);
  } else {
    prepare_execute_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Cursor.Open.OneOfMessage)
}

void Open_OneOfMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Open_OneOfMessage_mysqlx_5fcursor_2eproto.base);
  ::memset(&prepare_execute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&prepare_execute_)) + sizeof(type_));
}

Open_OneOfMessage::~Open_OneOfMessage() {
  // @@protoc_insertion_point(destructor:Mysqlx.Cursor.Open.OneOfMessage)
  SharedDtor();
}

void Open_OneOfMessage::SharedDtor() {
  if (this != internal_default_instance()) delete prepare_execute_;
}

void Open_OneOfMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Open_OneOfMessage& Open_OneOfMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Open_OneOfMessage_mysqlx_5fcursor_2eproto.base);
  return *internal_default_instance();
}


void Open_OneOfMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Cursor.Open.OneOfMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(prepare_execute_ != nullptr);
    prepare_execute_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Open_OneOfMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Cursor::Open_OneOfMessage_Type_IsValid(val))) {
            _internal_set_type(static_cast<::Mysqlx::Cursor::Open_OneOfMessage_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Prepare.Execute prepare_execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare_execute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Open_OneOfMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Cursor.Open.OneOfMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .Mysqlx.Prepare.Execute prepare_execute = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prepare_execute(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Cursor.Open.OneOfMessage)
  return target;
}

size_t Open_OneOfMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Cursor.Open.OneOfMessage)
  size_t total_size = 0;

  // required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Mysqlx.Prepare.Execute prepare_execute = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prepare_execute_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open_OneOfMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Open_OneOfMessage*>(
      &from));
}

void Open_OneOfMessage::MergeFrom(const Open_OneOfMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Cursor.Open.OneOfMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_prepare_execute()->::Mysqlx::Prepare::Execute::MergeFrom(from._internal_prepare_execute());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Open_OneOfMessage::CopyFrom(const Open_OneOfMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Cursor.Open.OneOfMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_OneOfMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_prepare_execute()) {
    if (!prepare_execute_->IsInitialized()) return false;
  }
  return true;
}

void Open_OneOfMessage::InternalSwap(Open_OneOfMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prepare_execute_, other->prepare_execute_);
  swap(type_, other->type_);
}

std::string Open_OneOfMessage::GetTypeName() const {
  return "Mysqlx.Cursor.Open.OneOfMessage";
}


// ===================================================================

void Open::InitAsDefaultInstance() {
  ::Mysqlx::Cursor::_Open_default_instance_._instance.get_mutable()->stmt_ = const_cast< ::Mysqlx::Cursor::Open_OneOfMessage*>(
      ::Mysqlx::Cursor::Open_OneOfMessage::internal_default_instance());
}
class Open::_Internal {
 public:
  using HasBits = decltype(std::declval<Open>()._has_bits_);
  static void set_has_cursor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Mysqlx::Cursor::Open_OneOfMessage& stmt(const Open* msg);
  static void set_has_stmt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fetch_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Mysqlx::Cursor::Open_OneOfMessage&
Open::_Internal::stmt(const Open* msg) {
  return *msg->stmt_;
}
Open::Open()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Cursor.Open)
}
Open::Open(const Open& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stmt()) {
    stmt_ = new ::Mysqlx::Cursor::Open_OneOfMessage(*from.stmt_);
  } else {
    stmt_ = nullptr;
  }
  ::memcpy(&cursor_id_, &from.cursor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fetch_rows_) -
    reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Cursor.Open)
}

void Open::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Open_mysqlx_5fcursor_2eproto.base);
  ::memset(&stmt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetch_rows_) -
      reinterpret_cast<char*>(&stmt_)) + sizeof(fetch_rows_));
}

Open::~Open() {
  // @@protoc_insertion_point(destructor:Mysqlx.Cursor.Open)
  SharedDtor();
}

void Open::SharedDtor() {
  if (this != internal_default_instance()) delete stmt_;
}

void Open::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Open& Open::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Open_mysqlx_5fcursor_2eproto.base);
  return *internal_default_instance();
}


void Open::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Cursor.Open)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stmt_ != nullptr);
    stmt_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&cursor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fetch_rows_) -
        reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Open::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 cursor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cursor_id(&has_bits);
          cursor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stmt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fetch_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fetch_rows(&has_bits);
          fetch_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Open::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Cursor.Open)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cursor_id(), target);
  }

  // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stmt(this), target, stream);
  }

  // optional uint64 fetch_rows = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fetch_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Cursor.Open)
  return target;
}

size_t Open::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Cursor.Open)
  size_t total_size = 0;

  if (_internal_has_stmt()) {
    // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stmt_);
  }

  if (_internal_has_cursor_id()) {
    // required uint32 cursor_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cursor_id());
  }

  return total_size;
}
size_t Open::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Cursor.Open)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stmt_);

    // required uint32 cursor_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cursor_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 fetch_rows = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fetch_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Open*>(
      &from));
}

void Open::MergeFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Cursor.Open)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stmt()->::Mysqlx::Cursor::Open_OneOfMessage::MergeFrom(from._internal_stmt());
    }
    if (cached_has_bits & 0x00000002u) {
      cursor_id_ = from.cursor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      fetch_rows_ = from.fetch_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Open::CopyFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Cursor.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_stmt()) {
    if (!stmt_->IsInitialized()) return false;
  }
  return true;
}

void Open::InternalSwap(Open* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stmt_, other->stmt_);
  swap(cursor_id_, other->cursor_id_);
  swap(fetch_rows_, other->fetch_rows_);
}

std::string Open::GetTypeName() const {
  return "Mysqlx.Cursor.Open";
}


// ===================================================================

void Fetch::InitAsDefaultInstance() {
}
class Fetch::_Internal {
 public:
  using HasBits = decltype(std::declval<Fetch>()._has_bits_);
  static void set_has_cursor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fetch_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Fetch::Fetch()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Cursor.Fetch)
}
Fetch::Fetch(const Fetch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cursor_id_, &from.cursor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fetch_rows_) -
    reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Cursor.Fetch)
}

void Fetch::SharedCtor() {
  ::memset(&cursor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetch_rows_) -
      reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
}

Fetch::~Fetch() {
  // @@protoc_insertion_point(destructor:Mysqlx.Cursor.Fetch)
  SharedDtor();
}

void Fetch::SharedDtor() {
}

void Fetch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fetch& Fetch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fetch_mysqlx_5fcursor_2eproto.base);
  return *internal_default_instance();
}


void Fetch::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Cursor.Fetch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cursor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fetch_rows_) -
        reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Fetch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 cursor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cursor_id(&has_bits);
          cursor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fetch_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fetch_rows(&has_bits);
          fetch_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fetch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Cursor.Fetch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cursor_id(), target);
  }

  // optional uint64 fetch_rows = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fetch_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Cursor.Fetch)
  return target;
}

size_t Fetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Cursor.Fetch)
  size_t total_size = 0;

  // required uint32 cursor_id = 1;
  if (_internal_has_cursor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cursor_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 fetch_rows = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fetch_rows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fetch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Fetch*>(
      &from));
}

void Fetch::MergeFrom(const Fetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Cursor.Fetch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cursor_id_ = from.cursor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fetch_rows_ = from.fetch_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fetch::CopyFrom(const Fetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Cursor.Fetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fetch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Fetch::InternalSwap(Fetch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cursor_id_, other->cursor_id_);
  swap(fetch_rows_, other->fetch_rows_);
}

std::string Fetch::GetTypeName() const {
  return "Mysqlx.Cursor.Fetch";
}


// ===================================================================

void Close::InitAsDefaultInstance() {
}
class Close::_Internal {
 public:
  using HasBits = decltype(std::declval<Close>()._has_bits_);
  static void set_has_cursor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Close::Close()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Cursor.Close)
}
Close::Close(const Close& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_id_ = from.cursor_id_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Cursor.Close)
}

void Close::SharedCtor() {
  cursor_id_ = 0u;
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Cursor.Close)
  SharedDtor();
}

void Close::SharedDtor() {
}

void Close::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Close& Close::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Close_mysqlx_5fcursor_2eproto.base);
  return *internal_default_instance();
}


void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Cursor.Close)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Close::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 cursor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cursor_id(&has_bits);
          cursor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Close::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Cursor.Close)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cursor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Cursor.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Cursor.Close)
  size_t total_size = 0;

  // required uint32 cursor_id = 1;
  if (_internal_has_cursor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cursor_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Close*>(
      &from));
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Cursor.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cursor_id()) {
    _internal_set_cursor_id(from._internal_cursor_id());
  }
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Cursor.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Close::InternalSwap(Close* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cursor_id_, other->cursor_id_);
}

std::string Close::GetTypeName() const {
  return "Mysqlx.Cursor.Close";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Cursor
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mysqlx::Cursor::Open_OneOfMessage* Arena::CreateMaybeMessage< ::Mysqlx::Cursor::Open_OneOfMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Cursor::Open_OneOfMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Cursor::Open* Arena::CreateMaybeMessage< ::Mysqlx::Cursor::Open >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Cursor::Open >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Cursor::Fetch* Arena::CreateMaybeMessage< ::Mysqlx::Cursor::Fetch >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Cursor::Fetch >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Cursor::Close* Arena::CreateMaybeMessage< ::Mysqlx::Cursor::Close >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Cursor::Close >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
