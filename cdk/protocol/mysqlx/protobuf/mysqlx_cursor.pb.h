// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_cursor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fcursor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fcursor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "mysqlx_prepare.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysqlx_5fcursor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysqlx_5fcursor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Mysqlx {
namespace Cursor {
class Close;
class CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class Fetch;
class FetchDefaultTypeInternal;
extern FetchDefaultTypeInternal _Fetch_default_instance_;
class Open;
class OpenDefaultTypeInternal;
extern OpenDefaultTypeInternal _Open_default_instance_;
class Open_OneOfMessage;
class Open_OneOfMessageDefaultTypeInternal;
extern Open_OneOfMessageDefaultTypeInternal _Open_OneOfMessage_default_instance_;
}  // namespace Cursor
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> ::Mysqlx::Cursor::Close* Arena::CreateMaybeMessage<::Mysqlx::Cursor::Close>(Arena*);
template<> ::Mysqlx::Cursor::Fetch* Arena::CreateMaybeMessage<::Mysqlx::Cursor::Fetch>(Arena*);
template<> ::Mysqlx::Cursor::Open* Arena::CreateMaybeMessage<::Mysqlx::Cursor::Open>(Arena*);
template<> ::Mysqlx::Cursor::Open_OneOfMessage* Arena::CreateMaybeMessage<::Mysqlx::Cursor::Open_OneOfMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mysqlx {
namespace Cursor {

enum Open_OneOfMessage_Type : int {
  Open_OneOfMessage_Type_PREPARE_EXECUTE = 0
};
bool Open_OneOfMessage_Type_IsValid(int value);
constexpr Open_OneOfMessage_Type Open_OneOfMessage_Type_Type_MIN = Open_OneOfMessage_Type_PREPARE_EXECUTE;
constexpr Open_OneOfMessage_Type Open_OneOfMessage_Type_Type_MAX = Open_OneOfMessage_Type_PREPARE_EXECUTE;
constexpr int Open_OneOfMessage_Type_Type_ARRAYSIZE = Open_OneOfMessage_Type_Type_MAX + 1;

const std::string& Open_OneOfMessage_Type_Name(Open_OneOfMessage_Type value);
template<typename T>
inline const std::string& Open_OneOfMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Open_OneOfMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Open_OneOfMessage_Type_Name.");
  return Open_OneOfMessage_Type_Name(static_cast<Open_OneOfMessage_Type>(enum_t_value));
}
bool Open_OneOfMessage_Type_Parse(
    const std::string& name, Open_OneOfMessage_Type* value);
// ===================================================================

class Open_OneOfMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Cursor.Open.OneOfMessage) */ {
 public:
  Open_OneOfMessage();
  virtual ~Open_OneOfMessage();

  Open_OneOfMessage(const Open_OneOfMessage& from);
  Open_OneOfMessage(Open_OneOfMessage&& from) noexcept
    : Open_OneOfMessage() {
    *this = ::std::move(from);
  }

  inline Open_OneOfMessage& operator=(const Open_OneOfMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Open_OneOfMessage& operator=(Open_OneOfMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Open_OneOfMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Open_OneOfMessage* internal_default_instance() {
    return reinterpret_cast<const Open_OneOfMessage*>(
               &_Open_OneOfMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Open_OneOfMessage& a, Open_OneOfMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Open_OneOfMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Open_OneOfMessage* New() const final {
    return CreateMaybeMessage<Open_OneOfMessage>(nullptr);
  }

  Open_OneOfMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Open_OneOfMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Open_OneOfMessage& from);
  void MergeFrom(const Open_OneOfMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Open_OneOfMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Cursor.Open.OneOfMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Open_OneOfMessage_Type Type;
  static constexpr Type PREPARE_EXECUTE =
    Open_OneOfMessage_Type_PREPARE_EXECUTE;
  static inline bool Type_IsValid(int value) {
    return Open_OneOfMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Open_OneOfMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Open_OneOfMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Open_OneOfMessage_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Open_OneOfMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Open_OneOfMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrepareExecuteFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .Mysqlx.Prepare.Execute prepare_execute = 2;
  bool has_prepare_execute() const;
  private:
  bool _internal_has_prepare_execute() const;
  public:
  void clear_prepare_execute();
  const ::Mysqlx::Prepare::Execute& prepare_execute() const;
  ::Mysqlx::Prepare::Execute* release_prepare_execute();
  ::Mysqlx::Prepare::Execute* mutable_prepare_execute();
  void set_allocated_prepare_execute(::Mysqlx::Prepare::Execute* prepare_execute);
  private:
  const ::Mysqlx::Prepare::Execute& _internal_prepare_execute() const;
  ::Mysqlx::Prepare::Execute* _internal_mutable_prepare_execute();
  public:

  // required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Mysqlx::Cursor::Open_OneOfMessage_Type type() const;
  void set_type(::Mysqlx::Cursor::Open_OneOfMessage_Type value);
  private:
  ::Mysqlx::Cursor::Open_OneOfMessage_Type _internal_type() const;
  void _internal_set_type(::Mysqlx::Cursor::Open_OneOfMessage_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Cursor.Open.OneOfMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Mysqlx::Prepare::Execute* prepare_execute_;
  int type_;
  friend struct ::TableStruct_mysqlx_5fcursor_2eproto;
};
// -------------------------------------------------------------------

class Open :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Cursor.Open) */ {
 public:
  Open();
  virtual ~Open();

  Open(const Open& from);
  Open(Open&& from) noexcept
    : Open() {
    *this = ::std::move(from);
  }

  inline Open& operator=(const Open& from) {
    CopyFrom(from);
    return *this;
  }
  inline Open& operator=(Open&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Open& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Open* internal_default_instance() {
    return reinterpret_cast<const Open*>(
               &_Open_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Open& a, Open& b) {
    a.Swap(&b);
  }
  inline void Swap(Open* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Open* New() const final {
    return CreateMaybeMessage<Open>(nullptr);
  }

  Open* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Open>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Open& from);
  void MergeFrom(const Open& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Open* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Cursor.Open";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Open_OneOfMessage OneOfMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kStmtFieldNumber = 4,
    kCursorIdFieldNumber = 1,
    kFetchRowsFieldNumber = 5,
  };
  // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
  bool has_stmt() const;
  private:
  bool _internal_has_stmt() const;
  public:
  void clear_stmt();
  const ::Mysqlx::Cursor::Open_OneOfMessage& stmt() const;
  ::Mysqlx::Cursor::Open_OneOfMessage* release_stmt();
  ::Mysqlx::Cursor::Open_OneOfMessage* mutable_stmt();
  void set_allocated_stmt(::Mysqlx::Cursor::Open_OneOfMessage* stmt);
  private:
  const ::Mysqlx::Cursor::Open_OneOfMessage& _internal_stmt() const;
  ::Mysqlx::Cursor::Open_OneOfMessage* _internal_mutable_stmt();
  public:

  // required uint32 cursor_id = 1;
  bool has_cursor_id() const;
  private:
  bool _internal_has_cursor_id() const;
  public:
  void clear_cursor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_id() const;
  void set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cursor_id() const;
  void _internal_set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 fetch_rows = 5;
  bool has_fetch_rows() const;
  private:
  bool _internal_has_fetch_rows() const;
  public:
  void clear_fetch_rows();
  ::PROTOBUF_NAMESPACE_ID::uint64 fetch_rows() const;
  void set_fetch_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fetch_rows() const;
  void _internal_set_fetch_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Cursor.Open)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Mysqlx::Cursor::Open_OneOfMessage* stmt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fetch_rows_;
  friend struct ::TableStruct_mysqlx_5fcursor_2eproto;
};
// -------------------------------------------------------------------

class Fetch :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Cursor.Fetch) */ {
 public:
  Fetch();
  virtual ~Fetch();

  Fetch(const Fetch& from);
  Fetch(Fetch&& from) noexcept
    : Fetch() {
    *this = ::std::move(from);
  }

  inline Fetch& operator=(const Fetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fetch& operator=(Fetch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Fetch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fetch* internal_default_instance() {
    return reinterpret_cast<const Fetch*>(
               &_Fetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Fetch& a, Fetch& b) {
    a.Swap(&b);
  }
  inline void Swap(Fetch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fetch* New() const final {
    return CreateMaybeMessage<Fetch>(nullptr);
  }

  Fetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fetch>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Fetch& from);
  void MergeFrom(const Fetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Fetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Cursor.Fetch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorIdFieldNumber = 1,
    kFetchRowsFieldNumber = 5,
  };
  // required uint32 cursor_id = 1;
  bool has_cursor_id() const;
  private:
  bool _internal_has_cursor_id() const;
  public:
  void clear_cursor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_id() const;
  void set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cursor_id() const;
  void _internal_set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 fetch_rows = 5;
  bool has_fetch_rows() const;
  private:
  bool _internal_has_fetch_rows() const;
  public:
  void clear_fetch_rows();
  ::PROTOBUF_NAMESPACE_ID::uint64 fetch_rows() const;
  void set_fetch_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fetch_rows() const;
  void _internal_set_fetch_rows(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Cursor.Fetch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fetch_rows_;
  friend struct ::TableStruct_mysqlx_5fcursor_2eproto;
};
// -------------------------------------------------------------------

class Close :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Cursor.Close) */ {
 public:
  Close();
  virtual ~Close();

  Close(const Close& from);
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close& operator=(Close&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Close& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }
  inline void Swap(Close* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Close* New() const final {
    return CreateMaybeMessage<Close>(nullptr);
  }

  Close* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Close* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Cursor.Close";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorIdFieldNumber = 1,
  };
  // required uint32 cursor_id = 1;
  bool has_cursor_id() const;
  private:
  bool _internal_has_cursor_id() const;
  public:
  void clear_cursor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_id() const;
  void set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cursor_id() const;
  void _internal_set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Cursor.Close)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cursor_id_;
  friend struct ::TableStruct_mysqlx_5fcursor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Open_OneOfMessage

// required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;
inline bool Open_OneOfMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Open_OneOfMessage::has_type() const {
  return _internal_has_type();
}
inline void Open_OneOfMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Mysqlx::Cursor::Open_OneOfMessage_Type Open_OneOfMessage::_internal_type() const {
  return static_cast< ::Mysqlx::Cursor::Open_OneOfMessage_Type >(type_);
}
inline ::Mysqlx::Cursor::Open_OneOfMessage_Type Open_OneOfMessage::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Cursor.Open.OneOfMessage.type)
  return _internal_type();
}
inline void Open_OneOfMessage::_internal_set_type(::Mysqlx::Cursor::Open_OneOfMessage_Type value) {
  assert(::Mysqlx::Cursor::Open_OneOfMessage_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Open_OneOfMessage::set_type(::Mysqlx::Cursor::Open_OneOfMessage_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Cursor.Open.OneOfMessage.type)
}

// optional .Mysqlx.Prepare.Execute prepare_execute = 2;
inline bool Open_OneOfMessage::_internal_has_prepare_execute() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || prepare_execute_ != nullptr);
  return value;
}
inline bool Open_OneOfMessage::has_prepare_execute() const {
  return _internal_has_prepare_execute();
}
inline const ::Mysqlx::Prepare::Execute& Open_OneOfMessage::_internal_prepare_execute() const {
  const ::Mysqlx::Prepare::Execute* p = prepare_execute_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Prepare::Execute*>(
      &::Mysqlx::Prepare::_Execute_default_instance_);
}
inline const ::Mysqlx::Prepare::Execute& Open_OneOfMessage::prepare_execute() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Cursor.Open.OneOfMessage.prepare_execute)
  return _internal_prepare_execute();
}
inline ::Mysqlx::Prepare::Execute* Open_OneOfMessage::release_prepare_execute() {
  // @@protoc_insertion_point(field_release:Mysqlx.Cursor.Open.OneOfMessage.prepare_execute)
  _has_bits_[0] &= ~0x00000001u;
  ::Mysqlx::Prepare::Execute* temp = prepare_execute_;
  prepare_execute_ = nullptr;
  return temp;
}
inline ::Mysqlx::Prepare::Execute* Open_OneOfMessage::_internal_mutable_prepare_execute() {
  _has_bits_[0] |= 0x00000001u;
  if (prepare_execute_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Prepare::Execute>(GetArenaNoVirtual());
    prepare_execute_ = p;
  }
  return prepare_execute_;
}
inline ::Mysqlx::Prepare::Execute* Open_OneOfMessage::mutable_prepare_execute() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Cursor.Open.OneOfMessage.prepare_execute)
  return _internal_mutable_prepare_execute();
}
inline void Open_OneOfMessage::set_allocated_prepare_execute(::Mysqlx::Prepare::Execute* prepare_execute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prepare_execute_);
  }
  if (prepare_execute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prepare_execute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare_execute, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prepare_execute_ = prepare_execute;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Cursor.Open.OneOfMessage.prepare_execute)
}

// -------------------------------------------------------------------

// Open

// required uint32 cursor_id = 1;
inline bool Open::_internal_has_cursor_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Open::has_cursor_id() const {
  return _internal_has_cursor_id();
}
inline void Open::clear_cursor_id() {
  cursor_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Open::_internal_cursor_id() const {
  return cursor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Open::cursor_id() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Cursor.Open.cursor_id)
  return _internal_cursor_id();
}
inline void Open::_internal_set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cursor_id_ = value;
}
inline void Open::set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cursor_id(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Cursor.Open.cursor_id)
}

// required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
inline bool Open::_internal_has_stmt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stmt_ != nullptr);
  return value;
}
inline bool Open::has_stmt() const {
  return _internal_has_stmt();
}
inline void Open::clear_stmt() {
  if (stmt_ != nullptr) stmt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Mysqlx::Cursor::Open_OneOfMessage& Open::_internal_stmt() const {
  const ::Mysqlx::Cursor::Open_OneOfMessage* p = stmt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Cursor::Open_OneOfMessage*>(
      &::Mysqlx::Cursor::_Open_OneOfMessage_default_instance_);
}
inline const ::Mysqlx::Cursor::Open_OneOfMessage& Open::stmt() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Cursor.Open.stmt)
  return _internal_stmt();
}
inline ::Mysqlx::Cursor::Open_OneOfMessage* Open::release_stmt() {
  // @@protoc_insertion_point(field_release:Mysqlx.Cursor.Open.stmt)
  _has_bits_[0] &= ~0x00000001u;
  ::Mysqlx::Cursor::Open_OneOfMessage* temp = stmt_;
  stmt_ = nullptr;
  return temp;
}
inline ::Mysqlx::Cursor::Open_OneOfMessage* Open::_internal_mutable_stmt() {
  _has_bits_[0] |= 0x00000001u;
  if (stmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Cursor::Open_OneOfMessage>(GetArenaNoVirtual());
    stmt_ = p;
  }
  return stmt_;
}
inline ::Mysqlx::Cursor::Open_OneOfMessage* Open::mutable_stmt() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Cursor.Open.stmt)
  return _internal_mutable_stmt();
}
inline void Open::set_allocated_stmt(::Mysqlx::Cursor::Open_OneOfMessage* stmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stmt_;
  }
  if (stmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stmt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stmt_ = stmt;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Cursor.Open.stmt)
}

// optional uint64 fetch_rows = 5;
inline bool Open::_internal_has_fetch_rows() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Open::has_fetch_rows() const {
  return _internal_has_fetch_rows();
}
inline void Open::clear_fetch_rows() {
  fetch_rows_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Open::_internal_fetch_rows() const {
  return fetch_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Open::fetch_rows() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Cursor.Open.fetch_rows)
  return _internal_fetch_rows();
}
inline void Open::_internal_set_fetch_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  fetch_rows_ = value;
}
inline void Open::set_fetch_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fetch_rows(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Cursor.Open.fetch_rows)
}

// -------------------------------------------------------------------

// Fetch

// required uint32 cursor_id = 1;
inline bool Fetch::_internal_has_cursor_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fetch::has_cursor_id() const {
  return _internal_has_cursor_id();
}
inline void Fetch::clear_cursor_id() {
  cursor_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fetch::_internal_cursor_id() const {
  return cursor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fetch::cursor_id() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Cursor.Fetch.cursor_id)
  return _internal_cursor_id();
}
inline void Fetch::_internal_set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  cursor_id_ = value;
}
inline void Fetch::set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cursor_id(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Cursor.Fetch.cursor_id)
}

// optional uint64 fetch_rows = 5;
inline bool Fetch::_internal_has_fetch_rows() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Fetch::has_fetch_rows() const {
  return _internal_has_fetch_rows();
}
inline void Fetch::clear_fetch_rows() {
  fetch_rows_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fetch::_internal_fetch_rows() const {
  return fetch_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fetch::fetch_rows() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Cursor.Fetch.fetch_rows)
  return _internal_fetch_rows();
}
inline void Fetch::_internal_set_fetch_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  fetch_rows_ = value;
}
inline void Fetch::set_fetch_rows(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fetch_rows(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Cursor.Fetch.fetch_rows)
}

// -------------------------------------------------------------------

// Close

// required uint32 cursor_id = 1;
inline bool Close::_internal_has_cursor_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Close::has_cursor_id() const {
  return _internal_has_cursor_id();
}
inline void Close::clear_cursor_id() {
  cursor_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Close::_internal_cursor_id() const {
  return cursor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Close::cursor_id() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Cursor.Close.cursor_id)
  return _internal_cursor_id();
}
inline void Close::_internal_set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  cursor_id_ = value;
}
inline void Close::set_cursor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cursor_id(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Cursor.Close.cursor_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cursor
}  // namespace Mysqlx

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Mysqlx::Cursor::Open_OneOfMessage_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fcursor_2eproto
