// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fconnection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fconnection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "mysqlx_datatypes.pb.h"
#include "mysqlx.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysqlx_5fconnection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysqlx_5fconnection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Mysqlx {
namespace Connection {
class Capabilities;
class CapabilitiesDefaultTypeInternal;
extern CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
class CapabilitiesGet;
class CapabilitiesGetDefaultTypeInternal;
extern CapabilitiesGetDefaultTypeInternal _CapabilitiesGet_default_instance_;
class CapabilitiesSet;
class CapabilitiesSetDefaultTypeInternal;
extern CapabilitiesSetDefaultTypeInternal _CapabilitiesSet_default_instance_;
class Capability;
class CapabilityDefaultTypeInternal;
extern CapabilityDefaultTypeInternal _Capability_default_instance_;
class Close;
class CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class Compression;
class CompressionDefaultTypeInternal;
extern CompressionDefaultTypeInternal _Compression_default_instance_;
}  // namespace Connection
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> ::Mysqlx::Connection::Capabilities* Arena::CreateMaybeMessage<::Mysqlx::Connection::Capabilities>(Arena*);
template<> ::Mysqlx::Connection::CapabilitiesGet* Arena::CreateMaybeMessage<::Mysqlx::Connection::CapabilitiesGet>(Arena*);
template<> ::Mysqlx::Connection::CapabilitiesSet* Arena::CreateMaybeMessage<::Mysqlx::Connection::CapabilitiesSet>(Arena*);
template<> ::Mysqlx::Connection::Capability* Arena::CreateMaybeMessage<::Mysqlx::Connection::Capability>(Arena*);
template<> ::Mysqlx::Connection::Close* Arena::CreateMaybeMessage<::Mysqlx::Connection::Close>(Arena*);
template<> ::Mysqlx::Connection::Compression* Arena::CreateMaybeMessage<::Mysqlx::Connection::Compression>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mysqlx {
namespace Connection {

// ===================================================================

class Capability :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.Capability) */ {
 public:
  Capability();
  virtual ~Capability();

  Capability(const Capability& from);
  Capability(Capability&& from) noexcept
    : Capability() {
    *this = ::std::move(from);
  }

  inline Capability& operator=(const Capability& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capability& operator=(Capability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Capability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capability* internal_default_instance() {
    return reinterpret_cast<const Capability*>(
               &_Capability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Capability& a, Capability& b) {
    a.Swap(&b);
  }
  inline void Swap(Capability* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Capability* New() const final {
    return CreateMaybeMessage<Capability>(nullptr);
  }

  Capability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Capability>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Capability& from);
  void MergeFrom(const Capability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Capability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Connection.Capability";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .Mysqlx.Datatypes.Any value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Mysqlx::Datatypes::Any& value() const;
  ::Mysqlx::Datatypes::Any* release_value();
  ::Mysqlx::Datatypes::Any* mutable_value();
  void set_allocated_value(::Mysqlx::Datatypes::Any* value);
  private:
  const ::Mysqlx::Datatypes::Any& _internal_value() const;
  ::Mysqlx::Datatypes::Any* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.Capability)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Mysqlx::Datatypes::Any* value_;
  friend struct ::TableStruct_mysqlx_5fconnection_2eproto;
};
// -------------------------------------------------------------------

class Capabilities :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.Capabilities) */ {
 public:
  Capabilities();
  virtual ~Capabilities();

  Capabilities(const Capabilities& from);
  Capabilities(Capabilities&& from) noexcept
    : Capabilities() {
    *this = ::std::move(from);
  }

  inline Capabilities& operator=(const Capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capabilities& operator=(Capabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Capabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capabilities* internal_default_instance() {
    return reinterpret_cast<const Capabilities*>(
               &_Capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Capabilities& a, Capabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(Capabilities* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Capabilities* New() const final {
    return CreateMaybeMessage<Capabilities>(nullptr);
  }

  Capabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Capabilities>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Capabilities& from);
  void MergeFrom(const Capabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Capabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Connection.Capabilities";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilitiesFieldNumber = 1,
  };
  // repeated .Mysqlx.Connection.Capability capabilities = 1;
  int capabilities_size() const;
  private:
  int _internal_capabilities_size() const;
  public:
  void clear_capabilities();
  ::Mysqlx::Connection::Capability* mutable_capabilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Connection::Capability >*
      mutable_capabilities();
  private:
  const ::Mysqlx::Connection::Capability& _internal_capabilities(int index) const;
  ::Mysqlx::Connection::Capability* _internal_add_capabilities();
  public:
  const ::Mysqlx::Connection::Capability& capabilities(int index) const;
  ::Mysqlx::Connection::Capability* add_capabilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Connection::Capability >&
      capabilities() const;

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.Capabilities)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Connection::Capability > capabilities_;
  friend struct ::TableStruct_mysqlx_5fconnection_2eproto;
};
// -------------------------------------------------------------------

class CapabilitiesGet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.CapabilitiesGet) */ {
 public:
  CapabilitiesGet();
  virtual ~CapabilitiesGet();

  CapabilitiesGet(const CapabilitiesGet& from);
  CapabilitiesGet(CapabilitiesGet&& from) noexcept
    : CapabilitiesGet() {
    *this = ::std::move(from);
  }

  inline CapabilitiesGet& operator=(const CapabilitiesGet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilitiesGet& operator=(CapabilitiesGet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CapabilitiesGet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapabilitiesGet* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesGet*>(
               &_CapabilitiesGet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CapabilitiesGet& a, CapabilitiesGet& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilitiesGet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapabilitiesGet* New() const final {
    return CreateMaybeMessage<CapabilitiesGet>(nullptr);
  }

  CapabilitiesGet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapabilitiesGet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CapabilitiesGet& from);
  void MergeFrom(const CapabilitiesGet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CapabilitiesGet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Connection.CapabilitiesGet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.CapabilitiesGet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlx_5fconnection_2eproto;
};
// -------------------------------------------------------------------

class CapabilitiesSet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.CapabilitiesSet) */ {
 public:
  CapabilitiesSet();
  virtual ~CapabilitiesSet();

  CapabilitiesSet(const CapabilitiesSet& from);
  CapabilitiesSet(CapabilitiesSet&& from) noexcept
    : CapabilitiesSet() {
    *this = ::std::move(from);
  }

  inline CapabilitiesSet& operator=(const CapabilitiesSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilitiesSet& operator=(CapabilitiesSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CapabilitiesSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapabilitiesSet* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesSet*>(
               &_CapabilitiesSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CapabilitiesSet& a, CapabilitiesSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilitiesSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapabilitiesSet* New() const final {
    return CreateMaybeMessage<CapabilitiesSet>(nullptr);
  }

  CapabilitiesSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapabilitiesSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CapabilitiesSet& from);
  void MergeFrom(const CapabilitiesSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CapabilitiesSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Connection.CapabilitiesSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilitiesFieldNumber = 1,
  };
  // required .Mysqlx.Connection.Capabilities capabilities = 1;
  bool has_capabilities() const;
  private:
  bool _internal_has_capabilities() const;
  public:
  void clear_capabilities();
  const ::Mysqlx::Connection::Capabilities& capabilities() const;
  ::Mysqlx::Connection::Capabilities* release_capabilities();
  ::Mysqlx::Connection::Capabilities* mutable_capabilities();
  void set_allocated_capabilities(::Mysqlx::Connection::Capabilities* capabilities);
  private:
  const ::Mysqlx::Connection::Capabilities& _internal_capabilities() const;
  ::Mysqlx::Connection::Capabilities* _internal_mutable_capabilities();
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.CapabilitiesSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Mysqlx::Connection::Capabilities* capabilities_;
  friend struct ::TableStruct_mysqlx_5fconnection_2eproto;
};
// -------------------------------------------------------------------

class Close :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.Close) */ {
 public:
  Close();
  virtual ~Close();

  Close(const Close& from);
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close& operator=(Close&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Close& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }
  inline void Swap(Close* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Close* New() const final {
    return CreateMaybeMessage<Close>(nullptr);
  }

  Close* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Close* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Connection.Close";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.Close)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlx_5fconnection_2eproto;
};
// -------------------------------------------------------------------

class Compression :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Connection.Compression) */ {
 public:
  Compression();
  virtual ~Compression();

  Compression(const Compression& from);
  Compression(Compression&& from) noexcept
    : Compression() {
    *this = ::std::move(from);
  }

  inline Compression& operator=(const Compression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Compression& operator=(Compression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Compression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Compression* internal_default_instance() {
    return reinterpret_cast<const Compression*>(
               &_Compression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Compression& a, Compression& b) {
    a.Swap(&b);
  }
  inline void Swap(Compression* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Compression* New() const final {
    return CreateMaybeMessage<Compression>(nullptr);
  }

  Compression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Compression>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Compression& from);
  void MergeFrom(const Compression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Compression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Connection.Compression";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 4,
    kUncompressedSizeFieldNumber = 1,
    kServerMessagesFieldNumber = 2,
    kClientMessagesFieldNumber = 3,
  };
  // required bytes payload = 4;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional uint64 uncompressed_size = 1;
  bool has_uncompressed_size() const;
  private:
  bool _internal_has_uncompressed_size() const;
  public:
  void clear_uncompressed_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 uncompressed_size() const;
  void set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uncompressed_size() const;
  void _internal_set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .Mysqlx.ServerMessages.Type server_messages = 2;
  bool has_server_messages() const;
  private:
  bool _internal_has_server_messages() const;
  public:
  void clear_server_messages();
  ::Mysqlx::ServerMessages_Type server_messages() const;
  void set_server_messages(::Mysqlx::ServerMessages_Type value);
  private:
  ::Mysqlx::ServerMessages_Type _internal_server_messages() const;
  void _internal_set_server_messages(::Mysqlx::ServerMessages_Type value);
  public:

  // optional .Mysqlx.ClientMessages.Type client_messages = 3;
  bool has_client_messages() const;
  private:
  bool _internal_has_client_messages() const;
  public:
  void clear_client_messages();
  ::Mysqlx::ClientMessages_Type client_messages() const;
  void set_client_messages(::Mysqlx::ClientMessages_Type value);
  private:
  ::Mysqlx::ClientMessages_Type _internal_client_messages() const;
  void _internal_set_client_messages(::Mysqlx::ClientMessages_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Connection.Compression)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uncompressed_size_;
  int server_messages_;
  int client_messages_;
  friend struct ::TableStruct_mysqlx_5fconnection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Capability

// required string name = 1;
inline bool Capability::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Capability::has_name() const {
  return _internal_has_name();
}
inline void Capability::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Capability::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capability.name)
  return _internal_name();
}
inline void Capability::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Connection.Capability.name)
}
inline std::string* Capability::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capability.name)
  return _internal_mutable_name();
}
inline const std::string& Capability::_internal_name() const {
  return name_.GetNoArena();
}
inline void Capability::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Capability::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Connection.Capability.name)
}
inline void Capability::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Connection.Capability.name)
}
inline void Capability::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Connection.Capability.name)
}
inline std::string* Capability::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Capability::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.Capability.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Capability::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.Capability.name)
}

// required .Mysqlx.Datatypes.Any value = 2;
inline bool Capability::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool Capability::has_value() const {
  return _internal_has_value();
}
inline const ::Mysqlx::Datatypes::Any& Capability::_internal_value() const {
  const ::Mysqlx::Datatypes::Any* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Datatypes::Any*>(
      &::Mysqlx::Datatypes::_Any_default_instance_);
}
inline const ::Mysqlx::Datatypes::Any& Capability::value() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capability.value)
  return _internal_value();
}
inline ::Mysqlx::Datatypes::Any* Capability::release_value() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.Capability.value)
  _has_bits_[0] &= ~0x00000002u;
  ::Mysqlx::Datatypes::Any* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::Mysqlx::Datatypes::Any* Capability::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Datatypes::Any>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::Mysqlx::Datatypes::Any* Capability::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capability.value)
  return _internal_mutable_value();
}
inline void Capability::set_allocated_value(::Mysqlx::Datatypes::Any* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.Capability.value)
}

// -------------------------------------------------------------------

// Capabilities

// repeated .Mysqlx.Connection.Capability capabilities = 1;
inline int Capabilities::_internal_capabilities_size() const {
  return capabilities_.size();
}
inline int Capabilities::capabilities_size() const {
  return _internal_capabilities_size();
}
inline void Capabilities::clear_capabilities() {
  capabilities_.Clear();
}
inline ::Mysqlx::Connection::Capability* Capabilities::mutable_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Connection::Capability >*
Capabilities::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Connection.Capabilities.capabilities)
  return &capabilities_;
}
inline const ::Mysqlx::Connection::Capability& Capabilities::_internal_capabilities(int index) const {
  return capabilities_.Get(index);
}
inline const ::Mysqlx::Connection::Capability& Capabilities::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Capabilities.capabilities)
  return _internal_capabilities(index);
}
inline ::Mysqlx::Connection::Capability* Capabilities::_internal_add_capabilities() {
  return capabilities_.Add();
}
inline ::Mysqlx::Connection::Capability* Capabilities::add_capabilities() {
  // @@protoc_insertion_point(field_add:Mysqlx.Connection.Capabilities.capabilities)
  return _internal_add_capabilities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Mysqlx::Connection::Capability >&
Capabilities::capabilities() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Connection.Capabilities.capabilities)
  return capabilities_;
}

// -------------------------------------------------------------------

// CapabilitiesGet

// -------------------------------------------------------------------

// CapabilitiesSet

// required .Mysqlx.Connection.Capabilities capabilities = 1;
inline bool CapabilitiesSet::_internal_has_capabilities() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || capabilities_ != nullptr);
  return value;
}
inline bool CapabilitiesSet::has_capabilities() const {
  return _internal_has_capabilities();
}
inline void CapabilitiesSet::clear_capabilities() {
  if (capabilities_ != nullptr) capabilities_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Mysqlx::Connection::Capabilities& CapabilitiesSet::_internal_capabilities() const {
  const ::Mysqlx::Connection::Capabilities* p = capabilities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Mysqlx::Connection::Capabilities*>(
      &::Mysqlx::Connection::_Capabilities_default_instance_);
}
inline const ::Mysqlx::Connection::Capabilities& CapabilitiesSet::capabilities() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.CapabilitiesSet.capabilities)
  return _internal_capabilities();
}
inline ::Mysqlx::Connection::Capabilities* CapabilitiesSet::release_capabilities() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.CapabilitiesSet.capabilities)
  _has_bits_[0] &= ~0x00000001u;
  ::Mysqlx::Connection::Capabilities* temp = capabilities_;
  capabilities_ = nullptr;
  return temp;
}
inline ::Mysqlx::Connection::Capabilities* CapabilitiesSet::_internal_mutable_capabilities() {
  _has_bits_[0] |= 0x00000001u;
  if (capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::Mysqlx::Connection::Capabilities>(GetArenaNoVirtual());
    capabilities_ = p;
  }
  return capabilities_;
}
inline ::Mysqlx::Connection::Capabilities* CapabilitiesSet::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.CapabilitiesSet.capabilities)
  return _internal_mutable_capabilities();
}
inline void CapabilitiesSet::set_allocated_capabilities(::Mysqlx::Connection::Capabilities* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete capabilities_;
  }
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.CapabilitiesSet.capabilities)
}

// -------------------------------------------------------------------

// Close

// -------------------------------------------------------------------

// Compression

// optional uint64 uncompressed_size = 1;
inline bool Compression::_internal_has_uncompressed_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Compression::has_uncompressed_size() const {
  return _internal_has_uncompressed_size();
}
inline void Compression::clear_uncompressed_size() {
  uncompressed_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Compression::_internal_uncompressed_size() const {
  return uncompressed_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Compression::uncompressed_size() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Compression.uncompressed_size)
  return _internal_uncompressed_size();
}
inline void Compression::_internal_set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  uncompressed_size_ = value;
}
inline void Compression::set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uncompressed_size(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Connection.Compression.uncompressed_size)
}

// optional .Mysqlx.ServerMessages.Type server_messages = 2;
inline bool Compression::_internal_has_server_messages() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Compression::has_server_messages() const {
  return _internal_has_server_messages();
}
inline void Compression::clear_server_messages() {
  server_messages_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Mysqlx::ServerMessages_Type Compression::_internal_server_messages() const {
  return static_cast< ::Mysqlx::ServerMessages_Type >(server_messages_);
}
inline ::Mysqlx::ServerMessages_Type Compression::server_messages() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Compression.server_messages)
  return _internal_server_messages();
}
inline void Compression::_internal_set_server_messages(::Mysqlx::ServerMessages_Type value) {
  assert(::Mysqlx::ServerMessages_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  server_messages_ = value;
}
inline void Compression::set_server_messages(::Mysqlx::ServerMessages_Type value) {
  _internal_set_server_messages(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Connection.Compression.server_messages)
}

// optional .Mysqlx.ClientMessages.Type client_messages = 3;
inline bool Compression::_internal_has_client_messages() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Compression::has_client_messages() const {
  return _internal_has_client_messages();
}
inline void Compression::clear_client_messages() {
  client_messages_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Mysqlx::ClientMessages_Type Compression::_internal_client_messages() const {
  return static_cast< ::Mysqlx::ClientMessages_Type >(client_messages_);
}
inline ::Mysqlx::ClientMessages_Type Compression::client_messages() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Compression.client_messages)
  return _internal_client_messages();
}
inline void Compression::_internal_set_client_messages(::Mysqlx::ClientMessages_Type value) {
  assert(::Mysqlx::ClientMessages_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  client_messages_ = value;
}
inline void Compression::set_client_messages(::Mysqlx::ClientMessages_Type value) {
  _internal_set_client_messages(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Connection.Compression.client_messages)
}

// required bytes payload = 4;
inline bool Compression::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Compression::has_payload() const {
  return _internal_has_payload();
}
inline void Compression::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Compression::payload() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Connection.Compression.payload)
  return _internal_payload();
}
inline void Compression::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Connection.Compression.payload)
}
inline std::string* Compression::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Connection.Compression.payload)
  return _internal_mutable_payload();
}
inline const std::string& Compression::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void Compression::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Compression::set_payload(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Connection.Compression.payload)
}
inline void Compression::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Connection.Compression.payload)
}
inline void Compression::set_payload(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Connection.Compression.payload)
}
inline std::string* Compression::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Compression::release_payload() {
  // @@protoc_insertion_point(field_release:Mysqlx.Connection.Compression.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return payload_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Compression::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Connection.Compression.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Connection
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fconnection_2eproto
