// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_notice.proto

#include "mysqlx_notice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fdatatypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Scalar_mysqlx_5fdatatypes_2eproto;
namespace Mysqlx {
namespace Notice {
class FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
class WarningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Warning> _instance;
} _Warning_default_instance_;
class SessionVariableChangedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionVariableChanged> _instance;
} _SessionVariableChanged_default_instance_;
class SessionStateChangedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionStateChanged> _instance;
} _SessionStateChanged_default_instance_;
class GroupReplicationStateChangedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupReplicationStateChanged> _instance;
} _GroupReplicationStateChanged_default_instance_;
}  // namespace Notice
}  // namespace Mysqlx
static void InitDefaultsscc_info_Frame_mysqlx_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_Frame_default_instance_;
    new (ptr) ::Mysqlx::Notice::Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Frame_mysqlx_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Frame_mysqlx_5fnotice_2eproto}, {}};

static void InitDefaultsscc_info_GroupReplicationStateChanged_mysqlx_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_GroupReplicationStateChanged_default_instance_;
    new (ptr) ::Mysqlx::Notice::GroupReplicationStateChanged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::GroupReplicationStateChanged::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupReplicationStateChanged_mysqlx_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupReplicationStateChanged_mysqlx_5fnotice_2eproto}, {}};

static void InitDefaultsscc_info_SessionStateChanged_mysqlx_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_SessionStateChanged_default_instance_;
    new (ptr) ::Mysqlx::Notice::SessionStateChanged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::SessionStateChanged::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionStateChanged_mysqlx_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionStateChanged_mysqlx_5fnotice_2eproto}, {
      &scc_info_Scalar_mysqlx_5fdatatypes_2eproto.base,}};

static void InitDefaultsscc_info_SessionVariableChanged_mysqlx_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_SessionVariableChanged_default_instance_;
    new (ptr) ::Mysqlx::Notice::SessionVariableChanged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::SessionVariableChanged::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionVariableChanged_mysqlx_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionVariableChanged_mysqlx_5fnotice_2eproto}, {
      &scc_info_Scalar_mysqlx_5fdatatypes_2eproto.base,}};

static void InitDefaultsscc_info_Warning_mysqlx_5fnotice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_Warning_default_instance_;
    new (ptr) ::Mysqlx::Notice::Warning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::Warning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Warning_mysqlx_5fnotice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Warning_mysqlx_5fnotice_2eproto}, {}};

namespace Mysqlx {
namespace Notice {
bool Frame_Scope_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Frame_Scope_strings[2] = {};

static const char Frame_Scope_names[] =
  "GLOBAL"
  "LOCAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Frame_Scope_entries[] = {
  { {Frame_Scope_names + 0, 6}, 1 },
  { {Frame_Scope_names + 6, 5}, 2 },
};

static const int Frame_Scope_entries_by_number[] = {
  0, // 1 -> GLOBAL
  1, // 2 -> LOCAL
};

const std::string& Frame_Scope_Name(
    Frame_Scope value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Frame_Scope_entries,
          Frame_Scope_entries_by_number,
          2, Frame_Scope_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Frame_Scope_entries,
      Frame_Scope_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Frame_Scope_strings[idx].get();
}
bool Frame_Scope_Parse(
    const std::string& name, Frame_Scope* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Frame_Scope_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Frame_Scope>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Frame_Scope Frame::GLOBAL;
constexpr Frame_Scope Frame::LOCAL;
constexpr Frame_Scope Frame::Scope_MIN;
constexpr Frame_Scope Frame::Scope_MAX;
constexpr int Frame::Scope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Frame_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Frame_Type_strings[4] = {};

static const char Frame_Type_names[] =
  "GROUP_REPLICATION_STATE_CHANGED"
  "SESSION_STATE_CHANGED"
  "SESSION_VARIABLE_CHANGED"
  "WARNING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Frame_Type_entries[] = {
  { {Frame_Type_names + 0, 31}, 4 },
  { {Frame_Type_names + 31, 21}, 3 },
  { {Frame_Type_names + 52, 24}, 2 },
  { {Frame_Type_names + 76, 7}, 1 },
};

static const int Frame_Type_entries_by_number[] = {
  3, // 1 -> WARNING
  2, // 2 -> SESSION_VARIABLE_CHANGED
  1, // 3 -> SESSION_STATE_CHANGED
  0, // 4 -> GROUP_REPLICATION_STATE_CHANGED
};

const std::string& Frame_Type_Name(
    Frame_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Frame_Type_entries,
          Frame_Type_entries_by_number,
          4, Frame_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Frame_Type_entries,
      Frame_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Frame_Type_strings[idx].get();
}
bool Frame_Type_Parse(
    const std::string& name, Frame_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Frame_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Frame_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Frame_Type Frame::WARNING;
constexpr Frame_Type Frame::SESSION_VARIABLE_CHANGED;
constexpr Frame_Type Frame::SESSION_STATE_CHANGED;
constexpr Frame_Type Frame::GROUP_REPLICATION_STATE_CHANGED;
constexpr Frame_Type Frame::Type_MIN;
constexpr Frame_Type Frame::Type_MAX;
constexpr int Frame::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Warning_Level_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Warning_Level_strings[3] = {};

static const char Warning_Level_names[] =
  "ERROR"
  "NOTE"
  "WARNING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Warning_Level_entries[] = {
  { {Warning_Level_names + 0, 5}, 3 },
  { {Warning_Level_names + 5, 4}, 1 },
  { {Warning_Level_names + 9, 7}, 2 },
};

static const int Warning_Level_entries_by_number[] = {
  1, // 1 -> NOTE
  2, // 2 -> WARNING
  0, // 3 -> ERROR
};

const std::string& Warning_Level_Name(
    Warning_Level value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Warning_Level_entries,
          Warning_Level_entries_by_number,
          3, Warning_Level_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Warning_Level_entries,
      Warning_Level_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Warning_Level_strings[idx].get();
}
bool Warning_Level_Parse(
    const std::string& name, Warning_Level* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Warning_Level_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Warning_Level>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Warning_Level Warning::NOTE;
constexpr Warning_Level Warning::WARNING;
constexpr Warning_Level Warning::ERROR;
constexpr Warning_Level Warning::Level_MIN;
constexpr Warning_Level Warning::Level_MAX;
constexpr int Warning::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SessionStateChanged_Parameter_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SessionStateChanged_Parameter_strings[11] = {};

static const char SessionStateChanged_Parameter_names[] =
  "ACCOUNT_EXPIRED"
  "CLIENT_ID_ASSIGNED"
  "CURRENT_SCHEMA"
  "GENERATED_DOCUMENT_IDS"
  "GENERATED_INSERT_ID"
  "PRODUCED_MESSAGE"
  "ROWS_AFFECTED"
  "ROWS_FOUND"
  "ROWS_MATCHED"
  "TRX_COMMITTED"
  "TRX_ROLLEDBACK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SessionStateChanged_Parameter_entries[] = {
  { {SessionStateChanged_Parameter_names + 0, 15}, 2 },
  { {SessionStateChanged_Parameter_names + 15, 18}, 11 },
  { {SessionStateChanged_Parameter_names + 33, 14}, 1 },
  { {SessionStateChanged_Parameter_names + 47, 22}, 12 },
  { {SessionStateChanged_Parameter_names + 69, 19}, 3 },
  { {SessionStateChanged_Parameter_names + 88, 16}, 10 },
  { {SessionStateChanged_Parameter_names + 104, 13}, 4 },
  { {SessionStateChanged_Parameter_names + 117, 10}, 5 },
  { {SessionStateChanged_Parameter_names + 127, 12}, 6 },
  { {SessionStateChanged_Parameter_names + 139, 13}, 7 },
  { {SessionStateChanged_Parameter_names + 152, 14}, 9 },
};

static const int SessionStateChanged_Parameter_entries_by_number[] = {
  2, // 1 -> CURRENT_SCHEMA
  0, // 2 -> ACCOUNT_EXPIRED
  4, // 3 -> GENERATED_INSERT_ID
  6, // 4 -> ROWS_AFFECTED
  7, // 5 -> ROWS_FOUND
  8, // 6 -> ROWS_MATCHED
  9, // 7 -> TRX_COMMITTED
  10, // 9 -> TRX_ROLLEDBACK
  5, // 10 -> PRODUCED_MESSAGE
  1, // 11 -> CLIENT_ID_ASSIGNED
  3, // 12 -> GENERATED_DOCUMENT_IDS
};

const std::string& SessionStateChanged_Parameter_Name(
    SessionStateChanged_Parameter value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SessionStateChanged_Parameter_entries,
          SessionStateChanged_Parameter_entries_by_number,
          11, SessionStateChanged_Parameter_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SessionStateChanged_Parameter_entries,
      SessionStateChanged_Parameter_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SessionStateChanged_Parameter_strings[idx].get();
}
bool SessionStateChanged_Parameter_Parse(
    const std::string& name, SessionStateChanged_Parameter* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SessionStateChanged_Parameter_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<SessionStateChanged_Parameter>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SessionStateChanged_Parameter SessionStateChanged::CURRENT_SCHEMA;
constexpr SessionStateChanged_Parameter SessionStateChanged::ACCOUNT_EXPIRED;
constexpr SessionStateChanged_Parameter SessionStateChanged::GENERATED_INSERT_ID;
constexpr SessionStateChanged_Parameter SessionStateChanged::ROWS_AFFECTED;
constexpr SessionStateChanged_Parameter SessionStateChanged::ROWS_FOUND;
constexpr SessionStateChanged_Parameter SessionStateChanged::ROWS_MATCHED;
constexpr SessionStateChanged_Parameter SessionStateChanged::TRX_COMMITTED;
constexpr SessionStateChanged_Parameter SessionStateChanged::TRX_ROLLEDBACK;
constexpr SessionStateChanged_Parameter SessionStateChanged::PRODUCED_MESSAGE;
constexpr SessionStateChanged_Parameter SessionStateChanged::CLIENT_ID_ASSIGNED;
constexpr SessionStateChanged_Parameter SessionStateChanged::GENERATED_DOCUMENT_IDS;
constexpr SessionStateChanged_Parameter SessionStateChanged::Parameter_MIN;
constexpr SessionStateChanged_Parameter SessionStateChanged::Parameter_MAX;
constexpr int SessionStateChanged::Parameter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GroupReplicationStateChanged_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GroupReplicationStateChanged_Type_strings[4] = {};

static const char GroupReplicationStateChanged_Type_names[] =
  "MEMBERSHIP_QUORUM_LOSS"
  "MEMBERSHIP_VIEW_CHANGE"
  "MEMBER_ROLE_CHANGE"
  "MEMBER_STATE_CHANGE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GroupReplicationStateChanged_Type_entries[] = {
  { {GroupReplicationStateChanged_Type_names + 0, 22}, 1 },
  { {GroupReplicationStateChanged_Type_names + 22, 22}, 2 },
  { {GroupReplicationStateChanged_Type_names + 44, 18}, 3 },
  { {GroupReplicationStateChanged_Type_names + 62, 19}, 4 },
};

static const int GroupReplicationStateChanged_Type_entries_by_number[] = {
  0, // 1 -> MEMBERSHIP_QUORUM_LOSS
  1, // 2 -> MEMBERSHIP_VIEW_CHANGE
  2, // 3 -> MEMBER_ROLE_CHANGE
  3, // 4 -> MEMBER_STATE_CHANGE
};

const std::string& GroupReplicationStateChanged_Type_Name(
    GroupReplicationStateChanged_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GroupReplicationStateChanged_Type_entries,
          GroupReplicationStateChanged_Type_entries_by_number,
          4, GroupReplicationStateChanged_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GroupReplicationStateChanged_Type_entries,
      GroupReplicationStateChanged_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GroupReplicationStateChanged_Type_strings[idx].get();
}
bool GroupReplicationStateChanged_Type_Parse(
    const std::string& name, GroupReplicationStateChanged_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GroupReplicationStateChanged_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GroupReplicationStateChanged_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GroupReplicationStateChanged_Type GroupReplicationStateChanged::MEMBERSHIP_QUORUM_LOSS;
constexpr GroupReplicationStateChanged_Type GroupReplicationStateChanged::MEMBERSHIP_VIEW_CHANGE;
constexpr GroupReplicationStateChanged_Type GroupReplicationStateChanged::MEMBER_ROLE_CHANGE;
constexpr GroupReplicationStateChanged_Type GroupReplicationStateChanged::MEMBER_STATE_CHANGE;
constexpr GroupReplicationStateChanged_Type GroupReplicationStateChanged::Type_MIN;
constexpr GroupReplicationStateChanged_Type GroupReplicationStateChanged::Type_MAX;
constexpr int GroupReplicationStateChanged::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Frame::InitAsDefaultInstance() {
}
class Frame::_Internal {
 public:
  using HasBits = decltype(std::declval<Frame>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Frame::Frame()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&scope_) -
    reinterpret_cast<char*>(&type_)) + sizeof(scope_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.Frame)
}

void Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Frame_mysqlx_5fnotice_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  scope_ = 1;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Frame_mysqlx_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    type_ = 0u;
    scope_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Notice::Frame_Scope_IsValid(val))) {
            _internal_set_scope(static_cast<::Mysqlx::Notice::Frame_Scope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scope(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.Frame)
  size_t total_size = 0;

  // required uint32 type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes payload = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scope());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Frame*>(
      &from));
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(scope_, other->scope_);
}

std::string Frame::GetTypeName() const {
  return "Mysqlx.Notice.Frame";
}


// ===================================================================

void Warning::InitAsDefaultInstance() {
}
class Warning::_Internal {
 public:
  using HasBits = decltype(std::declval<Warning>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Warning::Warning()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.Warning)
}
Warning::Warning(const Warning& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&code_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.Warning)
}

void Warning::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Warning_mysqlx_5fnotice_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  level_ = 2;
}

Warning::~Warning() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.Warning)
  SharedDtor();
}

void Warning::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Warning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Warning& Warning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Warning_mysqlx_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void Warning::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.Warning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    code_ = 0u;
    level_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Warning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Notice::Warning_Level_IsValid(val))) {
            _internal_set_level(static_cast<::Mysqlx::Notice::Warning_Level>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Warning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.Warning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // required uint32 code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // required string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.Warning)
  return target;
}

size_t Warning::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Notice.Warning)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_code()) {
    // required uint32 code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  return total_size;
}
size_t Warning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.Warning)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string msg = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required uint32 code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Warning::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Warning*>(
      &from));
}

void Warning::MergeFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.Warning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Warning::CopyFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.Warning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Warning::InternalSwap(Warning* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(level_, other->level_);
}

std::string Warning::GetTypeName() const {
  return "Mysqlx.Notice.Warning";
}


// ===================================================================

void SessionVariableChanged::InitAsDefaultInstance() {
  ::Mysqlx::Notice::_SessionVariableChanged_default_instance_._instance.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
}
class SessionVariableChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionVariableChanged>()._has_bits_);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Mysqlx::Datatypes::Scalar& value(const SessionVariableChanged* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Mysqlx::Datatypes::Scalar&
SessionVariableChanged::_Internal::value(const SessionVariableChanged* msg) {
  return *msg->value_;
}
void SessionVariableChanged::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SessionVariableChanged::SessionVariableChanged()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.SessionVariableChanged)
}
SessionVariableChanged::SessionVariableChanged(const SessionVariableChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param()) {
    param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.param_);
  }
  if (from._internal_has_value()) {
    value_ = new ::Mysqlx::Datatypes::Scalar(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.SessionVariableChanged)
}

void SessionVariableChanged::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionVariableChanged_mysqlx_5fnotice_2eproto.base);
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

SessionVariableChanged::~SessionVariableChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.SessionVariableChanged)
  SharedDtor();
}

void SessionVariableChanged::SharedDtor() {
  param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void SessionVariableChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionVariableChanged& SessionVariableChanged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionVariableChanged_mysqlx_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void SessionVariableChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.SessionVariableChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      param_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SessionVariableChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Datatypes.Scalar value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionVariableChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.SessionVariableChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_param(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.SessionVariableChanged)
  return target;
}

size_t SessionVariableChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.SessionVariableChanged)
  size_t total_size = 0;

  // required string param = 1;
  if (_internal_has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionVariableChanged::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SessionVariableChanged*>(
      &from));
}

void SessionVariableChanged::MergeFrom(const SessionVariableChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.SessionVariableChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.param_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::Mysqlx::Datatypes::Scalar::MergeFrom(from._internal_value());
    }
  }
}

void SessionVariableChanged::CopyFrom(const SessionVariableChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.SessionVariableChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionVariableChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void SessionVariableChanged::InternalSwap(SessionVariableChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  param_.Swap(&other->param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

std::string SessionVariableChanged::GetTypeName() const {
  return "Mysqlx.Notice.SessionVariableChanged";
}


// ===================================================================

void SessionStateChanged::InitAsDefaultInstance() {
}
class SessionStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionStateChanged>()._has_bits_);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SessionStateChanged::clear_value() {
  value_.Clear();
}
SessionStateChanged::SessionStateChanged()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.SessionStateChanged)
}
SessionStateChanged::SessionStateChanged(const SessionStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_ = from.param_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.SessionStateChanged)
}

void SessionStateChanged::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionStateChanged_mysqlx_5fnotice_2eproto.base);
  param_ = 1;
}

SessionStateChanged::~SessionStateChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.SessionStateChanged)
  SharedDtor();
}

void SessionStateChanged::SharedDtor() {
}

void SessionStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionStateChanged& SessionStateChanged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionStateChanged_mysqlx_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void SessionStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.SessionStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  param_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SessionStateChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Notice::SessionStateChanged_Parameter_IsValid(val))) {
            _internal_set_param(static_cast<::Mysqlx::Notice::SessionStateChanged_Parameter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .Mysqlx.Datatypes.Scalar value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionStateChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.SessionStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_param(), target);
  }

  // repeated .Mysqlx.Datatypes.Scalar value = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.SessionStateChanged)
  return target;
}

size_t SessionStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.SessionStateChanged)
  size_t total_size = 0;

  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (_internal_has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_param());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Scalar value = 2;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionStateChanged::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SessionStateChanged*>(
      &from));
}

void SessionStateChanged::MergeFrom(const SessionStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.SessionStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from._internal_has_param()) {
    _internal_set_param(from._internal_param());
  }
}

void SessionStateChanged::CopyFrom(const SessionStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.SessionStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStateChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_)) return false;
  return true;
}

void SessionStateChanged::InternalSwap(SessionStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  swap(param_, other->param_);
}

std::string SessionStateChanged::GetTypeName() const {
  return "Mysqlx.Notice.SessionStateChanged";
}


// ===================================================================

void GroupReplicationStateChanged::InitAsDefaultInstance() {
}
class GroupReplicationStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupReplicationStateChanged>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GroupReplicationStateChanged::GroupReplicationStateChanged()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.GroupReplicationStateChanged)
}
GroupReplicationStateChanged::GroupReplicationStateChanged(const GroupReplicationStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_view_id()) {
    view_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.view_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.GroupReplicationStateChanged)
}

void GroupReplicationStateChanged::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupReplicationStateChanged_mysqlx_5fnotice_2eproto.base);
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

GroupReplicationStateChanged::~GroupReplicationStateChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.GroupReplicationStateChanged)
  SharedDtor();
}

void GroupReplicationStateChanged::SharedDtor() {
  view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupReplicationStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupReplicationStateChanged& GroupReplicationStateChanged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupReplicationStateChanged_mysqlx_5fnotice_2eproto.base);
  return *internal_default_instance();
}


void GroupReplicationStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.GroupReplicationStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    view_id_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GroupReplicationStateChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string view_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupReplicationStateChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Notice.GroupReplicationStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string view_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_view_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Notice.GroupReplicationStateChanged)
  return target;
}

size_t GroupReplicationStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.GroupReplicationStateChanged)
  size_t total_size = 0;

  // required uint32 type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string view_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupReplicationStateChanged::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GroupReplicationStateChanged*>(
      &from));
}

void GroupReplicationStateChanged::MergeFrom(const GroupReplicationStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.GroupReplicationStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      view_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.view_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupReplicationStateChanged::CopyFrom(const GroupReplicationStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.GroupReplicationStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupReplicationStateChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void GroupReplicationStateChanged::InternalSwap(GroupReplicationStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  view_id_.Swap(&other->view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

std::string GroupReplicationStateChanged::GetTypeName() const {
  return "Mysqlx.Notice.GroupReplicationStateChanged";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Notice
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mysqlx::Notice::Frame* Arena::CreateMaybeMessage< ::Mysqlx::Notice::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Notice::Warning* Arena::CreateMaybeMessage< ::Mysqlx::Notice::Warning >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::Warning >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Notice::SessionVariableChanged* Arena::CreateMaybeMessage< ::Mysqlx::Notice::SessionVariableChanged >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::SessionVariableChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Notice::SessionStateChanged* Arena::CreateMaybeMessage< ::Mysqlx::Notice::SessionStateChanged >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::SessionStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Notice::GroupReplicationStateChanged* Arena::CreateMaybeMessage< ::Mysqlx::Notice::GroupReplicationStateChanged >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::GroupReplicationStateChanged >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
