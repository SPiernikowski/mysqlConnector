// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_prepare.proto

#include "mysqlx_prepare.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fcrud_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Delete_mysqlx_5fcrud_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fcrud_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Find_mysqlx_5fcrud_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fcrud_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Insert_mysqlx_5fcrud_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fcrud_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Update_mysqlx_5fcrud_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fdatatypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Any_mysqlx_5fdatatypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fprepare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Prepare_OneOfMessage_mysqlx_5fprepare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mysqlx_5fsql_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StmtExecute_mysqlx_5fsql_2eproto;
namespace Mysqlx {
namespace Prepare {
class Prepare_OneOfMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prepare_OneOfMessage> _instance;
} _Prepare_OneOfMessage_default_instance_;
class PrepareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prepare> _instance;
} _Prepare_default_instance_;
class ExecuteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Execute> _instance;
} _Execute_default_instance_;
class DeallocateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deallocate> _instance;
} _Deallocate_default_instance_;
}  // namespace Prepare
}  // namespace Mysqlx
static void InitDefaultsscc_info_Deallocate_mysqlx_5fprepare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Prepare::_Deallocate_default_instance_;
    new (ptr) ::Mysqlx::Prepare::Deallocate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Prepare::Deallocate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deallocate_mysqlx_5fprepare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Deallocate_mysqlx_5fprepare_2eproto}, {}};

static void InitDefaultsscc_info_Execute_mysqlx_5fprepare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Prepare::_Execute_default_instance_;
    new (ptr) ::Mysqlx::Prepare::Execute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Prepare::Execute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Execute_mysqlx_5fprepare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Execute_mysqlx_5fprepare_2eproto}, {
      &scc_info_Any_mysqlx_5fdatatypes_2eproto.base,}};

static void InitDefaultsscc_info_Prepare_mysqlx_5fprepare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Prepare::_Prepare_default_instance_;
    new (ptr) ::Mysqlx::Prepare::Prepare();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Prepare::Prepare::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Prepare_mysqlx_5fprepare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Prepare_mysqlx_5fprepare_2eproto}, {
      &scc_info_Prepare_OneOfMessage_mysqlx_5fprepare_2eproto.base,}};

static void InitDefaultsscc_info_Prepare_OneOfMessage_mysqlx_5fprepare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_;
    new (ptr) ::Mysqlx::Prepare::Prepare_OneOfMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Prepare::Prepare_OneOfMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Prepare_OneOfMessage_mysqlx_5fprepare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Prepare_OneOfMessage_mysqlx_5fprepare_2eproto}, {
      &scc_info_Find_mysqlx_5fcrud_2eproto.base,
      &scc_info_Insert_mysqlx_5fcrud_2eproto.base,
      &scc_info_Update_mysqlx_5fcrud_2eproto.base,
      &scc_info_Delete_mysqlx_5fcrud_2eproto.base,
      &scc_info_StmtExecute_mysqlx_5fsql_2eproto.base,}};

namespace Mysqlx {
namespace Prepare {
bool Prepare_OneOfMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Prepare_OneOfMessage_Type_strings[5] = {};

static const char Prepare_OneOfMessage_Type_names[] =
  "DELETE"
  "FIND"
  "INSERT"
  "STMT"
  "UPDATE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Prepare_OneOfMessage_Type_entries[] = {
  { {Prepare_OneOfMessage_Type_names + 0, 6}, 4 },
  { {Prepare_OneOfMessage_Type_names + 6, 4}, 0 },
  { {Prepare_OneOfMessage_Type_names + 10, 6}, 1 },
  { {Prepare_OneOfMessage_Type_names + 16, 4}, 5 },
  { {Prepare_OneOfMessage_Type_names + 20, 6}, 2 },
};

static const int Prepare_OneOfMessage_Type_entries_by_number[] = {
  1, // 0 -> FIND
  2, // 1 -> INSERT
  4, // 2 -> UPDATE
  0, // 4 -> DELETE
  3, // 5 -> STMT
};

const std::string& Prepare_OneOfMessage_Type_Name(
    Prepare_OneOfMessage_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Prepare_OneOfMessage_Type_entries,
          Prepare_OneOfMessage_Type_entries_by_number,
          5, Prepare_OneOfMessage_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Prepare_OneOfMessage_Type_entries,
      Prepare_OneOfMessage_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Prepare_OneOfMessage_Type_strings[idx].get();
}
bool Prepare_OneOfMessage_Type_Parse(
    const std::string& name, Prepare_OneOfMessage_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Prepare_OneOfMessage_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Prepare_OneOfMessage_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage::FIND;
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage::INSERT;
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage::UPDATE;
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage::DELETE;
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage::STMT;
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage::Type_MIN;
constexpr Prepare_OneOfMessage_Type Prepare_OneOfMessage::Type_MAX;
constexpr int Prepare_OneOfMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Prepare_OneOfMessage::InitAsDefaultInstance() {
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->find_ = const_cast< ::Mysqlx::Crud::Find*>(
      ::Mysqlx::Crud::Find::internal_default_instance());
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->insert_ = const_cast< ::Mysqlx::Crud::Insert*>(
      ::Mysqlx::Crud::Insert::internal_default_instance());
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->update_ = const_cast< ::Mysqlx::Crud::Update*>(
      ::Mysqlx::Crud::Update::internal_default_instance());
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->delete__ = const_cast< ::Mysqlx::Crud::Delete*>(
      ::Mysqlx::Crud::Delete::internal_default_instance());
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->stmt_execute_ = const_cast< ::Mysqlx::Sql::StmtExecute*>(
      ::Mysqlx::Sql::StmtExecute::internal_default_instance());
}
class Prepare_OneOfMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Prepare_OneOfMessage>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Mysqlx::Crud::Find& find(const Prepare_OneOfMessage* msg);
  static void set_has_find(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Mysqlx::Crud::Insert& insert(const Prepare_OneOfMessage* msg);
  static void set_has_insert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Mysqlx::Crud::Update& update(const Prepare_OneOfMessage* msg);
  static void set_has_update(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Mysqlx::Crud::Delete& delete_(const Prepare_OneOfMessage* msg);
  static void set_has_delete_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Mysqlx::Sql::StmtExecute& stmt_execute(const Prepare_OneOfMessage* msg);
  static void set_has_stmt_execute(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::Mysqlx::Crud::Find&
Prepare_OneOfMessage::_Internal::find(const Prepare_OneOfMessage* msg) {
  return *msg->find_;
}
const ::Mysqlx::Crud::Insert&
Prepare_OneOfMessage::_Internal::insert(const Prepare_OneOfMessage* msg) {
  return *msg->insert_;
}
const ::Mysqlx::Crud::Update&
Prepare_OneOfMessage::_Internal::update(const Prepare_OneOfMessage* msg) {
  return *msg->update_;
}
const ::Mysqlx::Crud::Delete&
Prepare_OneOfMessage::_Internal::delete_(const Prepare_OneOfMessage* msg) {
  return *msg->delete__;
}
const ::Mysqlx::Sql::StmtExecute&
Prepare_OneOfMessage::_Internal::stmt_execute(const Prepare_OneOfMessage* msg) {
  return *msg->stmt_execute_;
}
void Prepare_OneOfMessage::clear_find() {
  if (find_ != nullptr) find_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Prepare_OneOfMessage::clear_insert() {
  if (insert_ != nullptr) insert_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Prepare_OneOfMessage::clear_update() {
  if (update_ != nullptr) update_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Prepare_OneOfMessage::clear_delete_() {
  if (delete__ != nullptr) delete__->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Prepare_OneOfMessage::clear_stmt_execute() {
  if (stmt_execute_ != nullptr) stmt_execute_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Prepare_OneOfMessage::Prepare_OneOfMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Prepare.Prepare.OneOfMessage)
}
Prepare_OneOfMessage::Prepare_OneOfMessage(const Prepare_OneOfMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_find()) {
    find_ = new ::Mysqlx::Crud::Find(*from.find_);
  } else {
    find_ = nullptr;
  }
  if (from._internal_has_insert()) {
    insert_ = new ::Mysqlx::Crud::Insert(*from.insert_);
  } else {
    insert_ = nullptr;
  }
  if (from._internal_has_update()) {
    update_ = new ::Mysqlx::Crud::Update(*from.update_);
  } else {
    update_ = nullptr;
  }
  if (from._internal_has_delete_()) {
    delete__ = new ::Mysqlx::Crud::Delete(*from.delete__);
  } else {
    delete__ = nullptr;
  }
  if (from._internal_has_stmt_execute()) {
    stmt_execute_ = new ::Mysqlx::Sql::StmtExecute(*from.stmt_execute_);
  } else {
    stmt_execute_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Prepare.Prepare.OneOfMessage)
}

void Prepare_OneOfMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prepare_OneOfMessage_mysqlx_5fprepare_2eproto.base);
  ::memset(&find_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&find_)) + sizeof(type_));
}

Prepare_OneOfMessage::~Prepare_OneOfMessage() {
  // @@protoc_insertion_point(destructor:Mysqlx.Prepare.Prepare.OneOfMessage)
  SharedDtor();
}

void Prepare_OneOfMessage::SharedDtor() {
  if (this != internal_default_instance()) delete find_;
  if (this != internal_default_instance()) delete insert_;
  if (this != internal_default_instance()) delete update_;
  if (this != internal_default_instance()) delete delete__;
  if (this != internal_default_instance()) delete stmt_execute_;
}

void Prepare_OneOfMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prepare_OneOfMessage& Prepare_OneOfMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prepare_OneOfMessage_mysqlx_5fprepare_2eproto.base);
  return *internal_default_instance();
}


void Prepare_OneOfMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(find_ != nullptr);
      find_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(insert_ != nullptr);
      insert_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(update_ != nullptr);
      update_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(delete__ != nullptr);
      delete__->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stmt_execute_ != nullptr);
      stmt_execute_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Prepare_OneOfMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Prepare::Prepare_OneOfMessage_Type_IsValid(val))) {
            _internal_set_type(static_cast<::Mysqlx::Prepare::Prepare_OneOfMessage_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Crud.Find find = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_find(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Crud.Insert insert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Crud.Update update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Crud.Delete delete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stmt_execute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prepare_OneOfMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .Mysqlx.Crud.Find find = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::find(this), target, stream);
  }

  // optional .Mysqlx.Crud.Insert insert = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::insert(this), target, stream);
  }

  // optional .Mysqlx.Crud.Update update = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update(this), target, stream);
  }

  // optional .Mysqlx.Crud.Delete delete = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::delete_(this), target, stream);
  }

  // optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stmt_execute(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Prepare.Prepare.OneOfMessage)
  return target;
}

size_t Prepare_OneOfMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  size_t total_size = 0;

  // required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .Mysqlx.Crud.Find find = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *find_);
    }

    // optional .Mysqlx.Crud.Insert insert = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insert_);
    }

    // optional .Mysqlx.Crud.Update update = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_);
    }

    // optional .Mysqlx.Crud.Delete delete = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delete__);
    }

    // optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stmt_execute_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prepare_OneOfMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Prepare_OneOfMessage*>(
      &from));
}

void Prepare_OneOfMessage::MergeFrom(const Prepare_OneOfMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_find()->::Mysqlx::Crud::Find::MergeFrom(from._internal_find());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_insert()->::Mysqlx::Crud::Insert::MergeFrom(from._internal_insert());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_update()->::Mysqlx::Crud::Update::MergeFrom(from._internal_update());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_delete_()->::Mysqlx::Crud::Delete::MergeFrom(from._internal_delete_());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stmt_execute()->::Mysqlx::Sql::StmtExecute::MergeFrom(from._internal_stmt_execute());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Prepare_OneOfMessage::CopyFrom(const Prepare_OneOfMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prepare_OneOfMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (_internal_has_find()) {
    if (!find_->IsInitialized()) return false;
  }
  if (_internal_has_insert()) {
    if (!insert_->IsInitialized()) return false;
  }
  if (_internal_has_update()) {
    if (!update_->IsInitialized()) return false;
  }
  if (_internal_has_delete_()) {
    if (!delete__->IsInitialized()) return false;
  }
  if (_internal_has_stmt_execute()) {
    if (!stmt_execute_->IsInitialized()) return false;
  }
  return true;
}

void Prepare_OneOfMessage::InternalSwap(Prepare_OneOfMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(find_, other->find_);
  swap(insert_, other->insert_);
  swap(update_, other->update_);
  swap(delete__, other->delete__);
  swap(stmt_execute_, other->stmt_execute_);
  swap(type_, other->type_);
}

std::string Prepare_OneOfMessage::GetTypeName() const {
  return "Mysqlx.Prepare.Prepare.OneOfMessage";
}


// ===================================================================

void Prepare::InitAsDefaultInstance() {
  ::Mysqlx::Prepare::_Prepare_default_instance_._instance.get_mutable()->stmt_ = const_cast< ::Mysqlx::Prepare::Prepare_OneOfMessage*>(
      ::Mysqlx::Prepare::Prepare_OneOfMessage::internal_default_instance());
}
class Prepare::_Internal {
 public:
  using HasBits = decltype(std::declval<Prepare>()._has_bits_);
  static void set_has_stmt_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Mysqlx::Prepare::Prepare_OneOfMessage& stmt(const Prepare* msg);
  static void set_has_stmt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Mysqlx::Prepare::Prepare_OneOfMessage&
Prepare::_Internal::stmt(const Prepare* msg) {
  return *msg->stmt_;
}
Prepare::Prepare()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Prepare.Prepare)
}
Prepare::Prepare(const Prepare& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stmt()) {
    stmt_ = new ::Mysqlx::Prepare::Prepare_OneOfMessage(*from.stmt_);
  } else {
    stmt_ = nullptr;
  }
  stmt_id_ = from.stmt_id_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Prepare.Prepare)
}

void Prepare::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prepare_mysqlx_5fprepare_2eproto.base);
  ::memset(&stmt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stmt_id_) -
      reinterpret_cast<char*>(&stmt_)) + sizeof(stmt_id_));
}

Prepare::~Prepare() {
  // @@protoc_insertion_point(destructor:Mysqlx.Prepare.Prepare)
  SharedDtor();
}

void Prepare::SharedDtor() {
  if (this != internal_default_instance()) delete stmt_;
}

void Prepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prepare& Prepare::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prepare_mysqlx_5fprepare_2eproto.base);
  return *internal_default_instance();
}


void Prepare::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Prepare.Prepare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stmt_ != nullptr);
    stmt_->Clear();
  }
  stmt_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Prepare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 stmt_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stmt_id(&has_bits);
          stmt_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stmt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prepare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Prepare.Prepare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stmt_id(), target);
  }

  // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stmt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Prepare.Prepare)
  return target;
}

size_t Prepare::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Prepare.Prepare)
  size_t total_size = 0;

  if (_internal_has_stmt()) {
    // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stmt_);
  }

  if (_internal_has_stmt_id()) {
    // required uint32 stmt_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stmt_id());
  }

  return total_size;
}
size_t Prepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Prepare.Prepare)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stmt_);

    // required uint32 stmt_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stmt_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prepare::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Prepare*>(
      &from));
}

void Prepare::MergeFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Prepare.Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stmt()->::Mysqlx::Prepare::Prepare_OneOfMessage::MergeFrom(from._internal_stmt());
    }
    if (cached_has_bits & 0x00000002u) {
      stmt_id_ = from.stmt_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Prepare::CopyFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Prepare.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_stmt()) {
    if (!stmt_->IsInitialized()) return false;
  }
  return true;
}

void Prepare::InternalSwap(Prepare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stmt_, other->stmt_);
  swap(stmt_id_, other->stmt_id_);
}

std::string Prepare::GetTypeName() const {
  return "Mysqlx.Prepare.Prepare";
}


// ===================================================================

void Execute::InitAsDefaultInstance() {
}
class Execute::_Internal {
 public:
  using HasBits = decltype(std::declval<Execute>()._has_bits_);
  static void set_has_stmt_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compact_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void Execute::clear_args() {
  args_.Clear();
}
Execute::Execute()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Prepare.Execute)
}
Execute::Execute(const Execute& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stmt_id_, &from.stmt_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&compact_metadata_) -
    reinterpret_cast<char*>(&stmt_id_)) + sizeof(compact_metadata_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Prepare.Execute)
}

void Execute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Execute_mysqlx_5fprepare_2eproto.base);
  ::memset(&stmt_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compact_metadata_) -
      reinterpret_cast<char*>(&stmt_id_)) + sizeof(compact_metadata_));
}

Execute::~Execute() {
  // @@protoc_insertion_point(destructor:Mysqlx.Prepare.Execute)
  SharedDtor();
}

void Execute::SharedDtor() {
}

void Execute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Execute& Execute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Execute_mysqlx_5fprepare_2eproto.base);
  return *internal_default_instance();
}


void Execute::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Prepare.Execute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stmt_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compact_metadata_) -
        reinterpret_cast<char*>(&stmt_id_)) + sizeof(compact_metadata_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Execute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 stmt_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stmt_id(&has_bits);
          stmt_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Mysqlx.Datatypes.Any args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool compact_metadata = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_compact_metadata(&has_bits);
          compact_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Execute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Prepare.Execute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stmt_id(), target);
  }

  // repeated .Mysqlx.Datatypes.Any args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // optional bool compact_metadata = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_compact_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Prepare.Execute)
  return target;
}

size_t Execute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Prepare.Execute)
  size_t total_size = 0;

  // required uint32 stmt_id = 1;
  if (_internal_has_stmt_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stmt_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Any args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool compact_metadata = 3 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Execute::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Execute*>(
      &from));
}

void Execute::MergeFrom(const Execute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Prepare.Execute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stmt_id_ = from.stmt_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      compact_metadata_ = from.compact_metadata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Execute::CopyFrom(const Execute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Prepare.Execute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_)) return false;
  return true;
}

void Execute::InternalSwap(Execute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  swap(stmt_id_, other->stmt_id_);
  swap(compact_metadata_, other->compact_metadata_);
}

std::string Execute::GetTypeName() const {
  return "Mysqlx.Prepare.Execute";
}


// ===================================================================

void Deallocate::InitAsDefaultInstance() {
}
class Deallocate::_Internal {
 public:
  using HasBits = decltype(std::declval<Deallocate>()._has_bits_);
  static void set_has_stmt_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Deallocate::Deallocate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Prepare.Deallocate)
}
Deallocate::Deallocate(const Deallocate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stmt_id_ = from.stmt_id_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Prepare.Deallocate)
}

void Deallocate::SharedCtor() {
  stmt_id_ = 0u;
}

Deallocate::~Deallocate() {
  // @@protoc_insertion_point(destructor:Mysqlx.Prepare.Deallocate)
  SharedDtor();
}

void Deallocate::SharedDtor() {
}

void Deallocate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deallocate& Deallocate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deallocate_mysqlx_5fprepare_2eproto.base);
  return *internal_default_instance();
}


void Deallocate::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Prepare.Deallocate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stmt_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Deallocate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 stmt_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stmt_id(&has_bits);
          stmt_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deallocate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Prepare.Deallocate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stmt_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Prepare.Deallocate)
  return target;
}

size_t Deallocate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Prepare.Deallocate)
  size_t total_size = 0;

  // required uint32 stmt_id = 1;
  if (_internal_has_stmt_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stmt_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deallocate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Deallocate*>(
      &from));
}

void Deallocate::MergeFrom(const Deallocate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Prepare.Deallocate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stmt_id()) {
    _internal_set_stmt_id(from._internal_stmt_id());
  }
}

void Deallocate::CopyFrom(const Deallocate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Prepare.Deallocate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deallocate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Deallocate::InternalSwap(Deallocate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stmt_id_, other->stmt_id_);
}

std::string Deallocate::GetTypeName() const {
  return "Mysqlx.Prepare.Deallocate";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Prepare
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mysqlx::Prepare::Prepare_OneOfMessage* Arena::CreateMaybeMessage< ::Mysqlx::Prepare::Prepare_OneOfMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Prepare::Prepare_OneOfMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Prepare::Prepare* Arena::CreateMaybeMessage< ::Mysqlx::Prepare::Prepare >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Prepare::Prepare >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Prepare::Execute* Arena::CreateMaybeMessage< ::Mysqlx::Prepare::Execute >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Prepare::Execute >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Prepare::Deallocate* Arena::CreateMaybeMessage< ::Mysqlx::Prepare::Deallocate >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Prepare::Deallocate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
