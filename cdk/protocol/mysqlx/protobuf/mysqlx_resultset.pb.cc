// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_resultset.proto

#include "mysqlx_resultset.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Mysqlx {
namespace Resultset {
class FetchDoneMoreOutParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDoneMoreOutParams> _instance;
} _FetchDoneMoreOutParams_default_instance_;
class FetchDoneMoreResultsetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDoneMoreResultsets> _instance;
} _FetchDoneMoreResultsets_default_instance_;
class FetchDoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchDone> _instance;
} _FetchDone_default_instance_;
class FetchSuspendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchSuspended> _instance;
} _FetchSuspended_default_instance_;
class ColumnMetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnMetaData> _instance;
} _ColumnMetaData_default_instance_;
class RowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Row> _instance;
} _Row_default_instance_;
}  // namespace Resultset
}  // namespace Mysqlx
static void InitDefaultsscc_info_ColumnMetaData_mysqlx_5fresultset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_ColumnMetaData_default_instance_;
    new (ptr) ::Mysqlx::Resultset::ColumnMetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::ColumnMetaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColumnMetaData_mysqlx_5fresultset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColumnMetaData_mysqlx_5fresultset_2eproto}, {}};

static void InitDefaultsscc_info_FetchDone_mysqlx_5fresultset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_FetchDone_default_instance_;
    new (ptr) ::Mysqlx::Resultset::FetchDone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::FetchDone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDone_mysqlx_5fresultset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchDone_mysqlx_5fresultset_2eproto}, {}};

static void InitDefaultsscc_info_FetchDoneMoreOutParams_mysqlx_5fresultset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_FetchDoneMoreOutParams_default_instance_;
    new (ptr) ::Mysqlx::Resultset::FetchDoneMoreOutParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::FetchDoneMoreOutParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDoneMoreOutParams_mysqlx_5fresultset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchDoneMoreOutParams_mysqlx_5fresultset_2eproto}, {}};

static void InitDefaultsscc_info_FetchDoneMoreResultsets_mysqlx_5fresultset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_FetchDoneMoreResultsets_default_instance_;
    new (ptr) ::Mysqlx::Resultset::FetchDoneMoreResultsets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::FetchDoneMoreResultsets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchDoneMoreResultsets_mysqlx_5fresultset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchDoneMoreResultsets_mysqlx_5fresultset_2eproto}, {}};

static void InitDefaultsscc_info_FetchSuspended_mysqlx_5fresultset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_FetchSuspended_default_instance_;
    new (ptr) ::Mysqlx::Resultset::FetchSuspended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::FetchSuspended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchSuspended_mysqlx_5fresultset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchSuspended_mysqlx_5fresultset_2eproto}, {}};

static void InitDefaultsscc_info_Row_mysqlx_5fresultset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_Row_default_instance_;
    new (ptr) ::Mysqlx::Resultset::Row();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::Row::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Row_mysqlx_5fresultset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Row_mysqlx_5fresultset_2eproto}, {}};

namespace Mysqlx {
namespace Resultset {
bool ColumnMetaData_FieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 10:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ColumnMetaData_FieldType_strings[11] = {};

static const char ColumnMetaData_FieldType_names[] =
  "BIT"
  "BYTES"
  "DATETIME"
  "DECIMAL"
  "DOUBLE"
  "ENUM"
  "FLOAT"
  "SET"
  "SINT"
  "TIME"
  "UINT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ColumnMetaData_FieldType_entries[] = {
  { {ColumnMetaData_FieldType_names + 0, 3}, 17 },
  { {ColumnMetaData_FieldType_names + 3, 5}, 7 },
  { {ColumnMetaData_FieldType_names + 8, 8}, 12 },
  { {ColumnMetaData_FieldType_names + 16, 7}, 18 },
  { {ColumnMetaData_FieldType_names + 23, 6}, 5 },
  { {ColumnMetaData_FieldType_names + 29, 4}, 16 },
  { {ColumnMetaData_FieldType_names + 33, 5}, 6 },
  { {ColumnMetaData_FieldType_names + 38, 3}, 15 },
  { {ColumnMetaData_FieldType_names + 41, 4}, 1 },
  { {ColumnMetaData_FieldType_names + 45, 4}, 10 },
  { {ColumnMetaData_FieldType_names + 49, 4}, 2 },
};

static const int ColumnMetaData_FieldType_entries_by_number[] = {
  8, // 1 -> SINT
  10, // 2 -> UINT
  4, // 5 -> DOUBLE
  6, // 6 -> FLOAT
  1, // 7 -> BYTES
  9, // 10 -> TIME
  2, // 12 -> DATETIME
  7, // 15 -> SET
  5, // 16 -> ENUM
  0, // 17 -> BIT
  3, // 18 -> DECIMAL
};

const std::string& ColumnMetaData_FieldType_Name(
    ColumnMetaData_FieldType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ColumnMetaData_FieldType_entries,
          ColumnMetaData_FieldType_entries_by_number,
          11, ColumnMetaData_FieldType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ColumnMetaData_FieldType_entries,
      ColumnMetaData_FieldType_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ColumnMetaData_FieldType_strings[idx].get();
}
bool ColumnMetaData_FieldType_Parse(
    const std::string& name, ColumnMetaData_FieldType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ColumnMetaData_FieldType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<ColumnMetaData_FieldType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ColumnMetaData_FieldType ColumnMetaData::SINT;
constexpr ColumnMetaData_FieldType ColumnMetaData::UINT;
constexpr ColumnMetaData_FieldType ColumnMetaData::DOUBLE;
constexpr ColumnMetaData_FieldType ColumnMetaData::FLOAT;
constexpr ColumnMetaData_FieldType ColumnMetaData::BYTES;
constexpr ColumnMetaData_FieldType ColumnMetaData::TIME;
constexpr ColumnMetaData_FieldType ColumnMetaData::DATETIME;
constexpr ColumnMetaData_FieldType ColumnMetaData::SET;
constexpr ColumnMetaData_FieldType ColumnMetaData::ENUM;
constexpr ColumnMetaData_FieldType ColumnMetaData::BIT;
constexpr ColumnMetaData_FieldType ColumnMetaData::DECIMAL;
constexpr ColumnMetaData_FieldType ColumnMetaData::FieldType_MIN;
constexpr ColumnMetaData_FieldType ColumnMetaData::FieldType_MAX;
constexpr int ColumnMetaData::FieldType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ContentType_BYTES_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ContentType_BYTES_strings[3] = {};

static const char ContentType_BYTES_names[] =
  "GEOMETRY"
  "JSON"
  "XML";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ContentType_BYTES_entries[] = {
  { {ContentType_BYTES_names + 0, 8}, 1 },
  { {ContentType_BYTES_names + 8, 4}, 2 },
  { {ContentType_BYTES_names + 12, 3}, 3 },
};

static const int ContentType_BYTES_entries_by_number[] = {
  0, // 1 -> GEOMETRY
  1, // 2 -> JSON
  2, // 3 -> XML
};

const std::string& ContentType_BYTES_Name(
    ContentType_BYTES value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ContentType_BYTES_entries,
          ContentType_BYTES_entries_by_number,
          3, ContentType_BYTES_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ContentType_BYTES_entries,
      ContentType_BYTES_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ContentType_BYTES_strings[idx].get();
}
bool ContentType_BYTES_Parse(
    const std::string& name, ContentType_BYTES* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ContentType_BYTES_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ContentType_BYTES>(int_value);
  }
  return success;
}
bool ContentType_DATETIME_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ContentType_DATETIME_strings[2] = {};

static const char ContentType_DATETIME_names[] =
  "DATE"
  "DATETIME";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ContentType_DATETIME_entries[] = {
  { {ContentType_DATETIME_names + 0, 4}, 1 },
  { {ContentType_DATETIME_names + 4, 8}, 2 },
};

static const int ContentType_DATETIME_entries_by_number[] = {
  0, // 1 -> DATE
  1, // 2 -> DATETIME
};

const std::string& ContentType_DATETIME_Name(
    ContentType_DATETIME value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ContentType_DATETIME_entries,
          ContentType_DATETIME_entries_by_number,
          2, ContentType_DATETIME_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ContentType_DATETIME_entries,
      ContentType_DATETIME_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ContentType_DATETIME_strings[idx].get();
}
bool ContentType_DATETIME_Parse(
    const std::string& name, ContentType_DATETIME* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ContentType_DATETIME_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ContentType_DATETIME>(int_value);
  }
  return success;
}

// ===================================================================

void FetchDoneMoreOutParams::InitAsDefaultInstance() {
}
class FetchDoneMoreOutParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchDoneMoreOutParams>()._has_bits_);
};

FetchDoneMoreOutParams::FetchDoneMoreOutParams()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
}
FetchDoneMoreOutParams::FetchDoneMoreOutParams(const FetchDoneMoreOutParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
}

void FetchDoneMoreOutParams::SharedCtor() {
}

FetchDoneMoreOutParams::~FetchDoneMoreOutParams() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
  SharedDtor();
}

void FetchDoneMoreOutParams::SharedDtor() {
}

void FetchDoneMoreOutParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDoneMoreOutParams& FetchDoneMoreOutParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDoneMoreOutParams_mysqlx_5fresultset_2eproto.base);
  return *internal_default_instance();
}


void FetchDoneMoreOutParams::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FetchDoneMoreOutParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDoneMoreOutParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.FetchDoneMoreOutParams)
  return target;
}

size_t FetchDoneMoreOutParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDoneMoreOutParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FetchDoneMoreOutParams*>(
      &from));
}

void FetchDoneMoreOutParams::MergeFrom(const FetchDoneMoreOutParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchDoneMoreOutParams::CopyFrom(const FetchDoneMoreOutParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDoneMoreOutParams::IsInitialized() const {
  return true;
}

void FetchDoneMoreOutParams::InternalSwap(FetchDoneMoreOutParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string FetchDoneMoreOutParams::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDoneMoreOutParams";
}


// ===================================================================

void FetchDoneMoreResultsets::InitAsDefaultInstance() {
}
class FetchDoneMoreResultsets::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchDoneMoreResultsets>()._has_bits_);
};

FetchDoneMoreResultsets::FetchDoneMoreResultsets()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
}
FetchDoneMoreResultsets::FetchDoneMoreResultsets(const FetchDoneMoreResultsets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
}

void FetchDoneMoreResultsets::SharedCtor() {
}

FetchDoneMoreResultsets::~FetchDoneMoreResultsets() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
  SharedDtor();
}

void FetchDoneMoreResultsets::SharedDtor() {
}

void FetchDoneMoreResultsets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDoneMoreResultsets& FetchDoneMoreResultsets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDoneMoreResultsets_mysqlx_5fresultset_2eproto.base);
  return *internal_default_instance();
}


void FetchDoneMoreResultsets::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FetchDoneMoreResultsets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDoneMoreResultsets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.FetchDoneMoreResultsets)
  return target;
}

size_t FetchDoneMoreResultsets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDoneMoreResultsets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FetchDoneMoreResultsets*>(
      &from));
}

void FetchDoneMoreResultsets::MergeFrom(const FetchDoneMoreResultsets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchDoneMoreResultsets::CopyFrom(const FetchDoneMoreResultsets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDoneMoreResultsets::IsInitialized() const {
  return true;
}

void FetchDoneMoreResultsets::InternalSwap(FetchDoneMoreResultsets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string FetchDoneMoreResultsets::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDoneMoreResultsets";
}


// ===================================================================

void FetchDone::InitAsDefaultInstance() {
}
class FetchDone::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchDone>()._has_bits_);
};

FetchDone::FetchDone()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDone)
}
FetchDone::FetchDone(const FetchDone& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDone)
}

void FetchDone::SharedCtor() {
}

FetchDone::~FetchDone() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDone)
  SharedDtor();
}

void FetchDone::SharedDtor() {
}

void FetchDone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDone& FetchDone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchDone_mysqlx_5fresultset_2eproto.base);
  return *internal_default_instance();
}


void FetchDone::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FetchDone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchDone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.FetchDone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.FetchDone)
  return target;
}

size_t FetchDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDone::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FetchDone*>(
      &from));
}

void FetchDone::MergeFrom(const FetchDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchDone::CopyFrom(const FetchDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDone::IsInitialized() const {
  return true;
}

void FetchDone::InternalSwap(FetchDone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string FetchDone::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDone";
}


// ===================================================================

void FetchSuspended::InitAsDefaultInstance() {
}
class FetchSuspended::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchSuspended>()._has_bits_);
};

FetchSuspended::FetchSuspended()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchSuspended)
}
FetchSuspended::FetchSuspended(const FetchSuspended& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchSuspended)
}

void FetchSuspended::SharedCtor() {
}

FetchSuspended::~FetchSuspended() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchSuspended)
  SharedDtor();
}

void FetchSuspended::SharedDtor() {
}

void FetchSuspended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchSuspended& FetchSuspended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchSuspended_mysqlx_5fresultset_2eproto.base);
  return *internal_default_instance();
}


void FetchSuspended::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchSuspended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FetchSuspended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchSuspended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.FetchSuspended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.FetchSuspended)
  return target;
}

size_t FetchSuspended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchSuspended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchSuspended::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FetchSuspended*>(
      &from));
}

void FetchSuspended::MergeFrom(const FetchSuspended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchSuspended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchSuspended::CopyFrom(const FetchSuspended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchSuspended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSuspended::IsInitialized() const {
  return true;
}

void FetchSuspended::InternalSwap(FetchSuspended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string FetchSuspended::GetTypeName() const {
  return "Mysqlx.Resultset.FetchSuspended";
}


// ===================================================================

void ColumnMetaData::InitAsDefaultInstance() {
}
class ColumnMetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnMetaData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_table(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fractional_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ColumnMetaData::ColumnMetaData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.ColumnMetaData)
}
ColumnMetaData::ColumnMetaData(const ColumnMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  original_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_name()) {
    original_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_name_);
  }
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_table()) {
    table_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  original_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_table()) {
    original_table_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_table_);
  }
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_schema()) {
    schema_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  catalog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_catalog()) {
    catalog_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.catalog_);
  }
  ::memcpy(&collation_, &from.collation_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&collation_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.ColumnMetaData)
}

void ColumnMetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnMetaData_mysqlx_5fresultset_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  catalog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&collation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_type_) -
      reinterpret_cast<char*>(&collation_)) + sizeof(content_type_));
  type_ = 1;
}

ColumnMetaData::~ColumnMetaData() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.ColumnMetaData)
  SharedDtor();
}

void ColumnMetaData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  catalog_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColumnMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnMetaData& ColumnMetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnMetaData_mysqlx_5fresultset_2eproto.base);
  return *internal_default_instance();
}


void ColumnMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.ColumnMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      original_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      table_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      original_table_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      schema_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      catalog_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&collation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fractional_digits_) -
        reinterpret_cast<char*>(&collation_)) + sizeof(fractional_digits_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&content_type_) -
        reinterpret_cast<char*>(&length_)) + sizeof(content_type_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ColumnMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Mysqlx::Resultset::ColumnMetaData_FieldType_IsValid(val))) {
            _internal_set_type(static_cast<::Mysqlx::Resultset::ColumnMetaData_FieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes original_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_original_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes original_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_original_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes schema = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_schema();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes catalog = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_catalog();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 collation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_collation(&has_bits);
          collation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fractional_digits = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_fractional_digits(&has_bits);
          fractional_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 length = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 content_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_content_type(&has_bits);
          content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnMetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.ColumnMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional bytes original_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_original_name(), target);
  }

  // optional bytes table = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_table(), target);
  }

  // optional bytes original_table = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_original_table(), target);
  }

  // optional bytes schema = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_schema(), target);
  }

  // optional bytes catalog = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_catalog(), target);
  }

  // optional uint64 collation = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_collation(), target);
  }

  // optional uint32 fractional_digits = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fractional_digits(), target);
  }

  // optional uint32 length = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_length(), target);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_flags(), target);
  }

  // optional uint32 content_type = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.ColumnMetaData)
  return target;
}

size_t ColumnMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.ColumnMetaData)
  size_t total_size = 0;

  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes original_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_original_name());
    }

    // optional bytes table = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_table());
    }

    // optional bytes original_table = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_original_table());
    }

    // optional bytes schema = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schema());
    }

    // optional bytes catalog = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_catalog());
    }

    // optional uint64 collation = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_collation());
    }

    // optional uint32 fractional_digits = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fractional_digits());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 length = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_length());
    }

    // optional uint32 flags = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 content_type = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_content_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnMetaData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ColumnMetaData*>(
      &from));
}

void ColumnMetaData::MergeFrom(const ColumnMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.ColumnMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      original_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      table_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      original_table_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_table_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      schema_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      catalog_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.catalog_);
    }
    if (cached_has_bits & 0x00000040u) {
      collation_ = from.collation_;
    }
    if (cached_has_bits & 0x00000080u) {
      fractional_digits_ = from.fractional_digits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      content_type_ = from.content_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnMetaData::CopyFrom(const ColumnMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.ColumnMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000800) != 0x00000800) return false;
  return true;
}

void ColumnMetaData::InternalSwap(ColumnMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  original_name_.Swap(&other->original_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  original_table_.Swap(&other->original_table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_.Swap(&other->schema_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  catalog_.Swap(&other->catalog_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(collation_, other->collation_);
  swap(fractional_digits_, other->fractional_digits_);
  swap(length_, other->length_);
  swap(flags_, other->flags_);
  swap(content_type_, other->content_type_);
  swap(type_, other->type_);
}

std::string ColumnMetaData::GetTypeName() const {
  return "Mysqlx.Resultset.ColumnMetaData";
}


// ===================================================================

void Row::InitAsDefaultInstance() {
}
class Row::_Internal {
 public:
  using HasBits = decltype(std::declval<Row>()._has_bits_);
};

Row::Row()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.Row)
}
Row::Row(const Row& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.Row)
}

void Row::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Row_mysqlx_5fresultset_2eproto.base);
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.Row)
  SharedDtor();
}

void Row::SharedDtor() {
}

void Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Row& Row::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Row_mysqlx_5fresultset_2eproto.base);
  return *internal_default_instance();
}


void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.Row)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Row::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Row::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Resultset.Row)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes field = 1;
  for (int i = 0, n = this->_internal_field_size(); i < n; i++) {
    const auto& s = this->_internal_field(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Resultset.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.Row)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes field = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_.size());
  for (int i = 0, n = field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      field_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Row::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Row*>(
      &from));
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::InternalSwap(Row* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_.InternalSwap(&other->field_);
}

std::string Row::GetTypeName() const {
  return "Mysqlx.Resultset.Row";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Resultset
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Mysqlx::Resultset::FetchDoneMoreOutParams* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::FetchDoneMoreOutParams >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::FetchDoneMoreOutParams >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Resultset::FetchDoneMoreResultsets* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::FetchDoneMoreResultsets >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::FetchDoneMoreResultsets >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Resultset::FetchDone* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::FetchDone >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::FetchDone >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Resultset::FetchSuspended* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::FetchSuspended >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::FetchSuspended >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Resultset::ColumnMetaData* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::ColumnMetaData >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::ColumnMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::Mysqlx::Resultset::Row* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::Row >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::Row >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
