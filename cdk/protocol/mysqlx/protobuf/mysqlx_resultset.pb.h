// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_resultset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fresultset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fresultset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysqlx_5fresultset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysqlx_5fresultset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Mysqlx {
namespace Resultset {
class ColumnMetaData;
class ColumnMetaDataDefaultTypeInternal;
extern ColumnMetaDataDefaultTypeInternal _ColumnMetaData_default_instance_;
class FetchDone;
class FetchDoneDefaultTypeInternal;
extern FetchDoneDefaultTypeInternal _FetchDone_default_instance_;
class FetchDoneMoreOutParams;
class FetchDoneMoreOutParamsDefaultTypeInternal;
extern FetchDoneMoreOutParamsDefaultTypeInternal _FetchDoneMoreOutParams_default_instance_;
class FetchDoneMoreResultsets;
class FetchDoneMoreResultsetsDefaultTypeInternal;
extern FetchDoneMoreResultsetsDefaultTypeInternal _FetchDoneMoreResultsets_default_instance_;
class FetchSuspended;
class FetchSuspendedDefaultTypeInternal;
extern FetchSuspendedDefaultTypeInternal _FetchSuspended_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
}  // namespace Resultset
}  // namespace Mysqlx
PROTOBUF_NAMESPACE_OPEN
template<> ::Mysqlx::Resultset::ColumnMetaData* Arena::CreateMaybeMessage<::Mysqlx::Resultset::ColumnMetaData>(Arena*);
template<> ::Mysqlx::Resultset::FetchDone* Arena::CreateMaybeMessage<::Mysqlx::Resultset::FetchDone>(Arena*);
template<> ::Mysqlx::Resultset::FetchDoneMoreOutParams* Arena::CreateMaybeMessage<::Mysqlx::Resultset::FetchDoneMoreOutParams>(Arena*);
template<> ::Mysqlx::Resultset::FetchDoneMoreResultsets* Arena::CreateMaybeMessage<::Mysqlx::Resultset::FetchDoneMoreResultsets>(Arena*);
template<> ::Mysqlx::Resultset::FetchSuspended* Arena::CreateMaybeMessage<::Mysqlx::Resultset::FetchSuspended>(Arena*);
template<> ::Mysqlx::Resultset::Row* Arena::CreateMaybeMessage<::Mysqlx::Resultset::Row>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Mysqlx {
namespace Resultset {

enum ColumnMetaData_FieldType : int {
  ColumnMetaData_FieldType_SINT = 1,
  ColumnMetaData_FieldType_UINT = 2,
  ColumnMetaData_FieldType_DOUBLE = 5,
  ColumnMetaData_FieldType_FLOAT = 6,
  ColumnMetaData_FieldType_BYTES = 7,
  ColumnMetaData_FieldType_TIME = 10,
  ColumnMetaData_FieldType_DATETIME = 12,
  ColumnMetaData_FieldType_SET = 15,
  ColumnMetaData_FieldType_ENUM = 16,
  ColumnMetaData_FieldType_BIT = 17,
  ColumnMetaData_FieldType_DECIMAL = 18
};
bool ColumnMetaData_FieldType_IsValid(int value);
constexpr ColumnMetaData_FieldType ColumnMetaData_FieldType_FieldType_MIN = ColumnMetaData_FieldType_SINT;
constexpr ColumnMetaData_FieldType ColumnMetaData_FieldType_FieldType_MAX = ColumnMetaData_FieldType_DECIMAL;
constexpr int ColumnMetaData_FieldType_FieldType_ARRAYSIZE = ColumnMetaData_FieldType_FieldType_MAX + 1;

const std::string& ColumnMetaData_FieldType_Name(ColumnMetaData_FieldType value);
template<typename T>
inline const std::string& ColumnMetaData_FieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColumnMetaData_FieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColumnMetaData_FieldType_Name.");
  return ColumnMetaData_FieldType_Name(static_cast<ColumnMetaData_FieldType>(enum_t_value));
}
bool ColumnMetaData_FieldType_Parse(
    const std::string& name, ColumnMetaData_FieldType* value);
enum ContentType_BYTES : int {
  GEOMETRY = 1,
  JSON = 2,
  XML = 3
};
bool ContentType_BYTES_IsValid(int value);
constexpr ContentType_BYTES ContentType_BYTES_MIN = GEOMETRY;
constexpr ContentType_BYTES ContentType_BYTES_MAX = XML;
constexpr int ContentType_BYTES_ARRAYSIZE = ContentType_BYTES_MAX + 1;

const std::string& ContentType_BYTES_Name(ContentType_BYTES value);
template<typename T>
inline const std::string& ContentType_BYTES_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentType_BYTES>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentType_BYTES_Name.");
  return ContentType_BYTES_Name(static_cast<ContentType_BYTES>(enum_t_value));
}
bool ContentType_BYTES_Parse(
    const std::string& name, ContentType_BYTES* value);
enum ContentType_DATETIME : int {
  DATE = 1,
  DATETIME = 2
};
bool ContentType_DATETIME_IsValid(int value);
constexpr ContentType_DATETIME ContentType_DATETIME_MIN = DATE;
constexpr ContentType_DATETIME ContentType_DATETIME_MAX = DATETIME;
constexpr int ContentType_DATETIME_ARRAYSIZE = ContentType_DATETIME_MAX + 1;

const std::string& ContentType_DATETIME_Name(ContentType_DATETIME value);
template<typename T>
inline const std::string& ContentType_DATETIME_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentType_DATETIME>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentType_DATETIME_Name.");
  return ContentType_DATETIME_Name(static_cast<ContentType_DATETIME>(enum_t_value));
}
bool ContentType_DATETIME_Parse(
    const std::string& name, ContentType_DATETIME* value);
// ===================================================================

class FetchDoneMoreOutParams :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Resultset.FetchDoneMoreOutParams) */ {
 public:
  FetchDoneMoreOutParams();
  virtual ~FetchDoneMoreOutParams();

  FetchDoneMoreOutParams(const FetchDoneMoreOutParams& from);
  FetchDoneMoreOutParams(FetchDoneMoreOutParams&& from) noexcept
    : FetchDoneMoreOutParams() {
    *this = ::std::move(from);
  }

  inline FetchDoneMoreOutParams& operator=(const FetchDoneMoreOutParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDoneMoreOutParams& operator=(FetchDoneMoreOutParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FetchDoneMoreOutParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchDoneMoreOutParams* internal_default_instance() {
    return reinterpret_cast<const FetchDoneMoreOutParams*>(
               &_FetchDoneMoreOutParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FetchDoneMoreOutParams& a, FetchDoneMoreOutParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDoneMoreOutParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDoneMoreOutParams* New() const final {
    return CreateMaybeMessage<FetchDoneMoreOutParams>(nullptr);
  }

  FetchDoneMoreOutParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDoneMoreOutParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FetchDoneMoreOutParams& from);
  void MergeFrom(const FetchDoneMoreOutParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchDoneMoreOutParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Resultset.FetchDoneMoreOutParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.FetchDoneMoreOutParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class FetchDoneMoreResultsets :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Resultset.FetchDoneMoreResultsets) */ {
 public:
  FetchDoneMoreResultsets();
  virtual ~FetchDoneMoreResultsets();

  FetchDoneMoreResultsets(const FetchDoneMoreResultsets& from);
  FetchDoneMoreResultsets(FetchDoneMoreResultsets&& from) noexcept
    : FetchDoneMoreResultsets() {
    *this = ::std::move(from);
  }

  inline FetchDoneMoreResultsets& operator=(const FetchDoneMoreResultsets& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDoneMoreResultsets& operator=(FetchDoneMoreResultsets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FetchDoneMoreResultsets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchDoneMoreResultsets* internal_default_instance() {
    return reinterpret_cast<const FetchDoneMoreResultsets*>(
               &_FetchDoneMoreResultsets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FetchDoneMoreResultsets& a, FetchDoneMoreResultsets& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDoneMoreResultsets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDoneMoreResultsets* New() const final {
    return CreateMaybeMessage<FetchDoneMoreResultsets>(nullptr);
  }

  FetchDoneMoreResultsets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDoneMoreResultsets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FetchDoneMoreResultsets& from);
  void MergeFrom(const FetchDoneMoreResultsets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchDoneMoreResultsets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Resultset.FetchDoneMoreResultsets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.FetchDoneMoreResultsets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class FetchDone :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Resultset.FetchDone) */ {
 public:
  FetchDone();
  virtual ~FetchDone();

  FetchDone(const FetchDone& from);
  FetchDone(FetchDone&& from) noexcept
    : FetchDone() {
    *this = ::std::move(from);
  }

  inline FetchDone& operator=(const FetchDone& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchDone& operator=(FetchDone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FetchDone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchDone* internal_default_instance() {
    return reinterpret_cast<const FetchDone*>(
               &_FetchDone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FetchDone& a, FetchDone& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchDone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchDone* New() const final {
    return CreateMaybeMessage<FetchDone>(nullptr);
  }

  FetchDone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchDone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FetchDone& from);
  void MergeFrom(const FetchDone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchDone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Resultset.FetchDone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.FetchDone)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class FetchSuspended :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Resultset.FetchSuspended) */ {
 public:
  FetchSuspended();
  virtual ~FetchSuspended();

  FetchSuspended(const FetchSuspended& from);
  FetchSuspended(FetchSuspended&& from) noexcept
    : FetchSuspended() {
    *this = ::std::move(from);
  }

  inline FetchSuspended& operator=(const FetchSuspended& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchSuspended& operator=(FetchSuspended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FetchSuspended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchSuspended* internal_default_instance() {
    return reinterpret_cast<const FetchSuspended*>(
               &_FetchSuspended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FetchSuspended& a, FetchSuspended& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchSuspended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchSuspended* New() const final {
    return CreateMaybeMessage<FetchSuspended>(nullptr);
  }

  FetchSuspended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchSuspended>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FetchSuspended& from);
  void MergeFrom(const FetchSuspended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchSuspended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Resultset.FetchSuspended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.FetchSuspended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class ColumnMetaData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Resultset.ColumnMetaData) */ {
 public:
  ColumnMetaData();
  virtual ~ColumnMetaData();

  ColumnMetaData(const ColumnMetaData& from);
  ColumnMetaData(ColumnMetaData&& from) noexcept
    : ColumnMetaData() {
    *this = ::std::move(from);
  }

  inline ColumnMetaData& operator=(const ColumnMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnMetaData& operator=(ColumnMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ColumnMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnMetaData* internal_default_instance() {
    return reinterpret_cast<const ColumnMetaData*>(
               &_ColumnMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ColumnMetaData& a, ColumnMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnMetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnMetaData* New() const final {
    return CreateMaybeMessage<ColumnMetaData>(nullptr);
  }

  ColumnMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnMetaData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ColumnMetaData& from);
  void MergeFrom(const ColumnMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColumnMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Resultset.ColumnMetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ColumnMetaData_FieldType FieldType;
  static constexpr FieldType SINT =
    ColumnMetaData_FieldType_SINT;
  static constexpr FieldType UINT =
    ColumnMetaData_FieldType_UINT;
  static constexpr FieldType DOUBLE =
    ColumnMetaData_FieldType_DOUBLE;
  static constexpr FieldType FLOAT =
    ColumnMetaData_FieldType_FLOAT;
  static constexpr FieldType BYTES =
    ColumnMetaData_FieldType_BYTES;
  static constexpr FieldType TIME =
    ColumnMetaData_FieldType_TIME;
  static constexpr FieldType DATETIME =
    ColumnMetaData_FieldType_DATETIME;
  static constexpr FieldType SET =
    ColumnMetaData_FieldType_SET;
  static constexpr FieldType ENUM =
    ColumnMetaData_FieldType_ENUM;
  static constexpr FieldType BIT =
    ColumnMetaData_FieldType_BIT;
  static constexpr FieldType DECIMAL =
    ColumnMetaData_FieldType_DECIMAL;
  static inline bool FieldType_IsValid(int value) {
    return ColumnMetaData_FieldType_IsValid(value);
  }
  static constexpr FieldType FieldType_MIN =
    ColumnMetaData_FieldType_FieldType_MIN;
  static constexpr FieldType FieldType_MAX =
    ColumnMetaData_FieldType_FieldType_MAX;
  static constexpr int FieldType_ARRAYSIZE =
    ColumnMetaData_FieldType_FieldType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FieldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FieldType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FieldType_Name.");
    return ColumnMetaData_FieldType_Name(enum_t_value);
  }
  static inline bool FieldType_Parse(const std::string& name,
      FieldType* value) {
    return ColumnMetaData_FieldType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kOriginalNameFieldNumber = 3,
    kTableFieldNumber = 4,
    kOriginalTableFieldNumber = 5,
    kSchemaFieldNumber = 6,
    kCatalogFieldNumber = 7,
    kCollationFieldNumber = 8,
    kFractionalDigitsFieldNumber = 9,
    kLengthFieldNumber = 10,
    kFlagsFieldNumber = 11,
    kContentTypeFieldNumber = 12,
    kTypeFieldNumber = 1,
  };
  // optional bytes name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes original_name = 3;
  bool has_original_name() const;
  private:
  bool _internal_has_original_name() const;
  public:
  void clear_original_name();
  const std::string& original_name() const;
  void set_original_name(const std::string& value);
  void set_original_name(std::string&& value);
  void set_original_name(const char* value);
  void set_original_name(const void* value, size_t size);
  std::string* mutable_original_name();
  std::string* release_original_name();
  void set_allocated_original_name(std::string* original_name);
  private:
  const std::string& _internal_original_name() const;
  void _internal_set_original_name(const std::string& value);
  std::string* _internal_mutable_original_name();
  public:

  // optional bytes table = 4;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const void* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // optional bytes original_table = 5;
  bool has_original_table() const;
  private:
  bool _internal_has_original_table() const;
  public:
  void clear_original_table();
  const std::string& original_table() const;
  void set_original_table(const std::string& value);
  void set_original_table(std::string&& value);
  void set_original_table(const char* value);
  void set_original_table(const void* value, size_t size);
  std::string* mutable_original_table();
  std::string* release_original_table();
  void set_allocated_original_table(std::string* original_table);
  private:
  const std::string& _internal_original_table() const;
  void _internal_set_original_table(const std::string& value);
  std::string* _internal_mutable_original_table();
  public:

  // optional bytes schema = 6;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const std::string& schema() const;
  void set_schema(const std::string& value);
  void set_schema(std::string&& value);
  void set_schema(const char* value);
  void set_schema(const void* value, size_t size);
  std::string* mutable_schema();
  std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // optional bytes catalog = 7;
  bool has_catalog() const;
  private:
  bool _internal_has_catalog() const;
  public:
  void clear_catalog();
  const std::string& catalog() const;
  void set_catalog(const std::string& value);
  void set_catalog(std::string&& value);
  void set_catalog(const char* value);
  void set_catalog(const void* value, size_t size);
  std::string* mutable_catalog();
  std::string* release_catalog();
  void set_allocated_catalog(std::string* catalog);
  private:
  const std::string& _internal_catalog() const;
  void _internal_set_catalog(const std::string& value);
  std::string* _internal_mutable_catalog();
  public:

  // optional uint64 collation = 8;
  bool has_collation() const;
  private:
  bool _internal_has_collation() const;
  public:
  void clear_collation();
  ::PROTOBUF_NAMESPACE_ID::uint64 collation() const;
  void set_collation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_collation() const;
  void _internal_set_collation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 fractional_digits = 9;
  bool has_fractional_digits() const;
  private:
  bool _internal_has_fractional_digits() const;
  public:
  void clear_fractional_digits();
  ::PROTOBUF_NAMESPACE_ID::uint32 fractional_digits() const;
  void set_fractional_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fractional_digits() const;
  void _internal_set_fractional_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 length = 10;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 11;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 content_type = 12;
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 content_type() const;
  void set_content_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_content_type() const;
  void _internal_set_content_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Mysqlx::Resultset::ColumnMetaData_FieldType type() const;
  void set_type(::Mysqlx::Resultset::ColumnMetaData_FieldType value);
  private:
  ::Mysqlx::Resultset::ColumnMetaData_FieldType _internal_type() const;
  void _internal_set_type(::Mysqlx::Resultset::ColumnMetaData_FieldType value);
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.ColumnMetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr catalog_;
  ::PROTOBUF_NAMESPACE_ID::uint64 collation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fractional_digits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 content_type_;
  int type_;
  friend struct ::TableStruct_mysqlx_5fresultset_2eproto;
};
// -------------------------------------------------------------------

class Row :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Resultset.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const final {
    return CreateMaybeMessage<Row>(nullptr);
  }

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mysqlx.Resultset.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated bytes field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  const std::string& field(int index) const;
  std::string* mutable_field(int index);
  void set_field(int index, const std::string& value);
  void set_field(int index, std::string&& value);
  void set_field(int index, const char* value);
  void set_field(int index, const void* value, size_t size);
  std::string* add_field();
  void add_field(const std::string& value);
  void add_field(std::string&& value);
  void add_field(const char* value);
  void add_field(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field();
  private:
  const std::string& _internal_field(int index) const;
  std::string* _internal_add_field();
  public:

  // @@protoc_insertion_point(class_scope:Mysqlx.Resultset.Row)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_;
  friend struct ::TableStruct_mysqlx_5fresultset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FetchDoneMoreOutParams

// -------------------------------------------------------------------

// FetchDoneMoreResultsets

// -------------------------------------------------------------------

// FetchDone

// -------------------------------------------------------------------

// FetchSuspended

// -------------------------------------------------------------------

// ColumnMetaData

// required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
inline bool ColumnMetaData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ColumnMetaData::has_type() const {
  return _internal_has_type();
}
inline void ColumnMetaData::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::Mysqlx::Resultset::ColumnMetaData_FieldType ColumnMetaData::_internal_type() const {
  return static_cast< ::Mysqlx::Resultset::ColumnMetaData_FieldType >(type_);
}
inline ::Mysqlx::Resultset::ColumnMetaData_FieldType ColumnMetaData::type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.type)
  return _internal_type();
}
inline void ColumnMetaData::_internal_set_type(::Mysqlx::Resultset::ColumnMetaData_FieldType value) {
  assert(::Mysqlx::Resultset::ColumnMetaData_FieldType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
}
inline void ColumnMetaData::set_type(::Mysqlx::Resultset::ColumnMetaData_FieldType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.type)
}

// optional bytes name = 2;
inline bool ColumnMetaData::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColumnMetaData::has_name() const {
  return _internal_has_name();
}
inline void ColumnMetaData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ColumnMetaData::name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.name)
  return _internal_name();
}
inline void ColumnMetaData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.name)
}
inline std::string* ColumnMetaData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.name)
  return _internal_mutable_name();
}
inline const std::string& ColumnMetaData::_internal_name() const {
  return name_.GetNoArena();
}
inline void ColumnMetaData::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnMetaData::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.name)
}
inline void ColumnMetaData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.name)
}
inline void ColumnMetaData::set_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.name)
}
inline std::string* ColumnMetaData::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnMetaData::release_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnMetaData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.name)
}

// optional bytes original_name = 3;
inline bool ColumnMetaData::_internal_has_original_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColumnMetaData::has_original_name() const {
  return _internal_has_original_name();
}
inline void ColumnMetaData::clear_original_name() {
  original_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ColumnMetaData::original_name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.original_name)
  return _internal_original_name();
}
inline void ColumnMetaData::set_original_name(const std::string& value) {
  _internal_set_original_name(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.original_name)
}
inline std::string* ColumnMetaData::mutable_original_name() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.original_name)
  return _internal_mutable_original_name();
}
inline const std::string& ColumnMetaData::_internal_original_name() const {
  return original_name_.GetNoArena();
}
inline void ColumnMetaData::_internal_set_original_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  original_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnMetaData::set_original_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  original_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.original_name)
}
inline void ColumnMetaData::set_original_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  original_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.original_name)
}
inline void ColumnMetaData::set_original_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  original_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.original_name)
}
inline std::string* ColumnMetaData::_internal_mutable_original_name() {
  _has_bits_[0] |= 0x00000002u;
  return original_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnMetaData::release_original_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.original_name)
  if (!_internal_has_original_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return original_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnMetaData::set_allocated_original_name(std::string* original_name) {
  if (original_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  original_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.original_name)
}

// optional bytes table = 4;
inline bool ColumnMetaData::_internal_has_table() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColumnMetaData::has_table() const {
  return _internal_has_table();
}
inline void ColumnMetaData::clear_table() {
  table_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ColumnMetaData::table() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.table)
  return _internal_table();
}
inline void ColumnMetaData::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.table)
}
inline std::string* ColumnMetaData::mutable_table() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.table)
  return _internal_mutable_table();
}
inline const std::string& ColumnMetaData::_internal_table() const {
  return table_.GetNoArena();
}
inline void ColumnMetaData::_internal_set_table(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnMetaData::set_table(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  table_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.table)
}
inline void ColumnMetaData::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.table)
}
inline void ColumnMetaData::set_table(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.table)
}
inline std::string* ColumnMetaData::_internal_mutable_table() {
  _has_bits_[0] |= 0x00000004u;
  return table_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnMetaData::release_table() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.table)
  if (!_internal_has_table()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return table_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnMetaData::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  table_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.table)
}

// optional bytes original_table = 5;
inline bool ColumnMetaData::_internal_has_original_table() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColumnMetaData::has_original_table() const {
  return _internal_has_original_table();
}
inline void ColumnMetaData::clear_original_table() {
  original_table_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ColumnMetaData::original_table() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.original_table)
  return _internal_original_table();
}
inline void ColumnMetaData::set_original_table(const std::string& value) {
  _internal_set_original_table(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.original_table)
}
inline std::string* ColumnMetaData::mutable_original_table() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.original_table)
  return _internal_mutable_original_table();
}
inline const std::string& ColumnMetaData::_internal_original_table() const {
  return original_table_.GetNoArena();
}
inline void ColumnMetaData::_internal_set_original_table(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  original_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnMetaData::set_original_table(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  original_table_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.original_table)
}
inline void ColumnMetaData::set_original_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  original_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.original_table)
}
inline void ColumnMetaData::set_original_table(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  original_table_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.original_table)
}
inline std::string* ColumnMetaData::_internal_mutable_original_table() {
  _has_bits_[0] |= 0x00000008u;
  return original_table_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnMetaData::release_original_table() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.original_table)
  if (!_internal_has_original_table()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return original_table_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnMetaData::set_allocated_original_table(std::string* original_table) {
  if (original_table != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  original_table_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_table);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.original_table)
}

// optional bytes schema = 6;
inline bool ColumnMetaData::_internal_has_schema() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ColumnMetaData::has_schema() const {
  return _internal_has_schema();
}
inline void ColumnMetaData::clear_schema() {
  schema_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ColumnMetaData::schema() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.schema)
  return _internal_schema();
}
inline void ColumnMetaData::set_schema(const std::string& value) {
  _internal_set_schema(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.schema)
}
inline std::string* ColumnMetaData::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.schema)
  return _internal_mutable_schema();
}
inline const std::string& ColumnMetaData::_internal_schema() const {
  return schema_.GetNoArena();
}
inline void ColumnMetaData::_internal_set_schema(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  schema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnMetaData::set_schema(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  schema_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.schema)
}
inline void ColumnMetaData::set_schema(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  schema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.schema)
}
inline void ColumnMetaData::set_schema(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  schema_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.schema)
}
inline std::string* ColumnMetaData::_internal_mutable_schema() {
  _has_bits_[0] |= 0x00000010u;
  return schema_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnMetaData::release_schema() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.schema)
  if (!_internal_has_schema()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return schema_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnMetaData::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  schema_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.schema)
}

// optional bytes catalog = 7;
inline bool ColumnMetaData::_internal_has_catalog() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ColumnMetaData::has_catalog() const {
  return _internal_has_catalog();
}
inline void ColumnMetaData::clear_catalog() {
  catalog_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ColumnMetaData::catalog() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.catalog)
  return _internal_catalog();
}
inline void ColumnMetaData::set_catalog(const std::string& value) {
  _internal_set_catalog(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.catalog)
}
inline std::string* ColumnMetaData::mutable_catalog() {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.ColumnMetaData.catalog)
  return _internal_mutable_catalog();
}
inline const std::string& ColumnMetaData::_internal_catalog() const {
  return catalog_.GetNoArena();
}
inline void ColumnMetaData::_internal_set_catalog(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  catalog_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnMetaData::set_catalog(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  catalog_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Resultset.ColumnMetaData.catalog)
}
inline void ColumnMetaData::set_catalog(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  catalog_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.ColumnMetaData.catalog)
}
inline void ColumnMetaData::set_catalog(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  catalog_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.ColumnMetaData.catalog)
}
inline std::string* ColumnMetaData::_internal_mutable_catalog() {
  _has_bits_[0] |= 0x00000020u;
  return catalog_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnMetaData::release_catalog() {
  // @@protoc_insertion_point(field_release:Mysqlx.Resultset.ColumnMetaData.catalog)
  if (!_internal_has_catalog()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return catalog_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnMetaData::set_allocated_catalog(std::string* catalog) {
  if (catalog != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  catalog_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), catalog);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Resultset.ColumnMetaData.catalog)
}

// optional uint64 collation = 8;
inline bool ColumnMetaData::_internal_has_collation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ColumnMetaData::has_collation() const {
  return _internal_has_collation();
}
inline void ColumnMetaData::clear_collation() {
  collation_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ColumnMetaData::_internal_collation() const {
  return collation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ColumnMetaData::collation() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.collation)
  return _internal_collation();
}
inline void ColumnMetaData::_internal_set_collation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  collation_ = value;
}
inline void ColumnMetaData::set_collation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_collation(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.collation)
}

// optional uint32 fractional_digits = 9;
inline bool ColumnMetaData::_internal_has_fractional_digits() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ColumnMetaData::has_fractional_digits() const {
  return _internal_has_fractional_digits();
}
inline void ColumnMetaData::clear_fractional_digits() {
  fractional_digits_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnMetaData::_internal_fractional_digits() const {
  return fractional_digits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnMetaData::fractional_digits() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.fractional_digits)
  return _internal_fractional_digits();
}
inline void ColumnMetaData::_internal_set_fractional_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  fractional_digits_ = value;
}
inline void ColumnMetaData::set_fractional_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fractional_digits(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.fractional_digits)
}

// optional uint32 length = 10;
inline bool ColumnMetaData::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ColumnMetaData::has_length() const {
  return _internal_has_length();
}
inline void ColumnMetaData::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnMetaData::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnMetaData::length() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.length)
  return _internal_length();
}
inline void ColumnMetaData::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  length_ = value;
}
inline void ColumnMetaData::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.length)
}

// optional uint32 flags = 11;
inline bool ColumnMetaData::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ColumnMetaData::has_flags() const {
  return _internal_has_flags();
}
inline void ColumnMetaData::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnMetaData::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnMetaData::flags() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.flags)
  return _internal_flags();
}
inline void ColumnMetaData::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  flags_ = value;
}
inline void ColumnMetaData::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.flags)
}

// optional uint32 content_type = 12;
inline bool ColumnMetaData::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ColumnMetaData::has_content_type() const {
  return _internal_has_content_type();
}
inline void ColumnMetaData::clear_content_type() {
  content_type_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnMetaData::_internal_content_type() const {
  return content_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnMetaData::content_type() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.ColumnMetaData.content_type)
  return _internal_content_type();
}
inline void ColumnMetaData::_internal_set_content_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  content_type_ = value;
}
inline void ColumnMetaData::set_content_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.ColumnMetaData.content_type)
}

// -------------------------------------------------------------------

// Row

// repeated bytes field = 1;
inline int Row::_internal_field_size() const {
  return field_.size();
}
inline int Row::field_size() const {
  return _internal_field_size();
}
inline void Row::clear_field() {
  field_.Clear();
}
inline std::string* Row::add_field() {
  // @@protoc_insertion_point(field_add_mutable:Mysqlx.Resultset.Row.field)
  return _internal_add_field();
}
inline const std::string& Row::_internal_field(int index) const {
  return field_.Get(index);
}
inline const std::string& Row::field(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Resultset.Row.field)
  return _internal_field(index);
}
inline std::string* Row::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Resultset.Row.field)
  return field_.Mutable(index);
}
inline void Row::set_field(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.Row.field)
  field_.Mutable(index)->assign(value);
}
inline void Row::set_field(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Mysqlx.Resultset.Row.field)
  field_.Mutable(index)->assign(std::move(value));
}
inline void Row::set_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Mysqlx.Resultset.Row.field)
}
inline void Row::set_field(int index, const void* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Resultset.Row.field)
}
inline std::string* Row::_internal_add_field() {
  return field_.Add();
}
inline void Row::add_field(const std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Mysqlx.Resultset.Row.field)
}
inline void Row::add_field(std::string&& value) {
  field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Mysqlx.Resultset.Row.field)
}
inline void Row::add_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Mysqlx.Resultset.Row.field)
}
inline void Row::add_field(const void* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Mysqlx.Resultset.Row.field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Row::field() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Resultset.Row.field)
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Row::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Resultset.Row.field)
  return &field_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Resultset
}  // namespace Mysqlx

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Mysqlx::Resultset::ColumnMetaData_FieldType> : ::std::true_type {};
template <> struct is_proto_enum< ::Mysqlx::Resultset::ContentType_BYTES> : ::std::true_type {};
template <> struct is_proto_enum< ::Mysqlx::Resultset::ContentType_DATETIME> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysqlx_5fresultset_2eproto
